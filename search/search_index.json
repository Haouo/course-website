{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Computer Organization Fall 2024","text":"<p>Info</p> <ul> <li>This is a course website for Computer Organization in Fall 2024.</li> <li>It contains information about labs and other resources.</li> <li>If you have any questions, please contact the TAs via Mattermost.</li> <li>Last updated : 2024/09/18 by \u88d5\u79be</li> </ul>"},{"location":"#lecture","title":"Lecture","text":"<ul> <li>\u8a08\u7b97\u6a5f\u7d44\u7e54\u8ab2\u7a0b\u5927\u7db1</li> <li>Instructor: \u8521\u5bb6\u9f4a (Chia-Chi Tsai)<ul> <li>\u96fb\u6a5f\u7cfb\u99285F 92510</li> <li>Email : cctsai@gs.ncku.edu.tw</li> <li>Office Hour : </li> </ul> </li> <li>Course Information (Time/Location): Wed. 9:10-12:00 / \u555f\u7aef\u9928 \u667a\u6167\u968e\u68af\u6559\u5ba4</li> </ul>"},{"location":"#labs","title":"Labs","text":"<ul> <li>TA list<ul> <li>Head TA : \u5f35\u5cfb\u8c6a</li> <li>TA : \u4f55\u660e\u5821\u3001\u8449\u4eba\u8c6a\u3001\u8521\u88d5\u79be\u3001\u5289\u8018\u50d1\u3001\u8a31\u7ff0\u7fd4\u3001\u7c21\u5fb7\u5f65</li> <li>Lab Preparation Only : \u85cd\u5349\u84c1\u3001\u856d\u6c4e\u7a4e\u3001\u5f90\u58eb\u6af3\u3001\u8b1d\u5b9c\u84c1</li> </ul> </li> <li>Email:  aislab.ncku.ee@gmail.com  <ul> <li>Please include [CO2024] to the beginning of the email subject</li> </ul> </li> </ul>"},{"location":"#course-grade","title":"Course Grade","text":"<ul> <li>Midterm and Final Exams 40%<ul> <li>Each account for 20%</li> </ul> </li> <li>Assignments 60%<ul> <li>Lab exercise for CPU and System Design</li> <li>Lab should be hand in on time</li> </ul> </li> </ul>"},{"location":"#related-links","title":"Related links","text":"<ul> <li>CO 2024 Gitlab</li> <li>CO 2024 Mattermost</li> <li>CO 2024 Hedgedoc</li> </ul>"},{"location":"mkdocs/","title":"About Mkdocs","text":"<p>Info</p> <ul> <li>Contributors: \u88d5\u79be</li> <li>Last updated: 2024/08/05</li> </ul> <p>MkDocs(Markdown Documents)\uff0c\u662f\u4e00\u500b\u975c\u614b\u7db2\u9801\u7522\u751f\u5668\uff0c\u53ef\u4ee5\u900f\u904e\u7c21\u55ae\u7684\u65b9\u5f0f\u5c07markdown\u6587\u4ef6\u6574\u7406\u6210\u6709\u5c64\u6b21\u4e14\u7f8e\u89c0\u7684\u7db2\u7ad9\u3002</p> <p>\u76ee\u524d\u4f7f\u7528Material for MkDocs\u4f86\u67b6\u8a2dCO2024\u7684\u8ab2\u7a0b\u7db2\u7ad9\uff0cMaterial\u662fMkDocs\u7684\u4e00\u500b\u4e3b\u984c\uff0c\u900f\u904egithub\u6216gitlab\u767c\u4f48repository\u4f86\u9032\u884c\u7ba1\u7406\uff0c\u4e26\u5229\u7528ci\u5de5\u5177\uff0c\u8b93repo\u5728git push\u5f8c\u53ef\u4ee5\u91cd\u65b0deploy\u4e26\u66f4\u65b0\u7db2\u9801\u5167\u5bb9\u3002</p> <p>mkdocs.yml\u662f\u4e00\u500bYAML\u6587\u4ef6\uff0c\u540c\u6642\u4e5f\u4f5c\u70ba\u6b64repo\u7684\u6838\u5fc3\uff0c\u5c0d\u7db2\u7ad9\u9032\u884c\u914d\u7f6e\u53ca\u7ba1\u7406\uff0c\u6587\u4ef6\u7684\u968e\u5c64\u95dc\u4fc2\u4e5f\u662f\u5728mkdocs.yml\u7684 <code>nav:</code> \u9032\u884c\u8a2d\u5b9a\u3002</p> <p>MkDocs\u7684 <code>nav:</code> \u9810\u8a2d\u5c07docs\u505a\u70ba\u6839\u76ee\u9304\uff0c\u56e0\u6b64\u5728 mkdocs.yml \u4e0a\u53ea\u9808\u5beb\u4e0a\u76f8\u5c0d\u8def\u5f91\u5c31\u597d\u3002</p> <p>\u652f\u63f4\u529f\u80fd </p> <ul> <li>\u4e00\u822c\u8207\u591c\u9593\u6a21\u5f0f\u5207\u63db</li> <li>\u95dc\u9375\u5b57\u641c\u5c0b\u6b04</li> </ul> <p>References : How to set up Material for MkDocs</p> <p>For Contributors</p>"},{"location":"mkdocs/#_1","title":"\u65b0\u589e\u9801\u9762","text":"<p>\u82e5\u662f\u9700\u8981\u65b0\u589e\u9801\u9762\uff0c\u8acb\u5728mkdocs.yml\u4e0b\u7684 <code>nav:</code> \u5340\u584a\u4e0b\u65b0\u589e <code>- \u9801\u9762\u540d\u7a31: XX.md</code>\uff0c\u4e4b\u5f8c\u5230docs\u8cc7\u6599\u593e\u4e0b\u65b0\u589e\u5c0d\u61c9\u7684 <code>XX.md</code> \u9032\u884c\u7db2\u9801\u5167\u5bb9\u7684\u7de8\u5beb\uff0c\u6587\u4ef6\u652f\u63f4\u591a\u6578Markdown\u8a9e\u6cd5\u3002</p>"},{"location":"mkdocs/#_2","title":"\u66f4\u65b0\u7db2\u7ad9\u5167\u5bb9","text":"<p>\u76ee\u524d\u5728 <code>.\\docs\\labs</code> \u4e0b\u5df2\u5efa\u7acblab1~lab8\u7684markdown\u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u6b64\u9032\u884c\u6559\u6750\u7684\u66f4\u65b0\uff0c\u9700\u8981\u7de8\u8f2f\u6216\u65b0\u589e\u5167\u5bb9\u7684\uff0c\u53ea\u9700\u8981\u5c07repo\u4e0b\u8f09\u5230\u672c\u5730\u7aef\u7de8\u8f2f\uff0c\u5b8c\u6210\u5f8c\u518dpush\u4e0a\u4f86\u5c31\u597d\u3002 \u5728\u9032\u884c\u6587\u4ef6\u7de8\u8f2f\u6642\uff0c\u6709\u6642Markdown\u6587\u4ef6\u4e26\u4e0d\u6703\u81ea\u52d5\u5e6b\u4f60\u5206\u6bb5\uff0c\u82e5\u9047\u5230\u76f8\u95dc\u554f\u984c\uff0c\u6709\u4e09\u7a2e\u89e3\u6c7a\u65b9\u5f0f</p> <ul> <li>\u5728\u6b32\u5206\u6bb5\u4e4b\u6bb5\u843d\u5f8c\u9762\u6309\u5169\u6b21\u7a7a\u767d\u9375</li> <li>\u5728\u6b32\u5206\u6bb5\u4e4b\u6bb5\u843d\u5f8c\u9762\u52a0\u4e0a <code>&lt;br&gt;</code></li> <li>\u5728\u5169\u6bb5\u843d\u9593\u591a\u52a0\u5165\u4e00\u500b\u7a7a\u884c</li> </ul>"},{"location":"mkdocs/#_3","title":"\u5716\u7247\u4e0a\u50b3","text":"<p>\u5728docs\u5e95\u4e0b\u6709images\u8cc7\u6599\u593e\uff0c\u5c08\u9580\u5b58\u53d6\u6587\u4ef6\u4e0a\u9700\u8981\u5f15\u7528\u7684\u5716\u7247\uff0c\u70ba\u4e86\u907f\u514d\u6df7\u4e82\uff0c\u6211\u6703\u5e0c\u671b\u5404\u81ea\u7684\u6587\u4ef6\u90fd\u6709\u81ea\u5df1\u7684\u76ee\u9304\u4f86\u5b58\u5716\u7247\uff0c\u76ee\u524d\u5148\u653e\u4e86lab1~lab8\u7684\u8cc7\u6599\u593e\uff0c\u6709\u9700\u8981\u7684\u8a71\u53ef\u4ee5\u81ea\u5df1\u65b0\u589e\uff0c\u63d2\u5165\u6642\u4f7f\u7528\u8a72\u6587\u4ef6\u8207\u5716\u7247\u7684\u76f8\u5c0d\u8def\u5f91\u3002</p> <p><pre><code>![example](./images/test000.jpg)\n</code></pre> \u7bc4\u4f8b </p>"},{"location":"mkdocs/#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"projects/","title":"AISLAB\u5c08\u984c\u65b9\u5411","text":""},{"location":"projects/#_1","title":"\u4e3b\u984c","text":"<ul> <li>\u4e3b\u6301\u4eba \u5cfb\u8c6a</li> </ul> <p>\u8a0e\u8ad6\u5c08\u984c\u7684\u5e7e\u500b\u65b9\u5411\uff0c\u5305\u542b\u6307\u4ee4\u96c6\u6a21\u64ec\u5668\u3001\u7cfb\u7d71\u6a21\u64ec\u5668\u3001OS\u3001CPU\u8a2d\u8a08</p> <p>\u63d0\u5230\u7684\u4e3b\u984c     1. ISA Simulator     2. System Emulator     3. Cache Simulator and DRAM Simulator     4. Operating System for RISC-V     5. Superscalar In-order RISC-V CPU     6. Out-of-Order (OoO) RISC-V CPU     7. RISC-V Vector Extension Related Topics</p>"},{"location":"references/","title":"\u88dc\u5145\u8cc7\u6599 &amp; \u53c3\u8003\u8cc7\u6599","text":""},{"location":"references/#_2","title":"\u95b1\u8b80\u66f8\u7c4d\u6216\u7db2\u7ad9","text":"<ul> <li>Computer Organization: The Software/Hardware Interface\uff08\u7b97\u76e4\u66f8\uff09\uff0cUndergraduate-Level</li> <li>Computer Architecture: A Quantitive Approach\uff08\u67f1\u5b50\u66f8\uff09\uff0cGraduate-Level</li> <li>ETH Zurich - Digital Design and Computer Architecture</li> <li>\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u57fa\u7840 \u7b2c\u4e09\u7248 (foxsen.github.io)</li> <li>Operating Systems: Three Easy Pieces (OSTEP)</li> <li>Operating System Concepts\uff08\u6050\u9f8d\u66f8\uff09</li> <li>\u5317\u6e05\u6e05\u83ef\u5927\u5b78 rCore RISC-V Operating System</li> <li>\u6bcf\u4f4d\u7a0b\u5f0f\u958b\u767c\u8005\u90fd\u8a72\u6709\u7684\u8a18\u61b6\u9ad4\u77e5\u8b58</li> </ul>"},{"location":"references/#others","title":"Others","text":"<ul> <li>\u6b64\u7db2\u7ad9\u4f7f\u7528 Material for MkDocs \u67b6\u8a2d</li> </ul>"},{"location":"announce/a0x000/","title":"Easy Markdown tutorial","text":"<p>\u539f\u6587\u9023\u7d50: Markdown\u8a9e\u6cd5\u5927\u5168</p> <p>\u6709\u4e9bMarkdown\u7684\u8a9e\u6cd5\u6c92\u8fa6\u6cd5\u7528\u5728\u9019\u88e1\uff0c\u53ef\u4ee5\u5728\u9019\u9801\u9032\u884c\u5c0d\u7167</p> <p>Example tip block</p> <p>example. 12345</p> <pre><code>!!! tip \"Example tip block\"\n    example.\n    12345\n</code></pre> <p>Example note block</p> <p>example. 12345</p> <p>Example info block</p> <p>example. 12345</p> <p>Example danger block</p> <p>example. 12345</p> <p>Example warning block</p> <p>example. 12345</p>"},{"location":"announce/a0x000/#markdown","title":"MarkDown\u8a9e\u6cd5\u5927\u5168","text":"<p>[Toc]</p> <p>@copyright MRcoding\u7b46\u8a18</p>"},{"location":"announce/a0x000/#_1","title":"\u4e3b\u6a19\u984c","text":"<p>\u6a19\u984c\u7684\u8a9e\u6cd5</p> <pre><code>\u6a19\u984c\n===\n</code></pre>"},{"location":"announce/a0x000/#_2","title":"\u526f\u6a19","text":"<p>\u526f\u6a19\u7684\u8a9e\u6cd5</p> <pre><code>\u526f\u6a19\n---\n</code></pre>"},{"location":"announce/a0x000/#_3","title":"\u5b57\u9ad4\u5927\u5c0f","text":"<p>\u5b57\u9ad4\u5927\u5c0f\u7684\u793a\u7bc4</p> <pre><code># H1\n## H2\n### H3\n#### H4\n##### H5\n</code></pre>"},{"location":"announce/a0x000/#h1","title":"H1","text":""},{"location":"announce/a0x000/#h2","title":"H2","text":""},{"location":"announce/a0x000/#h3","title":"H3","text":""},{"location":"announce/a0x000/#h4","title":"H4","text":""},{"location":"announce/a0x000/#h5","title":"H5","text":""},{"location":"announce/a0x000/#_4","title":"\u5b57\u9ad4\u6548\u679c","text":"<p>\u659c\u9ad4\u5b57 \u7c97\u9ad4\u5b57 \u659c\u7c97\u9ad4 ~~\u522a\u9664\u7dda~~ \u659c\u9ad42 \u659c\u7c972 \u6b63\u5e38^\u4e0a\u6a19^ \u6b63\u5e38~\u4e0b\u6a19~ ++\u5e95\u7dda++ \u87a2\u5149\u6a19\u8a18</p> <pre><code>*\u659c\u9ad4\u5b57*\n**\u7c97\u9ad4\u5b57**\n***\u659c\u9ad4\u517c\u7c97\u9ad4***\n~~\u522a\u9664\u7dda~~\n_\u659c\u9ad42_\n__\u659c\u7c972__\n\u6b63\u5e38^\u4e0a\u6a19^\n\u6b63\u5e38~\u4e0b\u6a19~\n++\u5e95\u7dda++\n==\u87a2\u5149\u6a19\u8a18==\n</code></pre>"},{"location":"announce/a0x000/#_5","title":"\u5f15\u6587","text":"<p>\u7e2e\u6392\u8a9e\u6cd5 \u7b2c\u4e00\u5c64</p> <p>\u7b2c\u4e8c\u5c64</p> <p>\u7b2c\u4e09\u5c64</p> <pre><code>&gt;\u7e2e\u6392\u8a9e\u6cd5\n&gt;\u7b2c\u4e00\u5c64\n&gt;&gt;\u7b2c\u4e8c\u5c64\n&gt;&gt;&gt;\u7b2c\u4e09\u5c64\n</code></pre>"},{"location":"announce/a0x000/#_6","title":"\u6a19\u865f","text":"<ol> <li>\u6578\u5b57\u6a19\u865f</li> <li>\u6578\u5b57\u6a19\u865f</li> <li>\u6578\u5b57\u6a19\u865f</li> <li>\u5176\u4ed6\u6a19\u865f</li> <li>\u5176\u4ed6\u6a19\u865f</li> <li>\u5176\u4ed6\u6a19\u865f</li> </ol> <pre><code>1. \u6578\u5b57\u6a19\u865f\n2. \u6578\u5b57\u6a19\u865f\n3. \u6578\u5b57\u6a19\u865f\n- \u5176\u4ed6\u6a19\u865f\n+ \u5176\u4ed6\u6a19\u865f\n* \u5176\u4ed6\u6a19\u865f\n</code></pre>"},{"location":"announce/a0x000/#_7","title":"\u7e2e\u6392+\u63db\u884c","text":"<pre><code>\u7e2e\u6392\n</code></pre> <p>\u63db\u884c  </p> <pre><code>[Tab]\u7e2e\u6392\n\u884c\u672b\u6309\u5169\u500b\u7a7a\u683c  \u7523\u751f\u65b7\u884c (\uff0e\u21b2)\u3002\n</code></pre>"},{"location":"announce/a0x000/#_8","title":"\u5de2\u72c0\u6a19\u865f","text":"<ul> <li>\u7121\u5e8f\u6e05\u55ae</li> <li> <p>\u7121\u5e8f\u6e05\u55ae</p> <ul> <li>\u7121\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae<ul> <li>\u7121\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae</li> </ul> </li> </ul> </li> <li> <p>\u6709\u5e8f\u6e05\u55ae</p> </li> <li>\u6709\u5e8f\u6e05\u55ae<ol> <li>\u6709\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae<ol> <li>\u6709\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae</li> </ol> </li> </ol> </li> </ul> <pre><code>- \u7121\u5e8f\u6e05\u55ae\n- \u7121\u5e8f\u6e05\u55ae\n    - \u7121\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae\n        - \u7121\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae\n\n1. \u6709\u5e8f\u6e05\u55ae\n2. \u6709\u5e8f\u6e05\u55ae\n    1. \u6709\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae\n        1. \u6709\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae\n</code></pre>"},{"location":"announce/a0x000/#_9","title":"\u5b9a\u7fa9\u6e05\u55ae","text":"\u540d\u8a5e1 \u89e3\u91cb1 \u540d\u5b572 \u89e3\u91cb2 <p>\u540d\u8a5e 3 ~ \u5b9a\u7fa9 3 ~ \u5b9a\u7fa9 3</p> <pre><code>\u540d\u8a5e1\n: \u89e3\u91cb1\n\n\u540d\u5b572\n: \u89e3\u91cb2\n\n\u540d\u8a5e 3\n~ \u5b9a\u7fa9 3\n~ \u5b9a\u7fa9 3\n</code></pre>"},{"location":"announce/a0x000/#_10","title":"\u9023\u7d50","text":"<p>\u9023\u7d50\u540d\u7a31</p> <pre><code>[\u9023\u7d50\u540d\u7a31](https://google.com \"\u6e38\u6a19\u986f\u793a\")\n</code></pre>"},{"location":"announce/a0x000/#_11","title":"\u7c21\u6613\u8d85\u9023\u7d50","text":"<p>https://google.com text@email.com</p> <pre><code>&lt;\u7db2\u5740\u6216mail&gt;\n</code></pre>"},{"location":"announce/a0x000/#_12","title":"\u5206\u9694\u7dda","text":"<p>1.</p> <p>2.</p> <p>3.</p> <p>4.</p> <pre><code>1.\n\u7a7a\u884c\n---\n2.\n***\n3.\n- - -\n4.\n* * *\n---\n</code></pre>"},{"location":"announce/a0x000/#_13","title":"\u7a0b\u5f0f\u78bc","text":"<p><pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    printf(\"Hello World\");\n\n    return 0;\n}\n</code></pre> ```cpp=</p>"},{"location":"announce/a0x000/#include","title":"include  <p>int main(){</p> <pre><code>printf(\"Hello World\");\n\nreturn 0;\n</code></pre> <p>} <code>\\</code>\u7a0b\u5f0f\u985e\u578b \u7a0b\u5f0f\u78bc ```  ```\u7a0b\u5f0f\u985e\u578b= \u884c\u865f+\u7a0b\u5f0f\u78bc ```</p>","text":""},{"location":"announce/a0x000/#_14","title":"\u6a19\u7c64\u9023\u7d50","text":"<p>Google Yahoo MSN.</p> <p>``` Google Yahoo MSN</p> <pre><code>---\n\n\u5716\u7247\n---\n![\u5716\u7247](https://i1.wp.com/mrcodingroom.freesite.host/wp-content/uploads/2019/01/Drawing.png \"\u54c8\")\n\n```md\n![\u5716\u7247\u540d\u7a31](\u9023\u7d50 \"\u6e38\u6a19\u986f\u793a\")\n</code></pre>"},{"location":"announce/a0x000/#_15","title":"\u5716\u7247\u9023\u7d50","text":"<pre><code>[![\u5716\u7247](\u5716\u7247\u7db2\u5740)](\u9023\u7d50\u7db2\u5740)\n</code></pre>"},{"location":"announce/a0x000/#_16","title":"\u8868\u683c","text":"\u6b04\u4f4d1 \u6b04\u4f4d2 \u6b04\u4f4d3 \u7f6e\u5de6 \u7f6e\u53f3 \u7f6e\u4e2d $100 $100 $100 $10 $10 $10 $1 $1 $1 <pre><code>| \u6b04\u4f4d1 | \u6b04\u4f4d2 | \u6b04\u4f4d3 |\n| :-- | --: |:--:|\n| \u7f6e\u5de6  | \u7f6e\u53f3 | \u7f6e\u4e2d |\n</code></pre>"},{"location":"announce/a0x000/#_17","title":"\u77ed\u5340\u584a","text":"<p><code>\u5167\u5bb9</code></p> <p>`\u5167\u5bb9`</p>"},{"location":"announce/a0x000/#checkbox","title":"CheckBox","text":"<ul> <li>[ ] uncheck</li> <li>[x] check</li> </ul> <pre><code> - [ ] uncheck\n - [x] check\n</code></pre>"},{"location":"announce/a0x000/#_18","title":"\u8df3\u812b\u5b57\u5143","text":"<p>## ```</p> <pre><code>\\+\u4efb\u610f\u7b26\u865f\n</code></pre>"},{"location":"announce/a0x000/#tags-markdown-hackmd","title":"tags: <code>MarkDown\u6559\u5b78</code> <code>HackMD\u65b0\u624b\u6559\u5b78</code>","text":""},{"location":"announce/update/","title":"Announcement updates","text":"<p>\u7d00\u9304\u6700\u8fd1\u66f4\u65b0\u7684\u8ab2\u7a0b\u516c\u544a</p>"},{"location":"announce/update/#0x000-testing","title":"0x000 Testing","text":"<p>Topic: \u6e2c\u8a66\u7528\u7684\u7bc4\u4f8b</p>"},{"location":"labs/lab0/","title":"Lab 0 - How To Ask Questions The Smart Way","text":"<p>Info</p> <ul> <li>Contributors : TA \u5cfb\u8c6a</li> <li>Deadline : 2024/09/20</li> </ul> updates information <p>update 240911: \u65b0\u589e\u6b64\u9801\u9762 update 240912: \u5b8c\u6210\u6b64\u9801\u9762\u5167\u5bb9  </p>"},{"location":"labs/lab0/#preamble","title":"Preamble","text":"<p>\u9996\u5148\uff0c\u975e\u5e38\u6b61\u8fce\u5404\u4f4d\u540c\u5b78\u9078\u4fee\u8521\u5bb6\u9f4a\u6559\u6388\u958b\u8a2d\u5728\u5927\u5b78\u90e8\u7684\u8a08\u7b97\u6a5f\u7d44\u7e54\u8ab2\u7a0b\uff0c\u4eca\u5e74\u7684\u5167\u5bb9\u76f8\u8f03\u65bc\u53bb\u5e74\u6703\u8b8a\u5f97\u66f4\u52a0\u8c50\u5bcc\uff0c\u96d6\u7136\u53bb\u5e74\u7684\u96e3\u5ea6\u5176\u5be6\u5df2\u7d93\u975e\u5e38\u9ad8\uff0c\u4f46\u4eca\u5e74\u4e26\u975e\u628a Lab \u8b8a\u5f97\u66f4\u96e3\uff0c\u800c\u662f\u5728\u4e0d\u8d85\u7db1\u7684\u524d\u63d0\u4e4b\u4e0b\uff0c\u76e1\u91cf\u6559\u7d66\u540c\u5b78\u8d8a\u591a\u7684\u77e5\u8b58\uff08\u7562\u7adf\u6210\u5927\u96fb\u6a5f\u6240\u76ee\u524d\u6c92\u6709\u958b\u8a2d\u8a08\u7b97\u6a5f\u7d50\u69cb QQ\uff09\uff0c\u8b93\u540c\u5b78\u5c0d\u6574\u500b\u8a08\u7b97\u6a5f\u7cfb\u7d71\u672c\u8eab\u6709\u66f4\u5145\u5206\u7684\u4e86\u89e3\u3002\u6709\u9452\u65bc\u52a9\u6559\u53bb\u5e74\u6559\u5b78\u7684\u7d93\u9a57\uff0c\u52a9\u6559\u767c\u73fe\u5927\u90e8\u5206\u7684\u5b78\u751f\u4e26\u4e0d\u77e5\u9053\u5982\u4f55\u300e\u6b63\u78ba\u5730\u63d0\u554f\u300f\uff0c\u8a31\u591a\u4eba\u5f80\u5f80\u7121\u6cd5\u7cbe\u78ba\u5730\u8868\u9054\u81ea\u5df1\u7684\u554f\u984c\uff0c\u4ee5\u81f3\u65bc\u52a9\u6559\u5e38\u5e38\u5fc5\u9808\u82b1\u66f4\u591a\u6642\u9593\u4e86\u89e3\u540c\u5b78\u7684\u554f\u984c\u5230\u5e95\u662f\u4ec0\u9ebc\uff0c\u624d\u80fd\u7d66\u51fa\u6b63\u78ba\u7684\u7b54\u8986\u3002\u56e0\u6b64\uff0c\u4eca\u5e74\u7279\u5225\u591a\u4e86 Lab 0\uff0c\u5e0c\u671b\u53ef\u4ee5\u8b93\u540c\u5b78\u6709\u6240\u6536\u7a6b\u3002</p> <p>Lab 0 \u5927\u90e8\u5206\u7684\u5167\u5bb9\u53c3\u8003\u81ea\u6587\u7ae0\uff1aHow To Ask Questions The Smart Way \u548c \u5317\u4eac\u5927\u5b78 \u7de8\u8b6f\u5be6\u8e10\u7dda\u4e0a\u6587\u4ef6\uff0c\u52a9\u6559\u64f7\u53d6\u7576\u4e2d\u52a9\u6559\u8a8d\u70ba\u6bd4\u8f03\u91cd\u8981\u7684\u90e8\u5206\uff0c\u540c\u5b78\u82e5\u6709\u8208\u8da3\u4e5f\u53ef\u4ee5\u81ea\u884c\u95b1\u8b80\u5168\u6587\u3002</p>"},{"location":"labs/lab0/#_1","title":"\u9762\u5c0d\u554f\u984c\u7684\u614b\u5ea6","text":"<p>\u5728\u505a\u5be6\u9a57\u548c\u5beb\u4f5c\u696d\u7684\u904e\u7a0b\u4e2d\uff0c\u4f60\u53ef\u80fd\u6703\u5e38\u5e38\u9047\u5230\u4e0b\u9762\u7684\u554f\u984c</p> <ol> <li>\u4e0d\u6e05\u695a\u67d0\u500b Toolchain \u7684\u7528\u6cd5</li> <li>\u4e0d\u77e5\u9053\u600e\u9ebc\u5be6\u4f5c\u67d0\u500b Function</li> <li>\u770b\u4e0d\u61c2 Compiling/Linking Time \u51fa\u73fe\u7684\u8b66\u544a\u6216\u662f\u932f\u8aa4\u8a0a\u606f</li> <li>\u5c0d Runtime Error \u6beb\u7121\u982d\u7dd2</li> <li>\u5c31\u7b97\u7a0b\u5f0f\u6216\u662f\u96fb\u8def\u53ef\u4ee5\u6b63\u5e38\u904b\u4f5c\uff0c\u4f46\u662f\u7d50\u679c\u548c\u4f60\u6240\u60f3\u7684\u76f8\u53bb\u751a\u9060</li> <li>\u5176\u4ed6\u5404\u5f0f\u5404\u6a23\u7684\u554f\u984c...</li> </ol> <p>\u8207\u5176\u8aaa\u9047\u5230\u554f\u984c\u662f\u4e00\u4ef6\u5f88\u6b63\u5e38\u7684\u4e8b\u60c5\uff0c\u4e0d\u5982\u8aaa...\u4f60\u5982\u679c\u5728\u904e\u7a0b\u4e2d\u90fd\u6c92\u9047\u5230\u554f\u984c\u7684\u8a71\uff0c\u4f60\u53cd\u800c\u8a72\u61f7\u7591\u4e00\u4e0b\u81ea\u5df1\uff08\uff1f</p> <p>\u52a9\u6559\u5e0c\u671b\u540c\u5b78\u5011\u5728\u505a Lab \u7684\u904e\u7a0b\u4e2d\uff0c\u4e0d\u8981\u61f7\u62b1\u8457\u4ee5\u4e0b\u7684\u5fc3\u614b</p> <ol> <li>\u51fa\u554f\u984c\u7684\u6642\u5019\u96a8\u4fbf\u6539\u6539\u81ea\u5df1\u7684\u7a0b\u5f0f\u78bc\uff0c\u53cd\u6b63\u80fd\u8dd1\u51fa\u9810\u671f\u7684\u7d50\u679c\u3001\u80fd\u904e Test-bench \u5c31\u597d\uff0c\u5c0d\u554f\u984c\u767c\u751f\u7684\u539f\u56e0\u548c\u4f86\u7531\u4e00\u7121\u6240\u77e5</li> <li>\u9047\u5230\u554f\u984c\u99ac\u4e0a\u60f3\u8457\u62b1\u5927\u817f\uff0c\u6c42\u52a9\u53b2\u5bb3\u7684\u540c\u5b78\u6216\u662f\u52a9\u6559\uff0c\u800c\u6c92\u6709\u81ea\u5df1\u5617\u8a66\u7406\u89e3\u554f\u984c</li> <li>\u7528\u6beb\u7121\u610f\u7fa9\u7684\u65b9\u5f0f\u63d0\u51fa\u554f\u984c\uff0c\u4f8b\u5982\uff1a<ul> <li>\u70ba\u4ec0\u9ebc\u6211\u7684\u7a0b\u5f0f\u6c92\u8fa6\u6cd5\u901a\u904e\u7de8\u8b6f\uff1f</li> <li>\u70ba\u4ec0\u9ebc\u6211\u6c92\u8fa6\u6cd5\u901a\u904e\u6e2c\u8cc7\uff1f</li> </ul> </li> <li>\u5373\u4f7f\u4f60\u4e0a\u7db2\u5617\u8a66\u5c0b\u627e solution\uff0c\u4f46\u4f60\u5c0d\u7db2\u8def\u4e0a\u7684\u5167\u5bb9\u5168\u76e4\u76f8\u4fe1\uff0c\u5b8c\u5168\u6c92\u6709\u81ea\u6211\u601d\u8fa8\u548c\u904e\u6ffe\u5167\u5bb9\u7684\u80fd\u529b\uff0c\u770b\u5230\u8a31\u591a\u52a3\u8cea\u7684\u5167\u5bb9\uff0c\u751a\u81f3\u932f\u8aa4\u7684\u8cc7\u8a0a\u90fd\u6e3e\u7136\u4e0d\u77e5\uff08\u5c0d ChatGPT \u4f86\u8aaa\u4e5f\u662f\uff0c\u4f60\u4e0d\u8a72\u89ba\u5f97 ChatGPT \u8b1b\u7684\u5c31\u662f\u8056\u65e8\uff0c\u751a\u81f3\u9084\u89ba\u5f97\u6211\u90fd\u7167\u505a\u4e86\u600e\u9ebc\u9084\u662f\u4e0d\u884c...\uff09</li> </ol> <p>\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4f60\u61c9\u8a72\u8981</p> <ol> <li>\u4e0d\u8981\u653e\u904e\u4efb\u4f55\u7406\u89e3\u554f\u984c\u7684\u6a5f\u6703</li> <li>\u7368\u7acb\u601d\u8003\u7684\u80fd\u529b</li> <li>\u4e0d\u8981\u5bb3\u6015\u5617\u8a66\u89e3\u6c7a\u554f\u984c\uff0c\u4e0d\u8981\u5bb3\u6015\u9047\u5230\u932f\u8aa4\uff0c\u4f60\u6703\u5728\u904e\u7a0b\u4e2d\u5b78\u5230\u8d85\u591a\u6771\u897f</li> <li>STFW (Search The F\u2026 Fantastic Web), RTFM (Read The Fantastic Manual), RTFSC (Read The Fantastic Source Code)</li> <li>Try to search your problems by using english instead of chinese\uff0c\u5617\u8a66\u4f7f\u7528\u82f1\u6587\u641c\u5c0b\u5c08\u696d\u554f\u984c\uff0c\u4f60\u6703\u767c\u73fe\u53e6\u4e00\u7247\u5929</li> <li>\u5617\u8a66\u95b1\u8b80\u7b2c\u4e00\u624b\u6587\u4ef6\uff08e.g., \u898f\u683c\u66f8\uff09\uff0c\u800c\u4e0d\u662f\u904e\u5ea6\u4f9d\u8cf4\u6240\u8b02\u7684\u300c\u6559\u5b78\u300d\u6216\u662f\u300c\u61f6\u4eba\u5305\u300d</li> </ol>"},{"location":"labs/lab0/#_2","title":"\u5728\u4f60\u63d0\u554f\u4e4b\u524d","text":"<p>\u5728\u4f60\u6e96\u5099\u5411\u52a9\u6559\u6216\u662f\u5176\u4ed6\u540c\u5b78\u63d0\u554f\u4e4b\u524d\uff0c\u8acb\u5148\u554f\u554f\u4f60\u81ea\u5df1\u4f60\u662f\u5426\u5df2\u7d93\u505a\u5230\u4e86\u4e0b\u9762\u9019\u4e9b\u4e8b\u60c5\uff1a</p> <ol> <li>\u4f60 Google \u904e\u4e86\u55ce\uff1f\u4f60\u77e5\u9053\u4f60\u8a72\u641c\u5c0b\u90a3\u4e9b\u95dc\u9375\u5b57\u55ce\uff1f</li> <li>\u4f60\u554f\u904e ChatGPT \u4e86\u55ce\uff1f</li> <li>\u4f60\u4ed4\u7d30\u770b\u904e\u4f60\u7684 Source Code \u4e86\u55ce\uff1f\u4f60\u4ed4\u7d30\u770b\u904e Error Message \u4e86\u55ce\uff1f</li> <li>\u4f60\u5617\u8a66\u904e\u628a Error Message \u4e2d\u7684\u95dc\u9375\u5b57\u4e1f\u5230\u641c\u5c0b\u5f15\u64ce\u88e1\u9762\u4e86\u55ce\uff1f</li> <li>\u4f60\u8a66\u5716\u5206\u6790\u904e\u539f\u56e0\u4e86\u55ce\uff1f\u4f60\u7406\u89e3\u6574\u500b\u554f\u984c\u7684\u8108\u7d61\u4e86\u55ce\uff1f</li> </ol>"},{"location":"labs/lab0/#large-language-model-llm","title":"\u95dc\u65bc Large Language Model (LLM)","text":"<p>\u9019\u500b\u90e8\u5206\u662f\u52a9\u6559\u4eca\u5e74\u7279\u5225\u52a0\u9032\u4f86\u7684\uff0c\u56e0\u61c9\u76ee\u524d\u5927\u578b\u8a9e\u8a00\u6a21\u578b\u76f8\u95dc\u7684\u670d\u52d9\uff08e.g, ChatGPT, ClaudeAI, LLAMA, Google Gemini, Github Copilot\uff09\u7684\u80fd\u529b\u8d8a\u4f86\u8d8a\u5f37\uff0c\u52a9\u6559\u4e5f\u5e0c\u671b\u5927\u5bb6\u53ef\u4ee5\u5584\u7528 GPT \u800c\u4e0d\u662f\u6392\u65a5\u3001\u5b8c\u5168\u4e0d\u4f7f\u7528 GPT\u3002\u4f46\u662f\uff0c\u5728\u53bb\u5e74\u7684\u6559\u5b78\u7d93\u9a57\u4e2d\uff0c\u52a9\u6559\u767c\u73fe\u6709\u4e9b\u4eba\u4e0d\u53ea\u662f\u4f7f\u7528 GPT\uff0c\u800c\u662f\u628a GPT \u7576\u6210 Problem Solver \u4f86\u4f7f\u7528\u3002\u52a9\u6559\u66fe\u7d93\u9047\u5230\u6709\u540c\u5b78\u554f\u52a9\u6559\uff1a\u300c\u52a9\u6559\uff0c\u6211\u5df2\u7d93\u7167\u8457 ChatGPT \u7684\u6307\u793a\u64cd\u4f5c\u4e86\uff0c\u70ba\u4ec0\u9ebc\u9084\u662f\u4e0d\u884c\uff1f\u300d\uff0c\u52a9\u6559\u53cd\u800c\u624d\u60f3\u53cd\u554f\u540c\u5b78\uff0c\u70ba\u4ec0\u9ebc\u4f60\u6703\u89ba\u5f97 ChatGPT \u8aaa\u7684\u65b9\u5f0f\u662f\u6b63\u78ba\u7684\uff1f\u4f60\u78ba\u5b9a\u5b83\u61c2\u4f60\u5728\u554f\u4ec0\u9ebc\u55ce\uff1f\u4f60\u78ba\u5b9a\u4f60\u81ea\u5df1\u61c2\u5b83\u5728\u8aaa\u4ec0\u9ebc\u55ce\uff1f</p> <p>\u5728\u52a9\u6559\u7684\u89c0\u9ede\u4e2d\uff0cLLM \u78ba\u5be6\u53ef\u4ee5\u5e6b\u6211\u5011\u89e3\u6c7a\u5f88\u591a\u554f\u984c\u3001\u53ef\u4ee5\u6b63\u78ba\u5730\u56de\u7b54\u8d8a\u4f86\u8d8a\u591a\u8907\u96dc\u7684\u554f\u984c\uff0c\u4f46\u662f\uff0c\u52a9\u6559\u6703\u5e0c\u671b\u540c\u5b78\u5011\u5427 LLM \u7576\u6210\u662f\u4f60\u7684\u79c1\u4eba\u9867\u554f\uff0c\u4e5f\u5c31\u662f Consultant\uff0c\u4f60\u53ef\u4ee5\u5411\u5b83\u63d0\u554f\uff0c\u548c\u5b83\u8a0e\u8ad6\u751a\u81f3\u662f\u7cfe\u6b63\u5b83\uff0c\u4f46\u8acb\u4e0d\u8981\u9810\u8a2d\u5b83\u8aaa\u7684\u8a71\u662f\u5c0d\u7684\u3002\u5982\u679c\u4f60\u6709\u9019\u7a2e\u5fc3\u614b\u7684\u8a71\uff0c\u90a3\u4f60\u771f\u7684\u5f88\u6709\u53ef\u80fd\u6703\u88ab AI \u53d6\u4ee3\u3002</p>"},{"location":"labs/lab0/#how-to-ask-questions","title":"How To Ask Questions?","text":"<p>\u6839\u64da\u52a9\u6559\u7684\u7d93\u9a57\uff0c\u5927\u90e8\u5206\u7684\u540c\u5b78\u554f\u554f\u984c\u7684\u65b9\u5f0f\u6703\u50cf\u662f\u4e0b\u9762\u9019\u6a23</p> <p>\u52a9\u6559\uff0c\u70ba\u4ec0\u9ebc XXX \u8dd1\u4e0d\u8d77\u4f86\uff1f\u70ba\u4ec0\u9ebc XXX \u7de8\u8b6f\u6703\u5931\u6557\uff1f</p> <p>\u540c\u5b78\u5f88\u5d29\u6f70\uff0c\u52a9\u6559\u807d\u5230\u540c\u5b78\u7684\u554f\u984c\u4e5f\u5d29\u6f70\u4e86...\u52a9\u6559\u54ea\u6703\u77e5\u9053\u70ba\u4ec0\u9ebc\u554a\uff1f\uff1f</p> <p>\u8acb\u5927\u5bb6\u4e0d\u8981\u518d\u7528\u9019\u7a2e\u65b9\u5f0f\u554f\u554f\u984c\u4e86\uff0c\u9019\u985e\u7684\u554f\u984c\u5c0d\u4f60\u6211\u4f86\u8aaa\u90fd\u6c92\u6709\u4efb\u4f55\u50f9\u503c\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u6709\u4eba\u53ef\u80fd\u6703\u554f\u52a9\u6559\uff1a\u300cRISC-V Assembly \u5982\u679c\u5beb <code>addi x0, x0,x0</code> \u662f\u5408\u6cd5\u7684\u55ce\uff1f\u300d\uff0c\u9019\u7a2e\u554f\u984c\u8207\u5176\u82b1\u6642\u9593\u554f\u5225\u4eba\uff0c\u4f60\u4e0d\u5982\u81ea\u5df1\u8a66\u8a66\u770b\uff0c\u628a\u5b83\u4e1f\u7d66 Compiler \u53bb\u7de8\u8b6f\uff0c\u8b93 Compiler \u5e6b\u4f60\u6aa2\u67e5\u5c31\u597d\u3002</p> <p>\u52a9\u6559\u5e0c\u671b\u540c\u5b78\u53ef\u4ee5</p> <ol> <li>\u63d0\u554f\u524d\u5148\u597d\u597d\u601d\u8003\uff0c\u81ea\u5df1\u662f\u5426\u53ef\u4ee5\u505a\u4e00\u4e9b\u5617\u8a66\uff08Attempt\uff09\u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c</li> <li>\u5b78\u7fd2\u6b63\u78ba\u63d0\u554f\u7684\u65b9\u5f0f\uff0c\u95b1\u8b80 How To Ask Questions The Smart Way \u6216 Stop Ask Questions The Stupid Way</li> </ol> <p>\u5982\u679c\u4f60\u9084\u662f\u4e0d\u77e5\u9053\u600e\u9ebc\u63d0\u554f\uff0c\u8acb\u53c3\u8003\u4ee5\u4e0b\u6a21\u677f</p> <p>\u6211\u7684\u7de8\u8b6f\u5668\u5728\u8f38\u5165\u70ba XXX \u7684\u6642\u5019\u51fa\u73fe\u4e86 YYY \u554f\u984c\uff08\u9644\u5b8c\u6574\u7684\u932f\u8aa4\u4fe1\u606f\u6216\u622a\u5716\uff09\u3002 \u6211\u5617\u8a66 AAA\uff0c\u767c\u73fe BBB\uff0c\u6211\u8a8d\u70ba\u9019\u4ee3\u8868 CCC\u3002 \u6211\u9084\u5617\u8a66 DDD\uff0c\u767c\u73fe EEE\uff0c\u6211\u8a8d\u70ba\u9019\u4ee3\u8868 FFF\u3002 \u7d9c\u4e0a\u6240\u8ff0\uff0c\u6211\u89ba\u5f97\u554f\u984c\u53ef\u80fd\u51fa\u5728 GGG\uff0c\u4f46\u4e4b\u5f8c\u6211\u5c31\u6c92\u6709\u601d\u8def\u4e86\uff0c\u8acb\u554f\u6211\u7684\u5206\u6790\u662f\u5426\u6b63\u78ba\uff1f\u554f\u984c\u7684\u5177\u9ad4\u539f\u56e0\u662f\u4ec0\u9ebc\u5462\uff1f</p>"},{"location":"labs/lab0/#_3","title":"\u52a9\u6559\u4e0d\u6703\u56de\u7b54 &amp; \u5354\u52a9\u7684\u554f\u984c","text":"<ol> <li>\u548c\u8ab2\u7a0b\u7121\u95dc\u7684\u554f\u984c</li> <li>\u4efb\u4f55\u4e0d\u7d93\u904e\u601d\u8003\u5c31\u63d0\u51fa\u7684\u554f\u984c</li> <li>\u53ef\u4ee5\u901a\u904e\u4f60\u81ea\u5df1 debug \u89e3\u6c7a\u7684\u554f\u984c</li> <li>\u80fd\u5728 Document \u88e1\u9762\u627e\u5230\u7684\u554f\u984c</li> </ol>"},{"location":"labs/lab1/","title":"Lab 1 - C Programmin and Compilation Flow","text":"<p>Info</p> <ul> <li>Contributors : TA \u5cfb\u8c6a\u3001TA \u660e\u5821</li> <li>Deadline : 2024/10/10 23:59:59</li> <li>Last updated : 2024/09/26</li> </ul> updates information <ul> <li>Update 2024/08/13\uff1a\u65b0\u589e\u6b64 block\uff0c\u4f5c\u70ba\u66f4\u65b0\u4f9d\u64da</li> <li>Update 2024/08/05\uff1a\u65b0\u589e Lab 1 page</li> <li>Update 2024/09/22\uff1a\u64b0\u5beb\u90e8\u5206\u5167\u5bb9</li> <li>Update 2024/09/26\uff1a\u5b8c\u6210\u5167\u5bb9\u64b0\u5beb</li> </ul>"},{"location":"labs/lab1/#what-happens-when-you-compiling-a-c-program","title":"What happens when you compiling a C program?","text":"<p>\u6216\u8a31\u5927\u5bb6\u5728\u5927\u4e00\u4fee\u8a08\u7b97\u6a5f\u6982\u8ad6\u7684\u6642\u5019\uff0c\u6709\u807d\u904e\u4e0a\u8ab2\u7684\u8001\u5e2b\u8b1b\u904e C \u8a9e\u8a00\u7684\u7de8\u8b6f\u6d41\u7a0b\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\uff0c\u8001\u5e2b\u8981\u6c42\u5927\u5bb6\u5b89\u88dd Visual Studio\uff08\u4e0d\u662f VS Code\uff0c\u5169\u500b\u6771\u897f\u4e0d\u4e00\u6a23\uff09\uff0c\u7136\u5f8c\u4f60\u5728 Visual Studio \u4e0a\u9762\u53ea\u8981\u6309\u4e00\u500b\u6309\u9215\u5c31\u53ef\u4ee5\u7de8\u8b6f\u7136\u5f8c\u57f7\u884c\u4f60\u7684\u7a0b\u5f0f\u3002\u4f46\u662f\uff0c\u5728\u8a08\u7b97\u6a5f\u7d44\u7e54\u9019\u5011\u8ab2\u7576\u4e2d\uff0c\u6211\u5011\u4e0d\u80fd\u518d\u50cf\u4ee5\u5f80\u4e00\u6a23\u5ffd\u7565 C \u8a9e\u8a00\u7684\u7de8\u8b6f\u6d41\u7a0b\u548c\u539f\u7406\uff0c\u6211\u5011\u5fc5\u9808\u8981\u6574\u500b\u7de8\u8b6f\u7684\u539f\u7406\u6709\u57fa\u672c\u7684\u638c\u63e1\uff0c\u5927\u5bb6\u5728\u5f8c\u9762\u7684\u8ab2\u7a0b\u624d\u80fd\u878d\u6703\u8cab\u901a\u3002</p> <p>CS:APP3e Page 41</p> <p>\u4e0a\u9762\u9019\u5f35\u5716\u63cf\u7e6a\u4e86\u7d93\u5178\u7684\u4e00\u500b C Program \u5982\u4f55\u5f9e Source Code \u8b8a\u6210\u6700\u5f8c\u7684\u53ef\u57f7\u884c\u6a94\uff08Executable File\uff09\uff0c\u5176\u4e2d\u7e3d\u5171\u6703\u7d93\u904e\u56db\u500b\u968e\u6bb5\uff0c\u5206\u5225\u662f Pre-Processing\u3001Compiling\u3001Assembling \u548c Linking\uff0c\u6211\u5011\u91dd\u5c0d\u9019\u56db\u500b\u90e8\u5206\u5206\u5225\u505a\u7c21\u55ae\u7684\u4ecb\u7d39\u3002</p>"},{"location":"labs/lab1/#pre-processing","title":"Pre-Processing","text":"<p>\u6211\u60f3\u5927\u90e8\u5206\u7684\u4eba\u4e00\u5b9a\u90fd\u6709\u6253\u904e\u4e0b\u9762\u9019\u6bb5\u7a0b\u5f0f\u78bc\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n</code></pre> <p>\u4f60\u6700\u76f4\u89ba\u7684\u60f3\u6cd5\u53ef\u80fd\u6703\u89ba\u5f97\u8aaa\uff0c\u70ba\u4e86\u8981\u4f7f\u7528\u8f38\u51fa\u8f38\u5165\u76f8\u95dc\u7684 function\uff0c\u70ba\u4e86\u8981\u4f7f\u7528\u4e00\u4e9b standard library \u63d0\u4f9b\u7684 fucntion\uff0c\u6211\u8981 include \u9019\u4e9b header files\uff0c\u4f46\u4f60\u6709\u6c92\u6709\u60f3\u904e\u9019\u80cc\u5f8c\u5230\u5e95\u600e\u9ebc\u904b\u4f5c\u7684\uff1f</p> <p>\u7576 Pre-processor\uff08\u524d\u7f6e\u8655\u7406\u5668\uff09\u770b\u5230\u4ee5 <code>#...</code> \u70ba\u958b\u982d\u7684\u7a0b\u5f0f\u78bc\u7247\u6bb5\u6642\uff0c\u5c31\u6703\u77e5\u9053\u8981\u5c0d\u5176\u505a\u76f8\u5c0d\u61c9\u7684\u524d\u7f6e\u8655\u7406\u3002\u57fa\u672c\u4e0a\u524d\u7f6e\u8655\u7406\u53ef\u4ee5\u7406\u89e3\u6210\u55ae\u7d14\u7684\u6587\u672c\u8655\u7406\u548c\u66ff\u63db\uff0c\u4e26\u4e0d\u6703\u6d89\u53ca\u5230\u4efb\u4f55\u548c Compling \u76f8\u95dc\u7684\u884c\u70ba\u3002 \u4f46\u5373\u4f7f\u53ea\u662f\u55ae\u7d14\u7684\u6587\u672c\u8655\u7406\uff0c\u5584\u7528 Preprocessing \u4f9d\u7136\u53ef\u4ee5\u8b93 C \u8a9e\u8a00\u6709\u975e\u5e38\u5f37\u5927\u7684\u64f4\u5145\u80fd\u529b\u3002</p> <p>\u6211\u5011\u5206\u6790\u4e00\u500b\u5177\u9ad4\u7684\u4f8b\u5b50\uff0c\u5927\u5bb6\u5728\u5927\u4e00\u7684\u6642\u5019\u53ef\u80fd\u6709\u807d\u904e\u8a08\u6982\u8ab2\u7684\u8001\u5e2b\u8aaa\uff0cC \u8a9e\u8a00\u5728\u5ba3\u544a\u9663\u5217\u7684\u6642\u5019\uff0c\u4e0d\u53ef\u4ee5\u50b3\u5165\u8b8a\u6578\u4f5c\u70ba\u521d\u59cb\u9663\u5217\u5927\u5c0f\uff0c\u4f8b\u5982\uff1a</p> <pre><code>int a = 5;\nint arr[a] = {};\n</code></pre> <p>\u9019\u7a2e\u5ba3\u544a\u7a0b\u5f0f\u7a31\u70ba Variable-length Array (VLA)\uff0c\u9019\u5728 C90 \u6a19\u6e96\u662f\u4e0d\u88ab\u5141\u8a31\u7684\uff0c\u4e00\u76f4\u5230 C99 \u624d\u6b63\u5f0f\u7d0d\u5165 C \u8a9e\u8a00\u6a19\u6e96\u898f\u7bc4\u4e2d\u3002 \u4f46\u662f\uff0c\u5927\u5bb6\u5982\u679c\u7528\u5e38\u898b\u7684\u7de8\u8b6f\u5668\u5982 GCC \u53bb\u7de8\u8b6f\u9019\u6a23\u7684\u7a0b\u5f0f\u7684\u8a71\uff0c\u5373\u4f7f\u4f60\u6307\u5b9a\u4f7f\u7528 <code>-std=c90</code>\uff0c\u53ef\u80fd\u9084\u662f\u6703\u767c\u73fe GCC \u4e0d\u6703\u51fa\u73fe Compilation Error\uff0c\u9019\u662f\u56e0\u70ba GCC \u672c\u8eab\u6709 GNU Extension\uff0c\u4e5f\u5c31\u662f\u7de8\u8b6f\u5668\u672c\u8eab\u5c0d\u65bc\u8a9e\u8a00\u7684\u64f4\u5145\uff0c\u4f7f\u5176\u652f\u63f4 VLA \u9019\u6a23\u7684\u5ba3\u544a\u3002 \u6240\u4ee5\uff0c\u6211\u5011\u53ef\u4ee5\u5617\u8a66\u4f7f\u7528 <code>gcc -Werror -std=c90 -pedantic ...</code> \u9019\u6a23\u7684\u6307\u4ee4\u53bb\u7de8\u8b6f\uff0c\u4f7f\u5176\u5f37\u5236\u9075\u5b88 C90 \u7684\u898f\u7bc4\uff0c\u5c31\u6703\u770b\u5230\u932f\u8aa4\u8a0a\u606f\u5982\u4e0b\uff1a</p> <p></p> <p>\u4f46\u7576\u6211\u5011\u4fee\u6539\u7a0b\u5f0f\u78bc\uff0c\u8b8a\u6210\u4ee5\u4e0b\u7684\u5f62\u5f0f</p> <pre><code>#define a 5\nint arr[a] = {};\n</code></pre> <p>\u6211\u5011\u6703\u767c\u73fe\u7de8\u8b6f\u932f\u8aa4\u6d88\u5931\u4e86\uff0c\u9019\u6bb5\u7a0b\u5f0f\u78bc\u5373\u4f7f\u5728 C90 \u7684\u6a19\u6e96\u4e0b\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u7de8\u8b6f\uff0c\u70ba\u4ec0\u9ebc\uff1f \u9019\u6b63\u662f\u56e0\u70ba Pre-processor \u7684\u884c\u70ba\u6240\u81f4\u3002\u7576\u6211\u5011\u4f7f\u7528 <code>#define a 5</code> \u800c\u975e <code>int a = 5</code> \u7684\u6642\u5019\uff0c\u5dee\u5225\u5728\u65bc\uff0c\u7576\u6211\u5011\u4f7f\u7528 <code>#define</code> \u6642\uff0c\u5728\u7de8\u8b6f\u6d41\u7a0b\u4e2d\u7684 Pre-processing \u968e\u6bb5\uff0cPre-processor \u5c31\u6703\u5c07\u7a0b\u5f0f\u78bc\u7247\u6bb5\u4e2d\u6240\u6709\u7684 <code>a</code> \u7b49\u50f9\u66ff\u63db\u70ba <code>5</code>\uff0c\u56e0\u6b64\uff0c\u6700\u5f8c\u5be6\u969b\u9032\u5165 Compiler \u7684\u7a0b\u5f0f\u78bc\u7247\u6bb5\u5176\u5be6\u6703\u8b8a\u6210 <code>int arr[5] = {};</code>\uff0c \u56e0\u70ba\u7576\u4e2d\u7684 <code>a</code> \u5df2\u7d93\u88ab\u66ff\u63db\u6210 <code>5</code> \u4e86\uff0c\u4e5f\u5c31\u4e0d\u6703\u8b8a\u6210 Variable-length Array \u5f9e\u800c\u89f8\u767c\u7de8\u8b6f\u932f\u8aa4\u3002\u6240\u4ee5\u5176\u5be6\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0cPre-processor \u6240\u505a\u7684\u5de5\u4f5c\u5c31\u662f\u6587\u672c\u66ff\u63db\u3002</p> <p>\u56de\u5230\u6700\u4e00\u958b\u59cb\u6211\u5011\u63d0\u5230\u7684 <code>#include &lt;stdio.h&gt;</code>\uff0c\u70ba\u4ec0\u9ebc\u53ea\u8981\u5beb\u4e0b\u9019\u6bb5 code \u6211\u5011\u5c31\u53ef\u4ee5\u4f7f\u7528\u50cf\u662f <code>printf()</code> \u9019\u985e I/O \u76f8\u95dc\u7684\u51fd\u5f0f\uff1f \u5728 Pre-processing \u968e\u6bb5\uff0c<code>#include &lt;stdio.h&gt;</code> \u6703\u4f7f Pre-processor \u5c07 <code>stdio.h</code> \u7684\u5167\u5bb9\u6574\u500b\u8907\u88fd\u8cbc\u4e0a\u5230\u672c\u4f86\u7684 source code \u7576\u4e2d\uff0c\u800c <code>stdio.h</code> \u88e1\u9762\u5305\u542b\u4e86\u8a31\u591a I/O \u76f8\u95dc\u7684\u51fd\u6578\u7684\u5ba3\u544a\uff08function declaration\uff09\u3002 \u56e0\u6b64\uff0c\u7de8\u8b6f\u5668\u5c31\u4e0d\u6703\u5831\u932f\u8aaa function is undefined\uff0c\u56e0\u70ba Pre-processor \u5df2\u7d93\u5c07 <code>stdio.h</code> \u7684\u5167\u5bb9\u63d2\u5165\u6e90\u4ee3\u78bc\u4e2d\u4e86\uff0c\u7de8\u8b6f\u5668\u81ea\u7136\u800c\u7136\u6703\u770b\u5230\u8a31\u591a I/O functions \u8af8\u5982 <code>printf()</code> \u51fd\u5f0f\u7684\u5ba3\u544a\u3002</p> <p>\u4f46\u662f\uff0c\u5728 <code>stdio.h</code> \u4e2d\u50c5\u50c5\u5305\u542b <code>printf()</code> \u9019\u985e\u51fd\u5f0f\u7684\u5ba3\u544a\uff08Declaration\uff09\u800c\u5df2\uff0c\u4e26\u6c92\u6709\u5b83\u7684\u5b9a\u7fa9\uff08Definition\uff09\u3002\u6240\u4ee5\u771f\u6b63\u8b93\u4f60\u53ef\u4ee5\u547c\u53eb <code>printf()</code> \u9019\u500b\u51fd\u5f0f\u7684\u95dc\u9375\uff0c\u9664\u4e86\u6709 Pre-proceessor \u7684\u529f\u52de\u4ee5\u5916\uff0c\u4e5f\u8981\u611f\u8b1d Linker\u3002 \u56e0\u70ba Linker \u6703\u5728 Linking \u968e\u6bb5\u6642\uff0c\u4e00\u4f75\u5c07 <code>printf()</code> \u7684 Definition\uff08\u6216\u662f\u4f60\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210 <code>printf()</code> \u7684\u5be6\u4f5c\uff09\u6253\u5305\u9032\u53ef\u57f7\u884c\u6a94\u4e2d\uff0c\u4e26\u4e14\u89e3\u6790\u6b63\u78ba\u7684 Memory Address\uff0c\u6700\u7d42\u624d\u53ef\u4ee5\u9806\u5229\u547c\u53eb <code>printf()</code>\u3002 </p> <p>Info</p> <ul> <li> <p>\u95dc\u65bc <code>-pedantic</code> \u7684\u63cf\u8ff0</p> <p></p> </li> <li> <p>\u95dc\u65bc GNU Extension \u672c\u8eab\u5c0d\u65bc VLA \u7684\u652f\u63f4</p> <p></p> </li> </ul>"},{"location":"labs/lab1/#compiling","title":"Compiling","text":"<p>Compile \u7684\u9019\u500b\u904e\u7a0b\uff0c\u5c31\u662f\u628a C Code \u8f49\u63db\u6210 Assembly \u7684\u904e\u7a0b\uff0c\u6240\u4ee5\u662f\u5f9e\u9ad8\u968e\u8a9e\u8a00\u8f49\u63db\u5230\u4f4e\u968e\u8a9e\u8a00\uff0c\u9019\u500b\u904e\u7a0b\u57fa\u672c\u4e0a\u662f\u6574\u500b\u7de8\u8b6f\u6d41\u7a0b\u4e2d\u6700\u8907\u96dc\u7684\u4e00\u4ef6\u4e8b\u60c5\uff0c\u539f\u56e0\u6709\u5f88\u591a\uff0c\u52a0\u4e0a\u76ee\u524d\u540c\u5b78\u9084\u6c92\u5b78\u5b8c Instruction-Set Architecture\uff08ISA\uff09\u7684\u5b8c\u6574\u6982\u5ff5\uff0c\u6240\u4ee5\u6211\u5011\u5728\u76ee\u524d\u7684\u968e\u6bb5\u6bd4\u8f03\u96e3\u5b8c\u6574\u5411\u5927\u5bb6\u8aaa\u660e Compiler \u7684\u6982\u5ff5\u3002 \u4f46\u662f\uff0c\u56e0\u70ba C \u8a9e\u8a00\u540c\u6642\u517c\u5177\u9ad8\u968e\u8a9e\u8a00\u548c\u4f4e\u968e\u8a9e\u8a00\u7684\u7279\u6027\uff0c\u4e5f\u5c31\u662f\u8aaa\uff0cC \u8a9e\u8a00\u6709\u76f8\u5c0d\u62bd\u8c61\u7684\u8a9e\u6cd5\uff0c\u4f8b\u5982 For-loop Statement\u3001if-else Statement\u3001Structure\u3001Function ... \u7b49\u7b49\u7684\u8a9e\u6cd5\u53ef\u4ee5\u4f7f\u7528\uff0c\u537b\u4e5f\u540c\u6642\u6709\u4f4e\u968e\u8a9e\u8a00\u7684\u7279\u6027\uff0c\u4f8b\u5982 C \u8a9e\u8a00\u53ef\u4ee5\u900f\u904e\u6307\u6a19\u76f4\u63a5\u5c0d\u8a18\u61b6\u9ad4\u9032\u884c\u5b58\u53d6\u3002 \u5229\u7528\u9019\u500b\u7279\u6027\uff0c\u6211\u5011\u53ef\u4ee5\u907f\u958b\u5c0d ISA \u5167\u5bb9\u7684\u4e86\u89e3\uff0c\u537b\u4e5f\u53ef\u4ee5\u89e3\u91cb Compiler \u7684\u8077\u8cac\u5230\u5e95\u662f\u4ec0\u9ebc\u3002</p> High-Level CLow-Level C <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int array[5] = {10, 20, 30, 40, 50};\n\n    // Using a for-loop to access and print array elements\n    for (int i = 0; i &lt; 5; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n    int *ptr = alloca(sizeof(int) * 5); // allocate a memory space for integer array\n    *(ptr) = 10;\n    *(ptr + 1) = 20;\n    *(ptr + 2) = 30;\n    *(ptr + 3) = 40;\n    *(ptr + 4) = 50;\n    int i = 0; // loop index\n\nstart_loop:\n    if (i &gt;= 5) goto end_loop; // Check loop condition\n    i++; // increase loop index  \n    printf(\"%d\\n\", *(ptr + i)); // Access the array element using pointer arithmetic\n    goto start_loop; // Repeat the loop\n\nend_loop:\n    return 0;\n}\n</code></pre> <p>\u5728 High-Level C \u4e2d\uff0c\u6211\u5011\u4e3b\u8981\u4f7f\u7528\u5230 Array \u548c For-Loop \u9019\u5169\u500b\u8a9e\u6cd5\uff0c\u9019\u662f\u76f8\u5c0d\u9ad8\u968e\uff08\u4e5f\u5c31\u662f\u76f8\u5c0d\u62bd\u8c61\uff09\u7684\u8a9e\u6cd5\u3002 \u4f46\u662f\uff0c\u540c\u6a23\u662f\u4f7f\u7528 C \u8a9e\u8a00\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u63db\u500b\u65b9\u5f0f\u64b0\u5beb\uff0c\u4f46\u540c\u6642\u9054\u5230\u4e00\u6a23\u7684\u6548\u679c\u3002</p> <p>\u5728 Low-Level C \u4e2d\u5927\u5bb6\u53ef\u4ee5\u770b\u5230\uff0c\u7d93\u904e\u6539\u5beb\u5f8c\uff0cArray \u548c For-Loop \u9019\u5169\u500b\u8a9e\u6cd5\u90fd\u4e0d\u898b\u4e86\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4f7f\u7528 GOTO \u4f86\u9054\u6210\u548c For-Loop Statement \u4e00\u6a23\u7684\u529f\u80fd\uff0c\u548c\u4f7f\u7528\u6307\u6a19\u5c0d\u8a18\u61b6\u9ad4\u9032\u884c\u64cd\u4f5c\u3002 \u9019\u662f\u76f8\u5c0d\u5f88\u4f4e\u968e\u7684 C \u8a9e\u8a00\u5beb\u6cd5\u3002\uff08\u9019\u88e1\u7684 \u4f4e\u968e \u4e26\u4e0d\u662f\u6307\u9019\u6a23\u5beb\u5f88\u721b\uff0c\u800c\u662f\u6307\u8a9e\u6cd5\u76f8\u5c0d\u4f4e\u968e\uff0c\u66f4\u52a0\u63a5\u8fd1\u6a5f\u5668\u6240\u80fd\u7406\u89e3\u7684\u5f62\u5f0f\uff0c\u800c\u975e\u4eba\u76f4\u89ba\u7406\u89e3\u7684\u5f62\u5f0f\uff09</p> <p>\u5176\u5be6 Compiler \u6240\u505a\u7684\u4e8b\u60c5\u5c31\u985e\u4f3c\u65bc\u4e0a\u9762\u6211\u5011\u505a\u7684\u4e8b\u60c5\uff0c\u6539\u5beb\u9019\u6bb5 Code\uff0c\u628a\u5b83\u5f9e\u76f8\u5c0d\u62bd\u8c61\u7684\u8868\u793a\u65b9\u5f0f\u8f49\u63db\u6210\u66f4\u63a5\u8fd1\u6a5f\u5668\u6240\u80fd\u7406\u89e3\u7684\u6307\u4ee4\u3002</p> <p>Info</p> <p> Framework of LLVM <p>\u4e0a\u9762\u6211\u5011\u5c07\u9ad8\u968e\u7684 C \u8a9e\u8a00\u5beb\u6cd5\u8f49\u63db\u6210\u4f4e\u968e\u7684 C \u8a9e\u8a00\u5beb\u6cd5\uff0c\u5176\u5be6\u5c31\u5f88\u50cf\u662f\u5728\u628a\u539f\u8a9e\u8a00\u8f49\u63db\u6210 IR \u7684\u9019\u500b\u904e\u7a0b\uff0cCompiler \u901a\u5e38\u6703\u57fa\u65bc IR \u505a\u4e00\u7cfb\u5217\u7684\u6700\u4f73\u5316\uff0c\u8b93\u7a0b\u5f0f\u78bc\u7684 Performance \u66f4\u597d\uff0c\u5982\u5716\u7247\u4e2d\u7684 LLVM Optimizer\uff0c\u7136\u5f8c\u518d\u5c07\u7d93\u904e\u512a\u5316\u7684 IR \u7d93\u904e\u7de8\u8b6f\u5668\u5f8c\u7aef\uff08Backend\uff09\u8f49\u63db\u6210\u76ee\u6a19\u8a9e\u8a00\uff0c\u5982 x86\u3001ARM \u6216 RISC-V \u7684\u6307\u4ee4\u3002\u81f3\u65bc\u9019\u6a23\u505a\u7684\u512a\u9ede\u662f\u4ec0\u9ebc\uff0c\u5c31\u7559\u7d66\u5927\u5bb6\u81ea\u884c STFW\u3002</p> <p>Question</p> <ul> <li>\u70ba\u4ec0\u9ebc\u662f\u4f7f\u7528 <code>alloca()</code> \u800c\u4e0d\u662f\u66f4\u5e38\u898b\u7684 <code>malloc()</code> \u4f86\u52d5\u614b\u914d\u7f6e\u8a18\u61b6\u9ad4\u5462\uff1f\u4f60\u77e5\u9053\u9019\u5169\u8005\u7684\u5dee\u7570\u55ce\uff1f<ul> <li>Hint: \u53ef\u4ee5\u5229\u7528 man \u6307\u4ee4\u53bb\u67e5\uff0c<code>man alloca</code> and <code>man malloc</code></li> </ul> </li> <li>\u55ae\u7d14\u4f7f\u7528 GOTO \u53ef\u4ee5\u9054\u6210\u548c While-Loop \u6216 For-Loop \u4e0a\u7684\u908f\u8f2f\u7b49\u50f9\uff08Logically Equivalent\uff09\u55ce\uff1f</li> </ul>"},{"location":"labs/lab1/#assembling","title":"Assembling","text":"<p>Assembling\uff08\u7d44\u8b6f\uff09\u7684\u904e\u7a0b\u76f8\u8f03\u65bc Compiling \u7c21\u55ae\u5f88\u591a\uff0c\u56e0\u70ba\u7d93\u904e Compiling \u4e4b\u5f8c\uff0c\u6211\u5011\u5df2\u7d93\u5f97\u5230 Assembly-Level \u7684\u7a0b\u5f0f\u78bc\uff0c\u800c\u6839\u64da\u4e0d\u540c\u7684 Instruction-Set Architecture\uff08ISA\uff09\uff0c\u6bcf\u689d\u7d44\u5408\u8a9e\u8a00\u6307\u4ee4\u90fd\u53ef\u4ee5\u552f\u4e00\u5c0d\u61c9\u5230\u4e00\u500b\u6a5f\u68b0\u78bc\uff08Machine Code\uff09\uff0c\u800c\u5728 Assembling \u968e\u6bb5\uff0cAssembler \u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5c07\u6bcf\u500b Assembly Instruction \u8f49\u63db\u6210\u5c0d\u61c9\u7684 Machine Code\u3002</p>"},{"location":"labs/lab1/#linking","title":"Linking","text":"<p>\u5927\u5bb6\u6709\u6c92\u6709\u60f3\u904e\uff0c\u70ba\u4ec0\u9ebc\u4f60\u53ef\u4ee5\u628a A Function \u5b9a\u7fa9 <code>a.c</code> \u4e2d\uff0c\u537b\u9084\u662f\u53ef\u4ee5\u5728 <code>b.c</code> \u4e2d\u53bb\u547c\u53eb A Function \u5462\uff1f\u53ef\u4ee5\u9054\u6210\u9019\u6a23\u5b50\u7684\u529f\u80fd\uff0c\u6b63\u62dc Linker \u6240\u8cdc\u3002\u56e0\u70ba Linking \u7684\u7d30\u7bc0\uff0c\u7b49\u5230\u5927\u5bb6\u5b78\u5b8c RISC-V ISA \u4e4b\u5f8c\uff0c\u518d\u4f86\u4ecb\u7d39\u6703\u6bd4\u8f03\u597d\u7406\u89e3\uff0c\u6211\u5011\u9019\u88e1\u5148\u7c21\u55ae\u8b1b\u89e3\uff0c\u5c31\u4e0d\u6df1\u5165 Linking \u7684\u7d30\u7bc0\u3002</p> <p>\u7576\u6211\u5011\u4f7f\u7528 <code>gcc -c ...</code> \u53bb\u7de8\u8b6f\u4e00\u500b C Source File \u7684\u6642\u5019\uff0c\u7576\u4e2d\u7684 <code>-c</code> \u9078\u9805\u4ee3\u8868\u544a\u8a34 GCC \u4e0d\u8981\u9032\u5165 Linking \u7684\u968e\u6bb5\uff0c\u4e5f\u5c31\u662f\u8aaa\uff0c\u6211\u5011\u7684\u7de8\u8b6f\u904e\u7a0b\u53ea\u6703\u7d93\u904e Pre-processing\u3001Compiling \u548c Assembling\uff0c\u8f49\u63db\u6210 Machine Code\uff0c\u4f46\u662f\u662f\u5c1a\u672a\u7d93\u904e Linking \u7684 Object Code\uff0c\u9019\u6642\u5019\uff0c\u7576\u6211\u5011\u7684 Source File \u4e2d\u6709 Undefined Symbol \u7684\u6642\u5019\uff0c\u5b83\u6703\u5148\u628a\u9019\u500b Symbol \u7684\u4f4d\u7f6e\u6253\u4e00\u500b\u554f\u865f\uff0c\u800c\u9019\u500b\u554f\u865f\u5c31\u6703\u4ea4\u7531 Linker \u4f86\u89e3\u6c7a\uff0c\u5728 Linking \u968e\u6bb5\u7684\u6642\u5019\u628a\u554f\u865f\u7684\u90e8\u5206\u586b\u5165\u6b63\u78ba\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e\u3002</p> <p>Info</p>"},{"location":"labs/lab1/#what-is-gcc","title":"What is GCC?","text":"<p>GCC \u7684\u5168\u540d\u5176\u5be6\u662f The GNU Compiler Collection\uff0cGCC \u5176\u5be6\u4e26\u4e0d\u662f\u6307\u55ae\u7d14\u7684 Compiler\uff0cGCC \u5176\u5be6\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u5de5\u5177\uff0c\u6709 Pre-processor\u3001Compiler\u3001Assembler \u548c Linker ... \u7b49\u7b49\u3002\u6211\u5011\u53ef\u4ee5\u8f38\u5165 <code>man gcc</code> \u770b\u770b GCC \u7684 manual\u3002 </p> <p>GCC \u5176\u5be6\u662f\u6240\u8b02\u7684 Compiler Driver\uff0c\u4e5f\u5c31\u662f\u8aaa\uff0cGCC \u4e26\u4e0d\u662f\u6307\u55ae\u7d14\u7684 C Compiler\uff08\u4e00\u958b\u59cb\u662f\uff0c\u4f46\u5f8c\u4f86\u5c31\u4e0d\u662f\u4e86\uff09\uff0c\u7576\u4f60\u8f38\u5165 GCC \u6307\u4ee4\u8a66\u8457\u53bb\u7de8\u8b6f\u7a0b\u5f0f\u7684\u6642\u5019\uff0c\u5176\u5be6\u5b83\u80cc\u5f8c\u6703\u81ea\u52d5\u5730\u9a45\u52d5\u4e00\u6574\u500b Compilation Flow \u6703\u7528\u5230\u7684\u5de5\u5177\uff0c\u4e5f\u5c31\u5305\u542b\u4e86\u524d\u9762\u63d0\u5230\u7684 Pre-processing\u3001Compoling\u3001Assembling \u548c Linking\uff0c\u5176\u5be6\u9019\u56db\u500b Stage \u90fd\u7528\u5230\u4e0d\u540c\u7684\u5de5\u5177\uff0cPre-processing \u7528\u5230 <code>cpp</code>\uff0ccompiling \u7528\u5230 <code>cc</code>\uff0cAssembling \u7528\u5230 <code>as</code>\uff0c\u800c Linking \u7528\u5230 <code>ld</code>\uff0c\u9019\u56db\u500b\u500b\u5225\u5176\u5be6\u90fd\u53ef\u4ee5\u4f5c\u70ba\u7368\u7acb\u7684\u6307\u4ee4\u4f7f\u7528\u3002Driver \u7684\u610f\u601d\u5c31\u50cf\u662f\u99d5\u99db\u4e00\u6a23\uff0c\u5de6\u70ba\u7de8\u8b6f\u5668\u7684\u99d5\u99db\uff0c\u5b83\u6703\u81ea\u52d5\u9a45\u4f7f\u7de8\u8b6f\u904e\u7a0b\u4e2d\u9700\u8981\u7528\u5230\u7684\u6240\u6709\u5de5\u5177\uff0c\u4ee5\u5b8c\u6210\u6574\u500b\u7de8\u8b6f\u6d41\u7a0b\u3002</p> <p>GCC\uff08GNU Compiler Collection\uff09\u88ab\u7a31\u70ba\u300cCompiler Driver\u300d\u662f\u56e0\u70ba\u5b83\u4e0d\u50c5\u662f\u4e00\u500b\u55ae\u7368\u7684\u7de8\u8b6f\u5668\uff0c\u800c\u662f\u4e00\u500b\u6574\u5408\u4e86\u591a\u500b\u7de8\u8b6f\u5668\u548c\u5de5\u5177\u7684\u7cfb\u7d71\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4e3b\u8981\u539f\u56e0\uff1a</p> <ol> <li> <p>\u591a\u8a9e\u8a00\u652f\u6301\uff1aGCC \u652f\u6301\u591a\u7a2e\u7de8\u7a0b\u8a9e\u8a00\uff08\u5982 C\u3001C++\u3001Fortran\u3001Ada \u7b49\uff09\uff0c\u9019\u4f7f\u5b83\u4e0d\u50c5\u50c5\u662f\u4e00\u500b\u55ae\u4e00\u7684\u7de8\u8b6f\u5668\uff0c\u800c\u662f\u4e00\u500b\u53ef\u4ee5\u8abf\u7528\u4e0d\u540c\u7de8\u8b6f\u5668\u7684\u9a45\u52d5\u7a0b\u5f0f\u3002</p> </li> <li> <p>\u524d\u7aef\u548c\u5f8c\u7aef\uff1aGCC \u7684\u67b6\u69cb\u7531\u524d\u7aef\uff08\u8ca0\u8cac\u8a9e\u6cd5\u5206\u6790\u548c\u751f\u6210\u4e2d\u9593\u4ee3\u78bc\uff09\u548c\u5f8c\u7aef\uff08\u8ca0\u8cac\u751f\u6210\u76ee\u6a19\u6a5f\u5668\u78bc\uff09\u7d44\u6210\u3002\u5b83\u4f5c\u70ba\u9a45\u52d5\u7a0b\u5f0f\uff0c\u53ef\u4ee5\u6839\u64da\u8f38\u5165\u7684\u6e90\u78bc\u548c\u9078\u9805\uff0c\u9078\u64c7\u76f8\u61c9\u7684\u524d\u7aef\u548c\u5f8c\u7aef\u3002</p> </li> <li> <p>\u7d71\u4e00\u63a5\u53e3\uff1aGCC \u63d0\u4f9b\u4e86\u4e00\u500b\u7d71\u4e00\u7684\u547d\u4ee4\u884c\u63a5\u53e3\uff0c\u8b93\u4f7f\u7528\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u7ba1\u7406\u4e0d\u540c\u7684\u7de8\u8b6f\u6d41\u7a0b\uff0c\u4f8b\u5982\u7de8\u8b6f\u3001\u9023\u63a5\u548c\u9810\u8655\u7406\u7b49\u3002\u9019\u7a2e\u96c6\u4e2d\u7ba1\u7406\u7684\u7279\u6027\u4f7f\u5b83\u66f4\u50cf\u662f\u4e00\u500b\u300c\u9a45\u52d5\u7a0b\u5f0f\u300d\u3002</p> </li> <li> <p>\u5de5\u5177\u93c8\u6574\u5408\uff1aGCC \u9084\u53ef\u4ee5\u96c6\u6210\u5176\u4ed6\u5de5\u5177\uff0c\u5982\u93c8\u63a5\u5668\uff08linker\uff09\u3001\u9810\u8655\u7406\u5668\uff08pre-processor\uff09\u7b49\uff0c\u4f7f\u5f97\u6574\u500b\u7de8\u8b6f\u904e\u7a0b\u66f4\u52a0\u6d41\u66a2\u548c\u9ad8\u6548\u3002</p> </li> </ol> <p>\u56e0\u6b64\uff0c\u7a31 GCC \u70ba\u300cCompiler Driver\u300d\u662f\u56e0\u70ba\u5b83\u5728\u7de8\u8b6f\u904e\u7a0b\u4e2d\u626e\u6f14\u4e86\u6307\u63ee\u548c\u6574\u5408\u591a\u500b\u5de5\u5177\u7684\u89d2\u8272\uff0c\u800c\u4e0d\u50c5\u50c5\u662f\u55ae\u4e00\u7684\u7de8\u8b6f\u5668\u3002</p> <p>--- ChatGPT</p>"},{"location":"labs/lab1/#some-special-parts-in-c-programming","title":"Some Special Parts in C Programming","text":""},{"location":"labs/lab1/#pointer-and-multidimensional-dynamic-array","title":"Pointer and Multidimensional Dynamic Array","text":"<p>Note</p> <p>\u5728 C \u8a9e\u8a00\u4e2d\uff0cArray \u672c\u8cea\u4e0a\u5c31\u662f Pointer + Offset\uff01\u4f60\u53ef\u4ee5\u628a C \u8a9e\u8a00\u4e2d Array \u7684\u8a9e\u6cd5\uff0c\u5982 <code>int arr[10] = {};</code> \u9019\u6a23\u5b50\u7684 statement \u60f3\u50cf\u6210\u8a9e\u6cd5\u7cd6\uff08Syntax Sugar\uff09\u3002</p> <p>\u70ba\u4e86\u5e6b\u5927\u5bb6\u8907\u7fd2 Pointer \u7684\u6982\u5ff5\uff0c\u52a9\u6559\u8a8d\u70ba\u6700\u597d\u7684\u65b9\u5f0f\u662f\u4f86\u505a\u4e00\u500b Case Study\uff0c\u5728\u9019\u88e1\u6211\u5011\u53ef\u4ee5\u4f86\u63a2\u8a0e <code>int main(int argc, char** argv)</code>\uff0c\u6216\u662f <code>int main(int argc, char* argv[])</code> \u4ee3\u8868\u7684\u5230\u5e95\u662f\u4ec0\u9ebc\u610f\u601d\uff1f\u70ba\u4ec0\u9ebc\u9019\u6a23\u5beb\u5c31\u53ef\u4ee5\u8b93\u6211\u5011\u7684\u7a0b\u5f0f\u63a5\u6536\u5916\u90e8\u53c3\u6578\uff1f \u5728\u9019\u88e1\u6211\u5011\u5148\u5ffd\u7565\u6709\u95dc\u65bc\u4f5c\u696d\u7cfb\u7d71\u7684\u7d30\u7bc0\uff0c\u6307\u5c08\u6ce8\u5728 <code>char** argv</code> \u672c\u8eab\u7684\u89e3\u6790\u3002<code>int argc</code> \u4ee3\u8868\u7684\u662f count of arguments\uff0c\u4e5f\u5c31\u662f\u53c3\u6578\u7684\u6578\u91cf\uff0c\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f\uff0cprogram name \u9810\u8a2d\u5c31\u6703\u662f\u7b2c\u96f6\u500b\u50b3\u5165\u7684\u53c3\u6578\uff0c\u6240\u4ee5\u5982\u679c\u7576\u4f60\u57f7\u884c\u7a0b\u5f0f\u6642\uff0c\u8f38\u5165\u5982\u4e0b\uff1a</p> <pre><code>$ ./test arg1 set arre\n</code></pre> <p>\u5176\u5c0d\u61c9\u7684 <code>argc</code> \u5c31\u6703\u662f \\(4\\)\uff0c\u5c0d\u61c9\u5230\u57f7\u884c\u6a94\u672c\u8eab\u7684\u6a94\u6848\u540d\u7a31\uff0c\u52a0\u4e0a\u4e09\u500b\u4f7f\u7528\u8005\u8f38\u5165\u7684\u53c3\u6578 <code>arg1</code>\u3001<code>set</code> \u548c <code>arre</code>\u3002</p> <p>Visualization of char** argv</p> <p>\u81f3\u65bc <code>char** argv</code>\uff0c\u5176\u672c\u8cea\u4e0a\u5c31\u662f\u4e00\u500b Pointer to (Pointer to char)\u3002\u4e5f\u5c31\u662f\u8aaa <code>argv</code> \u9019\u500b\u908a\u6578\u672c\u8eab\u6703\u6307\u5411\u4e00\u500b Array of (Pointer to char)\uff0c\u800c\u9019\u500b Array \u672c\u8eab\u88e1\u9762\u7684\u6bcf\u500b element \u5c31\u662f\u4e00\u500b Pointer to char\uff0c\u800c\u5b83\u5011\u53c8\u5404\u81ea\u90fd\u53ef\u4ee5\u6307\u5411\u4e00\u500b string\uff0c\u4e5f\u5c31\u662f\u6211\u5011\u50b3\u5165\u7684\u53c3\u6578\u3002</p> <p>Question</p> <ul> <li>\u70ba\u4ec0\u9ebc <code>char** argv</code> \u548c <code>char* argv[]</code> \u9019\u5169\u500b\u5beb\u6cd5\u662f\u7b49\u50f9\uff08Equivalent\uff09\u7684\uff1f\u4f60\u6709\u8fa6\u6cd5\u7528\u4f60\u5c0d Pointer \u7684\u7406\u89e3\u4f86\u89e3\u91cb\u70ba\u4ec0\u9ebc\u55ce\uff1f</li> <li>\u70ba\u4ec0\u9ebc\u5728 C \u8a9e\u8a00\u4e2d\u5ba3\u544a string \u7684\u6642\u5019\u53ef\u4ee5\u7528 <code>char* str</code> \u4f86\u5ba3\u544a\u5462\uff1f</li> </ul>"},{"location":"labs/lab1/#function-pointer","title":"Function Pointer","text":"<p>Funtion Pointer \u7684\u6982\u5ff5\u57fa\u672c\u4e0a\u8ddf\u4e00\u822c\u7684 Pointer \u4e00\u6a21\u4e00\u6a23\uff0c\u95dc\u9375\u5728\u65bc\uff1a\u300eEverything about the program is stored in memory\u300f\u3002\u5927\u5bb6\u61c9\u8a72\u53ef\u4ee5\u7406\u89e3\u8b8a\u6578\u9700\u8981\u88ab\u5132\u5b58\u5728\u8a18\u61b6\u9ad4\u4e2d\uff0c\u9019\u662f\u5f88\u76f4\u89ba\u7684\u4e8b\u60c5\uff0c\u90a3\u51fd\u5f0f\u5462\uff1f\u51fd\u5f0f\u88ab\u653e\u5728\u54ea\u88e1\uff1f\u51fd\u5f0f\u5176\u5be6\u5c31\u5c0d\u61c9\u5230\u4e00\u689d\u4e00\u689d\u7684\u6307\u4ee4\uff0c\u800c\u6307\u4ee4\u4e5f\u7406\u6240\u7576\u7136\u61c9\u8a72\u88ab\u5b58\u653e\u5728\u8a18\u61b6\u9ad4\u7576\u4e2d\uff0c\u6240\u4ee5\u6709\u51fd\u5f0f\u7684\u6307\u6a19\uff08Pointer to a function\uff09\u9019\u4ef6\u4e8b\u60c5\u5c31\u8b8a\u5f97\u7406\u6240\u7576\u7136\uff01\u56e0\u70ba\u6307\u6a19\u5176\u5be6\u5c31\u662f\u6211\u5011\u53ef\u4ee5\u62ff\u4f86\u76f4\u63a5\u64cd\u4f5c\u8a18\u61b6\u9ad4\u7684\u4e00\u9805\u5229\u5668\uff0c\u65e2\u7136\u51fd\u5f0f\u4e5f\u88ab\u5b58\u653e\u5728\u8a18\u61b6\u9ad4\u4e2d\uff0c\u90a3\u6709\u4e00\u500b\u6307\u6a19\u6307\u5411\u7279\u5b9a\u7684\u51fd\u5f0f\u4e5f\u5c31\u76f8\u7576\u5408\u7406\u3002</p> <p>\u90a3\u9ebc\uff0cFuntion Pointer \u61c9\u8a72\u6307\u5411 Function \u7684\u54ea\u88e1\uff1f\u7b54\u6848\u5f88\u9593\u55ae\uff0cFUnction Pointer \u61c9\u8a72\u6307\u5411\u7279\u5b9a\u51fd\u5f0f\u7684\u9032\u5165\u9ede\uff08Entry Point\uff09\uff0c\u4e5f\u5c31\u662f\u6211\u5011\u547c\u53eb\u51fd\u5f0f\u4e4b\u5f8c\uff0c\u8df3\u8f49\u5230\u51fd\u5f0f\u7684\u6642\u5019\uff0c\u57f7\u884c\u7684\u7b2c\u4e00\u689d\u6307\u4ee4\u7684\u4f4d\u7f6e\u3002</p> <pre><code>int add(int a, int b) {\n    return a + b;\n}\n\n#include &lt;stdio.h&gt;\nint main(void){\n    int (*func_ptr)(int, int); // declare a function pointer\n    func_ptr = &amp;add; // use address-of operator to get the address of function add()\n    // func_ptr = add; is also a legal statement (address-of operator is not necessary)\n    printf(\"Add %d and %d and we can get %d\\n\", 10, 20, func_ptr(10, 20));\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u7a0b\u5f0f\u78bc\u793a\u7bc4\u4e86\u5982\u4f55\u5ba3\u544a\u4e26\u4e14\u4f7f\u7528\u4e00\u500b Function Pointer\u3002\u5ba3\u544a Function Pointer \u7684\u6642\u5019\uff0c\u8981\u4e00\u4f75\u628a\u51fd\u6578\u7684\u56de\u50b3\u503c\u578b\u614b\u548c\u53c3\u6578\u578b\u614b\u5beb\u5b8c\u6574\uff0c\u6240\u4ee5\u4ee5 <code>func_ptr</code> \u4f86\u8aaa\uff0c\u4ed6\u53ef\u4ee5\u6307\u5411\u56de\u50b3\u578b\u614b\u662f <code>int</code> \u4e26\u4e14\u5e36\u6709\u5169\u500b <code>int</code> \u4f5c\u70ba\u53c3\u6578\u50b3\u5165\u7684\u51fd\u5f0f\u3002\uff08\u53ef\u80fd\u6709\u9ede\u9952\u53e3\uff0c\u5927\u5bb6\u53ef\u4ee5\u6162\u6162\u60f3 XD\uff09</p> <p>\u525b\u5ba3\u544a <code>func_ptr</code> \u7684\u6642\u5019\uff0c\u76ee\u524d\u9019\u500b Function Pointer \u4e26\u672a\u6307\u5411\u4efb\u4f55 Function\uff0c\u6240\u4ee5\u624d\u6703\u6709\u7b2c\u516b\u884c\u7684\u7a0b\u5f0f\u78bc\uff1a<code>func_ptr = &amp;add</code>\uff0c\u6211\u5011\u5229\u7528 Address-of Operator \u4f86\u62ff\u5230 <code>add()</code> \u9019\u500b function \u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff0c\u4e26\u4e14\u5c07\u5176 assign \u7d66 <code>func_ptr</code>\uff0c\u63a5\u4e0b\u4f86\u6211\u5011\u5c31\u53ef\u4ee5\u85c9\u7531 <code>func_ptr</code> \u4f86\u547c\u53eb <code>add()</code> \u9019\u500b\u51fd\u5f0f\u3002</p> <p>\u90a3\u9ebc Function Pointer \u5230\u5e95\u6709\u4ec0\u9ebc\u7528\u8655\uff1f\u6211\u5011\u793a\u7bc4\u4e00\u500b\u5f88\u7c21\u55ae\u7684\u4f8b\u5b50\uff0c\u8b93\u540c\u5b78\u770b\u5230 Function Pointer \u53ef\u4ee5\u88ab\u61c9\u7528\u5728\u600e\u6a23\u7684\u5834\u666f\u3002</p> <pre><code>typedef int (*calculate_func_t)(int, int);\n\nint add(int a, int b) { return a + b; }\nint sub(int a, int b) { return a - b; }\nint mul(int a, int b) { return a * b; }\nint div(int a, int b) { return a / b; }\n\nint calculate(int a, int b, calculate_func_t cal_func){\n    return cal_func(a, b);\n}\n\nint main() {\n    int a, b, choice, result;\n\n    // Array of function pointers\n    calculate_func_t operations[4] = {add, sub, mul, div};\n    const char *operation_names[4] = {\"Addition\", \"Subtraction\", \"Multiplication\", \"Division\"};\n\n    // User input\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &amp;a, &amp;b);\n\n    printf(\"Choose an operation:\\n\");\n    for (int i = 0; i &lt; 4; i++) {\n        printf(\"%d. %s\\n\", i + 1, operation_names[i]);\n    }\n    printf(\"Enter your choice (1-4): \");\n    scanf(\"%d\", &amp;choice);\n\n    // Validate user input\n    if (choice &lt; 1 || choice &gt; 4) {\n        printf(\"Invalid choice.\\n\");\n        return 1; // Exit with error\n    }\n\n    // Use the function pointer from the array based on user choice\n    result = calculate(a, b, operations[choice - 1]);\n    printf(\"The result is: %d\\n\", result);\n\n    return 0;\n}\n</code></pre> <p>\u9069\u7576\u7684\u4f7f\u7528 Function Pointer \u53ef\u4ee5\u8b93\u7a0b\u5f0f\u78bc\u8b8a\u5f97\u66f4\u7c21\u6f54\uff0c\u540c\u6642\u4e0d\u5931\u53ef\u8b80\u6027\u3002</p>"},{"location":"labs/lab1/#string-manipulation","title":"String Manipulation","text":"<p>\u5927\u5bb6\u5c0d\u65bc\u5b57\u4e32\u7684\u64cd\u4f5c\u53ef\u80fd\u6703\u6bd4\u8f03\u719f\u6089 C++ \u4e2d\u7684 iostream \u548c string \u9019\u5169\u500b Standard Library\uff0c\u4f46\u662f\uff0c\u9019\u5802\u8ab2\u9664\u4e86 RTL Testbench \u7684\u64b0\u5beb\u6703\u4f7f\u7528 C++ \u4ee5\u5916\uff0c\u6211\u5011\u4e00\u5f8b\u90fd\u662f\u4f7f\u7528 C \u8a9e\u8a00\u4f86\u64b0\u5beb\u6211\u5011\u7684\u7a0b\u5f0f\u3002\u6240\u4ee5\uff0c\u9019\u5728\u500b\u90e8\u5206\u6211\u5011\u6703\u4ecb\u7d39\u5728 C \u8a9e\u8a00\u7576\u4e2d\u6211\u5011\u8a72\u5982\u4f55\u9032\u884c\u4e00\u4e9b\u5e38\u898b\u7684\u5b57\u4e32\u64cd\u4f5c\u3002</p> <p>\u6211\u5011\u5148\u4ecb\u7d39 String \u5728 C \u8a9e\u8a00\u4e2d\u7684\u57fa\u672c\u6982\u5ff5\uff1b\u57fa\u672c\u4e0a\uff0c\u5927\u5bb6\u53ef\u4ee5\u628a String \u770b\u4f5c\u662f\u4e00\u500b\u7531\u5b57\u5143\uff08Character\uff09\u7d44\u6210\u7684\u9663\u5217\uff08Array\uff09\uff0c </p> <p>\u5728 C \u8a9e\u8a00\u7576\u4e2d\uff0c\u6211\u5011\u6700\u5e38\u4f7f\u7528 <code>string.h</code> \u9019\u500b C \u6a19\u6e96\u51fd\u5f0f\u5eab\u4f86\u9032\u884c\u5b57\u4e32\u76f8\u95dc\u7684\u64cd\u4f5c\uff0c\u6211\u5011\u53ef\u4ee5\u5728 terminal \u4e2d\u8f38\u5165 <code>man string</code> \u4f86\u67e5\u770b\u95dc\u65bc\u9019\u500b\u51fd\u5f0f\u5eab\u7684\u57fa\u672c\u8cc7\u8a0a\u3002</p> <p></p> <p>Note</p> <p>\u8acb\u5584\u7528 <code>man</code> \u6307\u4ee4\uff0c\u53ef\u4ee5\u8b93\u4f60\u5373\u6642\u67e5\u5230\u5f88\u591a\u6771\u897f\uff0c\u4e5f\u53ef\u4ee5\u7df4\u7fd2\u4e26\u4e14\u990a\u6210\u8b80\u82f1\u6587\u6587\u4ef6\u7684\u7fd2\u6163\u3002</p> <p>\u5728\u9019\u500b Lab \u4e2d\uff0c\u6211\u5011\u53ef\u80fd\u6703\u7528\u5230\u4e0b\u9762\u9019\u5e7e\u500b function\uff1a</p> <ul> <li><code>strcpy</code> \u548c <code>strncpy</code></li> <li><code>strcmp</code></li> <li><code>strcat</code></li> <li><code>strlen</code></li> <li><code>strtok</code></li> </ul> <p>\u81f3\u65bc\u9019\u4e9b\u51fd\u6578\u600e\u9ebc\u4f7f\u7528\uff0c\u9019\u662f\u4f60\u61c9\u8a72\u53bb\u67e5\u7684\uff01\uff08STFW\u3001RTFM\uff09</p>"},{"location":"labs/lab1/#simple-interactive-program-design","title":"Simple Interactive Program Design","text":"<p>\u5728 Lab 3 \u4e2d\u6211\u5011\u6703\u7df4\u7fd2\u53bb\u5be6\u4f5c\u4e00\u500b ISA Simulator\uff08ISS\uff09\uff0c\u9019\u500b\u7a0b\u5f0f\u7684\u529f\u80fd\u662f\u6a21\u64ec\u6307\u4ee4\u96c6\u7684\u884c\u70ba\uff0c\u7c21\u55ae\u4f86\u8aaa\u540c\u5b78\u53ef\u4ee5\u7406\u89e3\u6210\u6a21\u64ec\u4e00\u500b Single-Cycle CPU\uff0c\u66f4\u591a\u7d30\u7bc0\u6211\u5011\u5728 Lab 3 \u6703\u8a73\u7d30\u89e3\u8aaa\u3002\u9019\u500b ISS \u4f7f\u7528\u8d77\u4f86\u6703\u60f3\u662f GDB \u4e00\u6a23\uff0c\u6709\u4e00\u500b\u4e92\u52d5\u5f0f\u4ecb\u9762\uff08Interactive Interface\uff09\uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u9019\u500b\u7a0b\u5f0f\u6703\u5370\u51fa\u4e00\u500b Prompt\uff0c\u7136\u5f8c\u7b49\u5f85\u4f7f\u7528\u8005\u8f38\u5165\u6307\u4ee4\u3002\u7576\u63a5\u6536\u5230\u7279\u5b9a\u7684\u6307\u4ee4\u4e4b\u5f8c\uff0c\u5c31\u6703\u53bb\u505a\u5c0d\u61c9\u7684\u4e8b\u60c5\u3002</p> <p>\u56e0\u70ba\u6211\u5011\u4e26\u9084\u6c92\u6559\u5927\u5bb6 RISC-V ISA\uff0c\u6240\u4ee5\u5728 Lab 1 \u7576\u4e2d\uff0c\u6211\u5011\u53ea\u662f\u7df4\u7fd2\u5be6\u4f5c\u9019\u6a23\u7684 Interactive Interface\uff0c\u800c\u9019\u500b\u7a0b\u5f0f\u7684\u529f\u80fd\u5247\u548c ISS \u7121\u95dc\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u5011\u5be6\u4f5c\u4e00\u500b Graph Analyzer\u3002</p> <p>Info</p>"},{"location":"labs/lab1/#what-is-graph","title":"What is Graph?","text":"<p>\u5927\u5bb6\u61c9\u8a72\u5728\u8cc7\u6599\u7d50\u69cb\u9019\u9580\u8ab2\u6703\u7b2c\u4e00\u6b21\u5b78\u5230 Graph \u9019\u500b\u8cc7\u6599\u7d50\u69cb\uff0cGraph \u5728\u771f\u5be6\u4e16\u754c\u4e2d\u7684\u61c9\u7528\u975e\u5e38\u5ee3\u6cdb\uff0c\u6700\u5e38\u898b\u7684 Social Network Analysis\u3001EDA Tool\u3001Network Flow Analysis ... \u7b49\u7b49\uff0c\u5c31\u9023\u6700\u8fd1\u7684 LLM \u751a\u81f3\u4e5f\u6709 Graph \u76f8\u95dc\u7684\u61c9\u7528\uff0c\u771f\u7684\u53ef\u4ee5\u8aaa Graph is everywhere\u3002\u6240\u4ee5\u624d\u60f3\u8aaa\u5728 Lab 1 \u63d0\u65e9\u8b93\u5927\u5bb6\u63a5\u89f8\u5230 Graph \u9019\u500b\u8cc7\u6599\u7d50\u69cb\uff0c\u96d6\u7136\u5927\u5bb6\u53ef\u80fd\u90fd\u6c92\u5b78\u904e\uff0c\u4f46\u662f\u73fe\u5728 ChatGPT \u592a\u5f37\u5927\u4e86\uff0c\u76f8\u4fe1\u5927\u5bb6\u8981\u628a\u4f5c\u696d\u5beb\u51fa\u4f86\u61c9\u8a72\u662f\u5f48\u6307\u9593\u7684\u529f\u592b\u800c\u5df2\u3002 --- TA \u5cfb\u8c6a</p> <p>\u5728\u8a08\u7b97\u6a5f\u79d1\u5b78\u4e2d\uff0cGraph \u662f\u4e00\u7a2e\u7531\u7bc0\u9ede\uff08\u6216\u7a31\u70ba\u9802\u9ede\uff09\u548c\u908a\u7d44\u6210\u7684\u6578\u64da\u7d50\u69cb\u3002\u5b83\u7528\u65bc\u8868\u793a\u7269\u4ef6\u4e4b\u9593\u7684\u95dc\u4fc2\u3002\u5716\u53ef\u4ee5\u662f\u6709\u5411\u7684\u6216\u7121\u5411\u7684\uff0c\u6839\u64da\u908a\u7684\u65b9\u5411\u4f86\u5206\u985e\u3002</p> <p></p>"},{"location":"labs/lab1/#_1","title":"\u5169\u7a2e\u5e38\u898b\u7684\u5716\u7684\u8868\u793a\u8cc7\u6599\u7d50\u69cb","text":"<ol> <li>\u9130\u63a5\u77e9\u9663\uff08Adjacency Matrix\uff09<ul> <li>\u9019\u662f\u4e00\u500b\u4e8c\u7dad\u6578\u7d44\uff0c\u5927\u5c0f\u70ba \\(V \\times V\\)\uff0c\u5176\u4e2d \\(V\\) \u662f\u5716\u4e2d\u7684\u7bc0\u9ede\u6578\u3002</li> <li>\u5982\u679c\u5b58\u5728\u5f9e\u7bc0\u9ede \\(i\\) \u5230\u7bc0\u9ede \\(j\\) \u7684\u908a\uff0c\u5247\u77e9\u9663\u7684 \\((i, j)\\) \u4f4d\u7f6e\u70ba 1\uff08\u6216\u908a\u7684\u6b0a\u91cd\uff09\uff0c\u5426\u5247\u70ba 0\u3002</li> <li>\u512a\u9ede\uff1a\u67e5\u8a62\u5169\u500b\u7bc0\u9ede\u662f\u5426\u76f8\u9023\u7684\u64cd\u4f5c\u975e\u5e38\u5feb\u901f\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(1)\\)\u3002</li> <li>\u7f3a\u9ede\uff1a\u7a7a\u9593\u6548\u7387\u8f03\u4f4e\uff0c\u5c24\u5176\u662f\u5c0d\u65bc\u7a00\u758f\u5716\uff08\u908a\u6578\u9060\u5c11\u65bc\u7bc0\u9ede\u6578\u7684\u60c5\u6cc1\uff09\uff0c\u56e0\u70ba\u9700\u8981 \\(O(V^2)\\) \u7684\u7a7a\u9593\u3002</li> </ul> </li> <li>\u9130\u63a5\u8868\uff08Adjacency List\uff09<ul> <li>\u9019\u662f\u4e00\u7d44\u93c8\u8868\u6216\u6578\u7d44\uff0c\u5176\u4e2d\u6bcf\u500b\u7bc0\u9ede\u90fd\u6709\u4e00\u500b\u5217\u8868\uff0c\u8a72\u5217\u8868\u5305\u542b\u8207\u5176\u76f8\u9023\u7684\u6240\u6709\u7bc0\u9ede\u3002</li> <li>\u901a\u5e38\uff0c\u6bcf\u500b\u7bc0\u9ede\u7684\u5217\u8868\u4e2d\u5b58\u5132\u76f8\u9130\u7bc0\u9ede\u7684\u7de8\u865f\uff08\u53ca\u53ef\u9078\u7684\u908a\u7684\u6b0a\u91cd\uff09\u3002</li> <li>\u512a\u9ede\uff1a\u5728\u7a00\u758f\u5716\u4e2d\u66f4\u7bc0\u7701\u7a7a\u9593\uff0c\u56e0\u70ba\u53ea\u5b58\u5132\u5be6\u969b\u5b58\u5728\u7684\u908a\uff0c\u7a7a\u9593\u8907\u96dc\u5ea6\u70ba \\(O(V + E)\\)\uff0c\u5176\u4e2d \\(E\\) \u662f\u908a\u7684\u6578\u91cf\u3002</li> <li>\u7f3a\u9ede\uff1a\u67e5\u8a62\u5169\u500b\u7bc0\u9ede\u662f\u5426\u76f8\u9023\u7684\u64cd\u4f5c\u8f03\u6162\uff0c\u6700\u58de\u60c5\u6cc1\u4e0b\u9700\u8981 \\(O(V)\\)\u3002</li> </ul> </li> <li>\u5e38\u898b\u7684 Graph Algorithm<ul> <li>Depth-First Search (DFS)</li> <li>Breadth-First Search (BFS)</li> <li>Kruskal's Algorithm (for Minimal-Spinning Tree)</li> </ul> </li> </ol>"},{"location":"labs/lab1/#graph-analyzer-with-interactive-interface","title":"Graph Analyzer with Interactive Interface","text":"<p>\u95dc\u65bc\u57fa\u672c\u7684 Interactive Interface \u7684 code framework \u52a9\u6559\u5df2\u7d93\u6709\u63d0\u4f9b\uff0c\u6240\u4ee5\u5176\u5be6\u540c\u5b78\u53ea\u8981\u64f4\u5145\u9019\u500b\u52a9\u6559\u7d66\u7684\u6846\u67b6\uff0c\u52a0\u5165\u6307\u5b9a\u7684\u6307\u4ee4\uff0c\u4f7f\u5176\u8b8a\u6210\u4e00\u500b\u5b8c\u6574\u7684 Graph Analyzer \u5373\u53ef\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u9019\u500b Analyzer \u61c9\u8a72\u8981\u652f\u63f4\u4e0b\u9762\u9019\u4e9b\u6307\u4ee4\uff1a</p> <ol> <li><code>read &lt;file name&gt;</code><ul> <li>\u6211\u5011\u5be6\u505a\u7684\u662f\u7121\u5411\u5716\uff08Undirected Graph\uff09\uff0c\u4e26\u4e14\u6bcf\u500b\u908a\u90fd\u6703\u6709\u5c0d\u61c9\u7684\u6b0a\u91cd\uff08Weight\uff09</li> <li>\u8b80\u53d6\u5b9a\u7fa9 Graph \u7684\u6a94\u6848\uff0c\u9019\u500b\u6a94\u6848\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u500b\u6578\u5b57\uff0c\u8868\u793a\u7e3d\u5171\u6709\u5e7e\u500b Vertex\uff0c\u7dca\u63a5\u8457\u4e00\u500b\u4e8c\u7dad\u9663\u5217 \\(M\\)\uff0c\u4f7f\u7528 Adjacency Matrix \u8868\u793a Graph \u7684 Vertex \u548c Edge \u7684\u95dc\u4fc2</li> <li>\\(M[i, j]\\) \u4ee3\u8868 \\(V_i\\) \u548c \\(V_j\\) \u4e4b\u9593 Edge \u7684\u6b0a\u91cd\uff08Weight\uff09\uff0c\u5982\u679c\u662f 0 \u7684\u8a71\u8868\u793a \\(V_i\\) \u548c \\(V_j\\) \u4e4b\u9593\u4e0d\u5b58\u5728 Edge</li> <li>Example File     <pre><code>5\n0 5 4 0 1\n5 0 7 2 1\n4 7 0 3 3\n0 2 3 0 6\n1 1 3 6 0\n</code></pre></li> </ul> </li> <li><code>minpath &lt;v1&gt; &lt;v2&gt;</code><ul> <li>\u8a08\u7b97 \\(V_1\\) \u548c \\(V_2\\) \u4e4b\u9593\u7684\u6700\u77ed\u8def\u5f91\u7684\u8ddd\u96e2\uff0c\u8f38\u51fa\u70ba\u4e00\u500b\u81ea\u7136\u6578 \\(N\\)</li> </ul> </li> <li><code>mst</code><ul> <li>\u8f38\u51fa Graph \u7684 Minimal-Spanning Tree \u7684\u6240\u6709 edge \u7684 weighted-sum</li> <li>\u8f38\u51fa\u70ba\u4e00\u500b\u81ea\u7136\u6578 \\(N &gt; 0\\)</li> </ul> </li> <li><code>help [command]</code><ul> <li>\u8f38\u51fa\u6307\u4ee4\u7684\u8a73\u7d30\u8cc7\u8a0a\u548c\u4f7f\u7528\u65b9\u6cd5</li> <li>\u82e5\u4f7f\u7528\u8005\u8f38\u5165 <code>help</code>\uff0c\u5f8c\u9762\u6c92\u6709\u8ddf\u8457\u5176\u4ed6 argument \u7684\u8a71\uff0c\u5247\u8f38\u51fa\u6240\u6709\u652f\u63f4\u7684\u6307\u4ee4\u7684\u8cc7\u8a0a</li> <li>\u82e5\u4f7f\u7528\u8005\u8f38\u5165 <code>help cmd1</code> \u7684\u8a71\uff0c\u5247\u53ea\u8981\u8f38\u51fa cmd1 \u7684\u8cc7\u8a0a\u5373\u53ef</li> </ul> </li> <li><code>quit</code><ul> <li>\u9000\u51fa\u7a0b\u5f0f</li> </ul> </li> </ol> <p>\u5982\u679c Graph Analyzer \u5c1a\u672a\u8b80\u53d6\u6a94\u6848\u7684\u8a71\uff0c\u5247 <code>minpath</code> \u548c <code>mst</code> \u6307\u4ee4\u90fd\u61c9\u8a72\u76f4\u63a5\u8f38\u51fa <code>Please read the file first</code> \u9019\u6bb5\u6587\u5b57\u3002</p> <p>Note</p> <p><code>[...]</code> \u5167\u7684\u6771\u897f\u4ee3\u8868\u662f\u53ef\u6709\u53ef\u7121\u7684\u53c3\u6578\uff0c\u800c <code>&lt;...&gt;</code> \u5167\u7684\u6771\u897f\u4ee3\u8868\u793a\u5fc5\u8981\u53c3\u6578\u3002</p> <p>Danger</p> <p>\u52a9\u6559\u7d66\u7684\u6e2c\u8cc7 Graph \u4e00\u5b9a\u6703\u662f Connected Graph\uff0c\u5373\u9019\u500b Graph \u53ea\u6703\u6709\u4e00\u500b Connected Component\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u616e MST \u6703\u8b8a\u6210 Minimal-Spanning Forest \u7684\u60c5\u6cc1\u3002</p>"},{"location":"labs/lab1/#start-to-do-the-assignment","title":"Start to Do The Assignment","text":"<ol> <li>\u8acb\u5148\u5275\u5efa\u4e00\u500b\u500b\u4eba\u7684 Repository\uff0c\u547d\u540d\u70ba <code>Lab 1</code>\uff0c\u4e26\u628a\u6b0a\u9650\u8a2d\u5b9a\u70ba Private\uff0c\u4e26\u4e14\u8acb\u4e0d\u8981\u52fe\u9078 Initialize repository with README </li> <li>\u4e0b\u8f09\u52a9\u6559\u63d0\u4f9b\u7684 Sample Code\uff0c\u88e1\u9762\u5305\u542b\u524d\u9762\u63d0\u5230\u7684 Interactive Interface Framework\uff0c\u4e26\u4e14\u65b0\u589e Remote Repository     <pre><code>$ git clone https://gitlab.course.aislab.ee.ncku.edu.tw/113-1/lab-1.git\n$ git remote add private &lt;URL of your private repo&gt;\n</code></pre>     Ps: \u52a9\u6559\u63d0\u4f9b\u7684 Code Framework \u53ea\u662f\u53c3\u8003\u7528\uff0c\u4e0d\u4e00\u5b9a\u8981\u6cbf\u7528\u52a9\u6559\u7d66\u7684\u7a0b\u5f0f\u78bc\u3002</li> <li>Assignment Report \u8acb\u4f7f\u7528 HedgeDoc \u64b0\u5beb\uff0c\u4e26\u4e14\u4f7f\u7528\u52a9\u6559\u63d0\u4f9b\u7684 Assignment 1 Report Template\u9032\u5165 HedgeDoc \u4e4b\u5f8c\uff0c\u53ef\u4ee5\u770b\u5230\u53f3\u4e0a\u89d2\u6709\u4e00\u500b\u5efa\u7acb\u7b46\u8a18\u7684\u6309\u9215\uff0c\u6309\u4e0b\u53bb\u4e4b\u5f8c\u5373\u53ef\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u7b46\u8a18\uff0c\u4e26\u8acb\u8907\u88fd Template \u7684\u5167\u5bb9\u7136\u5f8c\u64b0\u5beb\u4f60\u7684\u5831\u544a     </li> <li>\u7576\u4f60\u6e96\u5099 Push \u7684\u6642\u5019\uff0c\u61c9\u8a72\u8981\u5148\u65b0\u589e\u4f60\u81ea\u5df1\u7684 Remote Repository \u70ba\u65b0\u7684 Remote     <pre><code>$ git remote add private &lt;URL of your private remote repo&gt;\n$ git push -u private main\n</code></pre>     \u8acb\u4e0d\u8981 Push \u5230\u52a9\u6559\u63d0\u4f9b\u7684 Remote Repo \u4e0a :)</li> <li>\u5982\u4f55\u7de8\u8b6f\u7a0b\u5f0f<ul> <li>\u57fa\u672c\u4e0a\u4f60\u53ef\u4ee5\u5148\u4f7f\u7528\u52a9\u6559\u6240\u63d0\u4f9b\u7684 Makefile \u4f86\u7de8\u8b6f\u7a0b\u5f0f\uff0c\u53ea\u8981\u8f38\u5165 <code>make</code> \u547d\u4ee4\u5373\u53ef\u81ea\u52d5\u7de8\u8b6f</li> <li>\u4f60\u61c9\u8a72\u8981\u5617\u8a66\u8b80\u61c2\u52a9\u6559\u63d0\u4f9b\u7684 Makefile\uff0c\u9019\u6a23\u53ef\u4ee5\u8b93\u4f60\u5c0d GCC \u7684\u7528\u6cd5\u6709\u57fa\u672c\u7684\u8a8d\u8b58\uff0c\u4e5f\u53ef\u4ee5\u77e5\u9053\u57fa\u672c\u7684 Makefile \u8a72\u5982\u4f55\u64b0\u5beb</li> </ul> </li> </ol>"},{"location":"labs/lab2/","title":"Lab 2 - Simple RISC-V ISA Simulator with RV64I","text":"<p>Info</p> <ul> <li>Contributors\uff1aTA \u5cfb\u8c6a</li> <li>Last Update\uff1a2024/10/09</li> <li>Deadline: 2024/11/03 23:59:59</li> </ul> <p>Success</p> <p>\u5982\u679c\u4f60\u60f3\u8981\u8b80\u5230\u95dc\u65bc RISC-V \u6700\u539f\u59cb\u7684\u8cc7\u8a0a\u548c\u5b9a\u7fa9\u7684\u8a71\uff0c\u8acb\u95b1\u8b80 RISC-V ISA \u898f\u683c\u66f8\uff08Specifications\uff09</p> <ol> <li>RISC-V ISA Specifications Volume 1, Unprivileged Specification version 20240411</li> <li>RISC-V ISA Specifications Volume 2, Privileged Specification version 20240411</li> </ol> <p>\u4f46\u9019\u9580\u8ab2\u4e26\u4e0d\u6703\u6d89\u53ca\u5230 Privileged Architecture\uff08\u7279\u6b0a\u67b6\u69cb\uff09\u7684\u5167\u5bb9</p> Simple Index <ul> <li>Chapter 1 What is computer<ul> <li>1.1 From the Perspective of Finite-State-Machine (FSM)</li> </ul> </li> <li>Chapter 2 Introduction to RISC-V Instruction-Set Architecture (ISA)</li> <li>Chapter 3 What is ISA Simulator (ISS)\uff1f<ul> <li>3.1 General Purpose Register (GPR)</li> <li>3.2 How to Distinguish Instructions From Binary (Instruction Decoding)<ul> <li>3.2.1 From RV32I to RV64I</li> </ul> </li> <li>3.3 Architecture of A Simple ISS</li> <li>3.4 Why Do We Need SYSTEM Instructions?</li> <li>3.5 ISS with Debugging Interactive Interface</li> </ul> </li> <li>Chapter 4 How to Compile and Run</li> <li>Chapter 5 Start to Do Assignment</li> </ul>"},{"location":"labs/lab2/#what-is-computer","title":"What is Computer\uff1f","text":"<p>\u8b93\u6211\u5011\u4f86\u770b\u770b\u96fb\u8166\u6700\u57fa\u672c\u7684\u62bd\u8c61\u7d50\u69cb\uff08Abstraction Layers\uff09\uff1a</p> <p>\u5927\u5bb6\u61c9\u8a72\u6709\u6ce8\u610f\u5230\u6211\u5011\u4e0a\u8ab2\u4f7f\u7528\u7684\u8ab2\u672c Computer Organization and Design RISC-V Edition: The Hardware Software Interface, 2/e\uff08\u4e5f\u5c31\u662f\u6211\u5011\u5e38\u8aaa\u7684\u7b97\u76e4\u66f8\uff09\uff0c\u66f8\u540d\u4e0a\u7684\u526f\u6a19\u984c\u662f\u300eThe Hardware Software Interface\u300f\uff0c\u60f3\u5fc5\u9019\u53e5\u8a71\u4f5c\u70ba\u66f8\u672c\u7684\u526f\u6a19\u984c\uff0c\u4e00\u5b9a\u6709\u8457\u8209\u8db3\u8f15\u91cd\u7684\u5730\u4f4d\u3002\u90a3\u9ebc\uff0c\u9019\u53e5\u8a71\u5230\u5e95\u4ee3\u8868\u8457\u4ec0\u9ebc\uff1f</p> <p>\u6211\u5011\u5728\u76ee\u524d\u7684\u968e\u6bb5\u5148\u5ffd\u7565\u4f5c\u696d\u7cfb\u7d71\uff08Operating System\uff09\u7684\u90e8\u5206\uff0c\u57fa\u672c\u4e0a Program \u4e5f\u5c31\u662f\u6211\u5011\u6240\u8aaa\u7684 Software\uff0c\u800c Processor\uff0c\u53c8\u6216\u662f\u8aaa Central Processing Unit\uff08CPU\uff09\u5c31\u662f\u6211\u5011\u6240\u8aaa\u7684 Hardware\u3002 \u800c\u4ecb\u65bc Software \u548c Hardware \u4e4b\u9593\uff0c\u7279\u5225\u7684\u90e8\u5206\uff0c\u5c31\u662f Instruction-Set Architecture\uff08ISA\uff09\u3002</p> <p>\u6211\u5011\u6240\u64b0\u5beb\u7684\u7a0b\u5f0f\uff08e.g. C \u8a9e\u8a00\uff09\uff0c\u662f\u76f8\u5c0d\u9ad8\u968e\u4e26\u4e14\u62bd\u8c61\u7684\u8a9e\u8a00\uff0c\u63a5\u8fd1\u4eba\u985e\u6240\u80fd\u7406\u89e3\u7684\u81ea\u7136\u8a9e\u8a00\uff0c\u9019\u4e9b\u6771\u897f\u5982\u679c\u76f4\u63a5\u4e1f\u7d66 CPU \u53bb\u770b\u7684\u8a71\uff0cCPU \u662f\u770b\u4e0d\u61c2\u4f60\u5beb\u7684 C \u7a0b\u5f0f\u7684\uff0c\u4e5f\u56e0\u6b64\u4e0a\u4e00\u500b Lab \u6211\u5011\u4ecb\u7d39\u4e86 Compiler \u7684 Compilation Flow \u548c GCC \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u53ea\u4e0d\u904e Compiler \u4e26\u4e0d\u662f\u8a08\u7b97\u6a5f\u7d44\u7e54\u9019\u5802\u8ab2\u8981\u8a0e\u8ad6\u7684\u91cd\u9ede\u3002 \u800c\u5728\u9019\u500b Lab\uff0c\u6211\u5011\u5c07\u9032\u5165\u9019\u5802\u8ab2\u7684\u91cd\u9ede\u4e4b\u4e00\uff0c\u4e5f\u5c31\u662f ISA \u7684\u90e8\u5206\u3002</p> <p>ISA\uff08Instruction-Set Architecture\uff09\uff0c\u57fa\u672c\u4e0a\u5b9a\u7fa9\u4e86\u4e00\u7cfb\u5217 CPU \u61c9\u8a72\u8981\u652f\u63f4\u7684\u6307\u4ee4\u4ee5\u53ca\u5c0d\u61c9\u7684\u5177\u9ad4\u884c\u70ba\uff0c\u78ba\u4fdd\u8edf\u9ad4\u548c\u786c\u9ad4\u4e4b\u9593\u6709\u4e00\u500b\u53ef\u4ee5\u76f8\u4e92\u914d\u5408\u7684\u4ecb\u9762\uff08Interface\uff09\u3002 \u6240\u6709\u5728\u8a08\u7b97\u6a5f\u7cfb\u7d71\u4e2d\u7684\u8edf\u9ad4\uff0c\u6700\u7d42\u90fd\u5fc5\u9808\u8981\u88ab\u8f49\u63db\u6210\u8a72\u7cfb\u7d71\u4e2d CPU \u6240\u5be6\u4f5c\u7684 ISA \u7684\u6307\u4ee4\uff0c\u624d\u80fd\u5920\u9806\u5229\u5730\u904b\u4f5c\u5728\u7cfb\u7d71\u4e4b\u4e2d\u3002</p> <p>\u57fa\u672c\u4e0a\uff0c\u5728\u8a08\u7b97\u6a5f\u79d1\u5b78\u4e2d\uff0c\u62bd\u8c61\uff08Abstraction\uff09\u662f\u4e00\u500b\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\u548c\u6280\u5de7\uff0cISA \u5176\u5be6\u5c31\u662f\u4e00\u7a2e\u62bd\u8c61\u5c64\u7684\u8a2d\u8a08\u548c\u61c9\u7528\u3002\u6709\u4e86 ISA \u7684\u5236\u5b9a\uff0c\u5982 RISC-V\uff0c\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\uff08e.g., \u7cfb\u7d71\u8edf\u9ad4\uff09\u53ef\u4ee5\u4e0d\u7528\u7406\u89e3\u5e95\u5c64\u786c\u9ad4\u7684\u7d30\u7bc0\uff0c\u53ea\u9700\u8981\u638c\u63e1 ISA \u5167\u6240\u5b9a\u7fa9\u7684\u6307\u4ee4\uff0c\u4fbf\u53ef\u4ee5\u64b0\u5beb\u7a0b\u5f0f\u3002 \u800c\u8a2d\u8a08 CPU \u67b6\u69cb\u7684\u786c\u9ad4\u67b6\u69cb\u5e2b\u4e5f\u4e0d\u5fc5\u904e\u65bc\u95dc\u6ce8\u5728 ISA \u4e4b\u4e0a\uff0c\u66f4\u9ad8\u5c64\u6b21\u7684 Software Stack \u662f\u5982\u4f55\u88ab\u5236\u5b9a\uff0c\u53ea\u9700\u8981\u5c08\u6ce8\u5728 ISA-Level \u7684\u5be6\u4f5c\u5373\u53ef\u3002</p> <p>\u6709\u4e86 Abstraction Layer \u7684\u6982\u5ff5\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u8a08\u7b97\u6a5f\u7cfb\u7d71\u4e2d\u6bcf\u500b\u91cd\u8981\u7684\u90e8\u5206\u89e3\u8026\u5408\uff08Decoupling\uff09\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u5c08\u6ce8\u5728\u500b\u5225\u7684\u90e8\u5206\uff0c\u4f8b\u5982 CPU \u8a2d\u8a08\uff0c\u53c8\u6216\u8005\u662f\u4f5c\u696d\u7cfb\u7d71\u7b49\u7b49\u7cfb\u7d71\u8edf\u9ad4\u7684\u8a2d\u8a08\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5168\u90e8\u90fd\u6df7\u96dc\u5728\u4e00\u8d77\u3002 \u4f46\u662f\u85c9\u7531 ISA \u9019\u7a2e Abstraction Layer \u7684\u9023\u7d50\uff0c\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u548c\u786c\u9ad4\u67b6\u69cb\u5e2b\u4e4b\u9593\u4f9d\u7136\u6709\u5408\u9069\u7684\u6e9d\u901a\u6a4b\u6a11\u3002</p>"},{"location":"labs/lab2/#from-the-perspective-of-finite-state-machine-fsm","title":"From the Perspective of Finite-State-Machine (FSM)","text":"<p>\u6211\u5011\u4e5f\u53ef\u4ee5\u5f9e\u6709\u9650\u72c0\u614b\u6a5f\u7684\u89c0\u9ede\u4f86\u770b\u6574\u500b\u8a08\u7b97\u6a5f\u7cfb\u7d71\u7684\u904b\u4f5c\u3002\u57fa\u672c\u4e0a\uff0cProgram \u53ef\u4ee5\u88ab\u8996\u70ba\u5f0f\u4e00\u500b\u5de8\u5927\u7684\u72c0\u614b\u6a5f \\(S = &lt;\\mathbf{V}, \\text{PC}&gt;\\)\uff0c\u5176\u4e2d \\(\\mathbf{V} = \\{v_1, v_2, v_3, ..., v_n\\}\\)\uff0c\u70ba\u6574\u500b\u7a0b\u5f0f\u4e2d\u6240\u64c1\u6709\u7684\u6240\u6709\u8b8a\u6578\uff08Variable\uff09\u3002 \u81f3\u65bc\u4f60\u5728 Source Code \u4e2d\u7684\u6bcf\u500b statements\uff0c\u53ef\u4ee5\u88ab\u7a31\u70ba\u662f Activation Event\uff0c\u5b83\u6703\u5c0e\u81f4 Program \u7684\u72c0\u614b\u6539\u8b8a\uff0c\u6709\u53ef\u80fd\u662f \\(\\mathbf{V}\\) \u6539\u8b8a\uff0c\u53ef\u80fd\u662f \\(\\text{PC}\\) \u6539\u8b8a\uff0c\u6216\u662f\u5169\u8005\u90fd\u6539\u8b8a\u3002 \u81f3\u65bc\u9019\u4e9b C \u8a9e\u8a00\u7a0b\u5f0f\u539f\u59cb\u78bc\u4e2d\u7684 Statement \u662f\u6839\u64da\u4ec0\u9ebc\u6a23\u7684\u898f\u5247\u4f86\u6539\u8b8a \\(S\\)\uff0c\u9019\u5c31\u662f\u7531 C \u8a9e\u8a00\u6a19\u6e96\uff08C Standard Revision, e.g., ISO C90\uff09\u4f86\u5236\u5b9a\u3002</p> <p>\u9664\u4e86\u6211\u5011\u53ef\u4ee5\u5c07 Software\uff08Program\uff09\u8996\u70ba\u662f\u4e00\u500b FSM\uff0cProcessor\uff08CPU\uff09\u672c\u8cea\u4e0a\u4e5f\u662f\u4e00\u500b\u5de8\u5927\u7684 FSM\u3002Processor \u7684\u72c0\u614b \\(S\\) \u53ef\u4ee5\u88ab\u5b9a\u7fa9\u70ba\u4e00\u500b\u96c6\u5408 \\(S = \\{\\text{Values in memory elements}\\}\\)\u3002</p> <p>\u800c ISA \u4e2d\u5b9a\u7fa9\u7684\u6bcf\u689d\u6307\u4ee4\uff0c\u5176\u5be6\u5c31\u662f CPU \u7684\u72c0\u614b \\(S\\) \u7684 Activation Event\uff0c\u4e5f\u5c31\u662f\u6307\u4ee4\u6703\u5c0e\u81f4 CPU \u7684\u72c0\u614b\u767c\u751f\u6539\u8b8a\u3002 \u5c0d\u65bc\u6211\u5011\u63a5\u4e0b\u4f86\u8981\u5be6\u4f5c\u7684 ISA Simulator \u4f86\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u5176\u7684\u72c0\u614b\u5b9a\u7fa9\u70ba \\(S = \\{\\text{GPRs},\\, \\text{PC},\\, \\text{Memory}\\}\\)\u3002 \u5c0d\u65bc ISA Smulator \u7684\u72c0\u614b\uff0c\u8996\u70ba\u662f\u7531 32 \u500b General Purpose Registers\uff0c\u518d\u52a0\u4e0a Program Counter \u548c Main Memory \u6240\u7d44\u6210\uff0c\u800c\u6211\u5011\u5be6\u4f5c\u7684 RV64I \u6307\u4ee4\u5247\u6703\u53bb\u6539\u8b8a ISA Simulator \u7684\u72c0\u614b \\(S\\)\u3002</p>"},{"location":"labs/lab2/#introduction-to-risc-v-instruction-set-architecture-isa","title":"Introduction to RISC-V Instruction-Set Architecture (ISA)","text":"<p>RISC-V \u88ab\u6b78\u985e\u70ba RISC\uff08Reduced Instruction Set Computer\uff09\u6307\u4ee4\u96c6\u67b6\u69cb\uff0c\u8207\u4e4b\u76f8\u5c0d\u7684\u662f CISC\uff08Complex Instruction Set Computer\uff09\u3002 CISC \u7684\u4ee3\u8868\u4eba\u7269\u4fbf\u662f\u5728\u684c\u4e0a\u578b\u96fb\u8166\u3001\u4f3a\u670d\u5668\u4e0a\u5e38\u898b\u7684 x86 \u67b6\u69cb\uff0c\u800c RISC \u67b6\u69cb\u9664\u4e86 RISC-V \u4ee5\u5916\uff0c\u6700\u5e38\u898b\u7684\u4fbf\u662f ARM\uff0cARM \u5728\u624b\u6a5f\u3001\u5d4c\u5165\u5f0f\u61c9\u7528\u5e02\u5834\u4e2d\u6709\u91cd\u8981\u7684\u5730\u4f4d\u3002</p> <p>\u5fc5\u9808\u8981\u5f37\u8abf\u7684\u662f\uff0cRISC \u548c CISC \u4e26\u6c92\u6709\u660e\u78ba\u7684\u5b9a\u7fa9\uff0c\u4e0d\u904e\u76f8\u8f03\u65bc CISC \u67b6\u69cb\uff0cRISC \u67b6\u69cb\u7684\u6307\u4ee4\u96c6\u901a\u5e38\u6709\u4ee5\u4e0b\u7684\u7279\u8272\uff1a</p> <ol> <li>\u6307\u4ee4\u7684\u9577\u5ea6\u56fa\u5b9a\u4e14\u7de8\u78bc\u683c\u5f0f\u8f03\u55ae\u7d14</li> <li>\u6bcf\u689d\u6307\u4ee4\u6240\u9700\u8981\u5b8c\u6210\u7684\u4efb\u52d9\u8f03\u70ba\u55ae\u4e00\uff08\u4e5f\u53ef\u4ee5\u60f3\u50cf\u6210\u6307\u4ee4\u7684\u529f\u80fd\u6bd4\u8f03\u7c21\u55ae\uff09 <p>\u5728 CISC \u67b6\u69cb\u5982 x86 \u4e2d\uff0c\u55ae\u4e00\u4e00\u689d CISC \u6307\u4ee4\u901a\u5e38\u90fd\u6703\u88ab\u8f49\u63db\u6210\u591a\u689d \u00b5Op\uff08micro-operation\uff09\u6307\u4ee4\uff0c\u800c\u5176\u4e2d \u00b5Op \u5176\u5be6\u5c31\u6bd4\u8f03\u63a5\u8fd1 RISC \u6307\u4ee4</p> </li> <li>\u6307\u4ee4\u901a\u5e38\u4e0d\u6703\u76f4\u63a5\u64cd\u4f5c Main Memory\uff0c\u800c\u662f\u85c9\u7531 Memory Accessing Instruction \u5982 Load/Store \u6307\u4ee4\u4f86\u5b58\u53d6\u8a18\u61b6\u9ad4</li> </ol> <p>RISC-V \u76f8\u8f03\u65bc ARM \u6709\u5e7e\u500b\u6bd4\u8f03\u9bae\u660e\u7684\u7279\u8272\uff1a</p> <ol> <li>\u5982\u679c\u8981\u8981\u4f7f\u7528 ARM \u9032\u884c\u5546\u696d\u884c\u70ba\u9700\u8981\u53d6\u5f97\u6388\u6b0a\uff08\u5c31\u662f\u8981\u4ed8\u9322\uff09\uff0c\u4f46 RISC-V \u662f\u958b\u6e90\uff08Open-Source\uff09\u7684\uff0c\u5c31\u662f\u514d\u8cbb\u7684\u610f\u601d</li> <li>RISC-V \u662f\u6a21\u7d44\u5316\u7684\u8a2d\u8a08\uff0c\u6700\u5c0f\u53ef\u4ee5\u53ea\u5305\u542b Base Integer Instruction Set</li> <li>RISC-V \u7684\u6307\u4ee4\u76f8\u8f03\u65bc ARM \u4f9d\u7136\u66f4\u70ba\u7c21\u55ae <p>\u8a31\u591a ARM \u7684 CPU \u8a2d\u8a08\u4f9d\u7136\u6703\u628a ARM \u7684\u6307\u4ee4\u8f49\u63db\u6210\u591a\u500b \u00b5Op \u624d\u53bb\u57f7\u884c</p> </li> </ol>"},{"location":"labs/lab2/#what-is-isa-simulator-iss","title":"What is ISA Simulator (ISS) \uff1f","text":"<p>\u56e0\u70ba\u6211\u5011\u6240\u4f7f\u7528\u7684\u96fb\u8166\u5e7e\u4e4e\u90fd\u662f\u4f7f\u7528 x86 \u67b6\u69cb\u6307\u4ee4\u96c6\uff0c\u6240\u4ee5\u4e0d\u8a8d\u5f97 RISC-V \u6307\u4ee4\uff0c\u56e0\u6b64\u7576\u6211\u5011\u4f7f\u7528 RISC-V GNU Toolchain \u53bb\u628a C \u7a0b\u5f0f\u7de8\u8b6f\u6210\u4f7f\u7528 RISC-V \u6307\u4ee4\u7684\u57f7\u884c\u6a94\u7684\u6642\u5019\uff0c\u5982\u679c\u6211\u5011\u76f4\u63a5\u57f7\u884c\uff0c\u6703\u51fa\u73fe\u932f\u8aa4\uff0c\u56e0\u70ba program \u672c\u8eab\u548c Host Machine \u6240\u4f7f\u7528\u7684 ISA \u4e0d\u540c\u3002</p> <p>\u8981\u96a8\u624b\u8cb7\u4f86\u4e00\u500b\u4f7f\u7528 RISC-V CPU \u7684\u6a5f\u5668\uff0c\u81f3\u5c11\u5728\u73fe\u5728\u770b\u4f86\u78ba\u5be6\u4e0d\u592a\u5bb9\u6613\uff0c\u4f46\u662f\u5beb\u7a0b\u5f0f\u9019\u4ef6\u4e8b\u60c5\u8b93\u4e00\u5207\u8b8a\u5f97\u53ef\u80fd\u3002 \u6240\u4ee5\uff0c\u6211\u5011\u53ef\u4ee5\u8a2d\u8a08\u4e00\u500b\u7a0b\u5f0f\uff0c\u9019\u500b\u7a0b\u5f0f\u7684\u4efb\u52d9\u5f88\u55ae\u7d14\uff0c\u5c31\u662f\u89e3\u8b80 RISC-V \u6307\u4ee4\u4e26\u4e14\u57f7\u884c\u6307\u4ee4\u5c0d\u61c9\u7684\u529f\u80fd\uff0c\u6982\u5ff5\u4e0a\u5c31\u6709\u9ede\u985e\u4f3c\u65bc\u6211\u5011\u8a2d\u8a08\u4e00\u500b\u7a0b\u5f0f\u53bb\u6a21\u64ec RISC-V Machine\uff0c\u9019\u6a23\u6211\u5011\u5c31\u53ef\u4ee5\u85c9\u7531\u9019\u500b\u5047\u7684 RISC-V Machine \u4f86\u57f7\u884c RISC-V Program\u3002</p> <p>Info</p> <p>\u672c\u6587\u4e2d\u6240\u8aaa\u7684 RISC-V Program \u6cdb\u6307\u88ab\u7de8\u8b6f\u6210\u4f7f\u7528 RSIC-V \u6307\u4ee4\u7684\u7a0b\u5f0f\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u9019\u500b\u6211\u5011\u8a2d\u8a08\u7684 RISC-V ISS \u751a\u81f3\u53ef\u4ee5\u5728\u5f8c\u9762\u6211\u5011\u4ee5 RTL-Level \u8a9e\u8a00\u8a2d\u8a08 CPU \u7684\u6642\u5019\uff0c\u5728 CPU \u9a57\u8b49\u7684\u968e\u6bb5\u6d3e\u4e0a\u7528\u5834\uff01\u8b93\u6211\u5011\u53ef\u4ee5\u505a Co-Simulation\u3002</p> <p>\u70ba\u4e86\u8981\u5be6\u4f5c\u4e00\u500b\u6700\u57fa\u672c\u7684 ISS\uff0c\u6211\u5011\u9700\u8981\u6a21\u64ec Program Counter\uff0c\u6a21\u64ec 32 \u500b General Purpose Register\uff0c\u9084\u6709 Main Memory\u3002 \u56e0\u70ba Register \u662f\u904b\u7b97\u4e2d\u66ab\u5b58\u8cc7\u6599\u7684\u6700\u57fa\u672c\u55ae\u4f4d\uff0cProgram Counter \u8ca0\u8cac\u7d00\u9304\u76ee\u524d\u57f7\u884c\u5230\u54ea\u4e00\u689d\u6307\u4ee4\uff0c\u800c Memory \u5247\u8ca0\u8cac\u5132\u5b58\u6211\u5011\u6b32\u57f7\u884c\u7684 RISC-V Program\uff08\u5305\u542b Instructions \u548c Data\uff09\u3002 \u70ba\u4e86\u8981\u57f7\u884c\u4e00\u500b RISC-V Program\uff0c\u9019\u4e09\u500b\u6771\u897f\u7f3a\u4e00\u4e0d\u53ef\uff0c\u5982\u679c\u7f3a\u5c11 Register\uff0c\u5247\u6307\u4ee4\u7684\u904b\u7b97\u7d50\u679c\u6c92\u6709\u5730\u65b9\u53ef\u4ee5\u653e\u3002 \u5982\u679c\u7f3a\u5c11 Program Counter\uff0c\u5247\u7121\u6cd5\u77e5\u9053\u76ee\u524d\u5230\u5e95\u6b63\u5728\u57f7\u884c\u54ea\u4e00\u689d\u6307\u4ee4\u3002 \u800c\u5982\u679c\u7f3a\u5c11 Memory \u7684\u8a71\uff0c\u6211\u5011\u60f3\u8981\u57f7\u884c\u7684 RISC-V Program \u6240\u5305\u542b\u7684\u6307\u4ee4\u548c\u8cc7\u6599\u90fd\u6c92\u6709\u5730\u65b9\u53ef\u4ee5\u653e\uff0c\u66f4\u4e0d\u7528\u8a0e\u8ad6\u8981\u5982\u4f55\u57f7\u884c\u4e86\u3002</p>"},{"location":"labs/lab2/#general-purpose-register-gpr","title":"General Purpose Register (GPR)","text":"<p>\u6839\u64da RISC-V \u898f\u683c\u66f8\u7684\u5b9a\u7fa9\uff0c\u5728 RV64I \u4e2d\u64c1\u6709 32 \u500b 64-bits \u7684\u6574\u6578\u901a\u7528\u66ab\u5b58\u5668\uff0c\u53ef\u4ee5\u62ff\u4f86\u5b58\u653e\u8cc7\u6599\uff0c\u4f46\u662f\u6709\u4e00\u9805\u898f\u5b9a\u662f <code>$x0</code> \u9019\u500b\u66ab\u5b58\u5668\u7684\u6578\u503c\u61c9\u8a72\u6c38\u9060\u4fdd\u6301\u662f 0\u3002</p> <p>\u4f46\u662f\uff0c\u57fa\u65bc\u7a2e\u7a2e\u539f\u56e0\uff0c\u6211\u5011\u901a\u5e38\u6703\u53bb\u898f\u7bc4\u6240\u8b02\u7684 Application Binary Interface\uff08ABI\uff09\uff0c\u50cf\u662f RISC-V \u5c31\u6709\u81ea\u5df1\u7684 RISC-V ABI\uff08\u5728\u5f8c\u9762\u7684 Lab \u6703\u4ecb\u7d39\uff09\u3002ABI \u6703\u5305\u542b\u8a31\u591a\u898f\u7bc4\uff0c\u5176\u4e2d\u4e00\u500b\u5c31\u662f ABI Mnemonic\uff0c\u4e5f\u5c31\u662f\u8aaa\u96d6\u7136\u898f\u683c\u66f8\u4e0a\u6c92\u6709\u898f\u5b9a x0 ~ x31 \u9019\u4e09\u5341\u4e8c\u500b\u66ab\u5b58\u5668\u61c9\u8a72\u88ab\u7528\u4f5c\u4ec0\u9ebc\u7528\u9014\uff0c\u4f46\u662f ABI \u5176\u5be6\u6703\u53bb\u898f\u7bc4\u9019\u4e9b\u66ab\u5b58\u5668\u901a\u5e38\u6703\u88ab\u4f5c\u70ba\u4f55\u7a2e\u7528\u9014\u4f7f\u7528\uff0c\u4e26\u4e14\u540c\u6642\u7d66\u5b83\u5011\u4e00\u500b\u65b9\u4fbf\u8a18\u61b6\u7684\u540d\u5b50\uff0c\u8b93\u6211\u5011\u5728\u5beb Assembly Programming \u7684\u6642\u5019\u53ef\u4ee5\u66f4\u65b9\u4fbf\u3002</p> <p>\u4e0d\u904e\u5728 Lab 2 \u6211\u5011\u53ea\u5c08\u6ce8\u65bc Processor State \u7684\u6a21\u64ec\uff0c\u6240\u4ee5\u5176\u5be6\u4e0d\u7528\u53bb\u95dc\u6ce8 ABI \u7684\u7d30\u7bc0\u3002\u5728 ISS \u7684\u5be6\u4f5c\u4e0a\uff0c\u6211\u5011\u53ea\u8981\u78ba\u5be6\u63d0\u4f9b 32 \u500b\u66ab\u5b58\u5668\u8b93\u7a0b\u5f0f\u53ef\u4ee5\u64cd\u4f5c\u5373\u53ef\u3002</p> <p>Note</p> <p>\u8b93 <code>$x0</code> \u4fdd\u6301\u6c38\u9060\u90fd\u662f 0\uff08\u4ee3\u8868\u4e0d\u53ef\u4ee5\u88ab\u5beb\u5165\u4efb\u4f55\u8cc7\u6599\uff09\u5176\u5be6\u53ef\u4ee5\u5e36\u4f86\u5f88\u591a\u597d\u8655\uff0c\u8b93\u6211\u5011\u8209\u5e7e\u500b\u4f8b\u5b50\uff1a</p> <ol> <li>\u5be6\u4f5c Move \u6307\u4ee4<ul> <li>Move \u6307\u4ee4\u53ef\u4ee5\u628a <code>$rs1</code> \u66ab\u5b58\u5668\u4e2d\u7684\u503c\u8907\u88fd\u5230 <code>$rs2</code> \u4e2d</li> <li>\u5229\u7528 ADD \u6307\u4ee4\u914d\u5408 <code>$x0</code> \u5373\u53ef\u5be6\u4f5c\u51fa Move \u7684\u529f\u80fd</li> <li><code>mv t1, t0</code> \u7b49\u50f9\u65bc <code>add t1, x0, t0</code></li> <li>\u7576\u7136\uff0c\u4f7f\u7528 ADDI \u4e5f\u53ef\u4ee5\uff1a<code>addi t1, t0, 0</code></li> </ul> </li> <li>\u5be6\u4f5c NOP \u6307\u4ee4\uff08No-Operation \uff09<ul> <li>NOP \u6307\u4ee4\u5c31\u662f\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u7684\u6307\u4ee4</li> <li>\u53ef\u4ee5\u5229\u7528 ADDI \u5be6\u4f5c NOP\uff1a<code>addi x0, x0, 0</code></li> </ul> </li> <li>\u5be6\u4f5c\u8207\u96f6\u6bd4\u8f03\u7684 BRANCH \u6307\u4ee4\uff08Zero-Comparasion Branching\uff09<ul> <li><code>beqz</code>\uff1a<code>beq rs1, x0, offset</code></li> <li><code>bnez</code>\uff1a<code>bne rs1, x0, offset</code></li> <li><code>bltz</code>\uff1a<code>blt rs1, x0, offset</code></li> <li><code>bgez</code>\uff1a<code>bge rs1, x0, offset</code></li> </ul> </li> </ol> <p>\u57fa\u672c\u4e0a\u5c31\u662f\u56e0\u70ba 0 \u9019\u500b\u6578\u5b57\u5f88\u7279\u5225\uff0c\u6211\u5011\u5f88\u5e38\u7528\u5230\uff0c\u6240\u4ee5\u8b93 <code>$x0</code> \u4fdd\u6301\u6c38\u9060\u662f 0 \u53ef\u4ee5\u5e36\u4f86\u5f88\u591a\u597d\u8655\uff0c\u6e1b\u5c11\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u6307\u4ee4\u3002</p>"},{"location":"labs/lab2/#how-to-distinguish-instructions-from-binary-instruction-decoding","title":"How to Distinguish Instructions From Binary (Instruction Decoding)","text":"<p>\u57fa\u672c\u4e0a\u6307\u4ee4\u88ab\u5132\u5b58\u5728\u8a18\u61b6\u9ad4\u4e2d\u7684\u5f62\u5f0f\u4e0d\u904e\u5c31\u662f\u4e00\u5c0d 0 \u548c 1 \u800c\u5df2\uff0c\u56e0\u6b64\uff0c\u6211\u5011\u5fc5\u9808\u8981\u900f\u904e\u4e00\u4e9b\u7279\u5b9a\u7684\u65b9\u6cd5\u4f86\u8fa8\u8a8d\u9019\u4e9b 0 \u548c 1 \u7a76\u7adf\u4ee3\u8868\u8457\u4ec0\u9ebc\u610f\u7fa9\u3002</p> <p></p> <p>\u6839\u64da RISC-V \u898f\u683c\u66f8\u7684\u63cf\u8ff0\uff0cRISC-V Base Instruction Set \u7e3d\u5171\u6709\u56db\u7a2e Base Instruction Format\uff08R-Type\u3001I-Type\u3001S-Type\u3001U-Type\uff09\uff0c\u9084\u6709\u5169\u7a2e\u6839\u64da Immediate Format \u8b8a\u5f62\u800c\u5ef6\u4f38\u7684 Format\uff08B-Type\u3001J-Type\uff09\u3002</p> <ol> <li>B-Type \u7531 S-Type \u8b8a\u5f62\u800c\u4f86     </li> <li>J-Type \u7531 U-Type \u8b8a\u5f62\u800c\u4f86     </li> </ol> <p>\u6307\u4ee4\u5206\u985e\u6700\u6838\u5fc3\u7684\u90e8\u5206\u662f OPCODE\uff0c\u6839\u64da OPCODE \u6211\u5011\u5c31\u53ef\u4ee5\u5148\u628a\u6307\u4ee4\u521d\u6b65\u5730\u5206\u7fa4\u3002 \u7576\u6211\u5011\u628a\u6307\u4ee4\u5206\u6210\u5404\u500b sub-group \u4e4b\u5f8c\uff0c\u5c31\u53ef\u4ee5\u518d\u6839\u64da\u5176\u4ed6\u7684\u8cc7\u8a0a\u5982 Function Code\uff08e.g., func3\u3001func7\uff09\u4f86\u9032\u4e00\u6b65\u5340\u5206\u6307\u4ee4\u5230\u5e95\u662f\u54ea\u4e00\u500b\u3002\u4e0b\u5716\u662f RISC-V \u898f\u683c\u66f8\u4e2d\u7684 OPCODE Table\uff1a</p> <p></p> <p>\u6211\u5011\u9032\u4e00\u6b65\u63a2\u8a0e\u5728 RV32I Base Integer Instruction \u4e2d\u5230\u5e95\u6709\u54ea\u4e9b\u6307\u4ee4\u9700\u8981\u5be6\u4f5c\uff0c\u4e26\u4e14\u4ee5 OPCODE \u4f86\u5206\u985e\u3002</p> <ol> <li>OP Type </li> <li>OP-IMM Type </li> <li>JAL </li> <li>JALR </li> <li>BRANCH </li> <li>LOAD/STORE </li> <li>LUI/AUIPC </li> <li>SYSTEM  \uff0c</li> </ol> <p>\u6700\u5f8c\u6211\u5011\u628a\u622a\u81f3\u76ee\u524d\u70ba\u6b62\u61c9\u8a72\u8981\u5be6\u4f5c\u7684\u6307\u4ee4\u5217\u51fa\u4f86\uff0c\u7e3d\u5171\u61c9\u8a72\u6709 38 \u689d\u6307\u4ee4\u3002</p>"},{"location":"labs/lab2/#from-rv32i-to-rv64i","title":"From RV32I to RV64I","text":"<p>\u4f46\u662f\uff0c\u7531\u65bc\u6211\u5011\u9019\u6b21\u8981\u5be6\u4f5c\u7684\u662f RV64I\uff0c\u6240\u4ee5\u9084\u6703\u6709\u5e7e\u500b\u984d\u5916\u7684\u6307\u4ee4\u8981\u5340\u5206\u3002\u5982\u679c\u6211\u5011\u8981\u5be6\u4f5c\u7684\u6307\u4ee4\u662f RV32I \u7684\u8a71\uff0c\u90a3\u9ebc\u4e0a\u8ff0\u7684\u9019\u4e9b\u6307\u4ee4\uff0c\u5c31\u5927\u90e8\u5206\u90fd\u662f\u64cd\u4f5c\u5728 32-bits \u7684 Operands \u4e0a\u3002\u4f46\u662f\uff0c\u5982\u679c\u4eca\u5929\u662f RV64I \u7684\u8a71\uff0c\u4e0a\u8ff0\u7684\u6307\u4ee4\u5c31\u6703\u8b8a\u6210\u64cd\u4f5c\u5728 64-bits \u7684 Operands \u4e4b\u4e0a\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u70ba\u4e86\u8b93 RV64I \u4f9d\u7136\u53ef\u4ee5\u57f7\u884c 32-bits \u7684\u904b\u7b97\uff0c\u56e0\u6b64\u4e5f\u6703\u7279\u5225\u6709\u5e7e\u689d\u6307\u4ee4\u662f\u64cd\u4f5c\u5728 32-bits \u7684 Operands\u3002</p> <p>Most integer computational instructions operate on XLEN-bit\uff08XLEN \u6307\u7684\u5c31\u662f RV32 \u7684 32 \u6216\u662f RV64 \u7684 64\uff09 values. Additional instruction variants are provided to manipulate 32-bit values in RV64I, indicated by a 'W' suffix to the opcode. These \"*W\" instructions ignore the upper 32 bits of their inputs and always produce 32-bit signed values, sign-extending them to 64 bits, i.e. bits XLEN-1 through 31 are equal. ----- RISC-V Specification Volume 1, Chapter 4.2</p> <p>\u5927\u5bb6\u53ef\u4ee5\u5f9e\u4e0a\u5716\u770b\u51fa\uff0c\u5f9e RV32I \u8f49\u63db\u5230 RV64I\uff0c\u5fc5\u9808\u591a\u5be6\u4f5c\u5341\u4e94\u689d\u6307\u4ee4\u3002\u5176\u4e2d\u6307\u4ee4\u5f8c\u7db4\uff08suffix\uff09\u591a\u4e86 W \u7684\u4ee3\u8868\u662f\u64cd\u4f5c\u5728 64-bits register \u7684\u4f4e 32-bits\uff0c\u5ffd\u7565\u9ad8 32-bits\uff0c\u4e26\u4e14\u5c07\u904b\u7b97\u5f8c\u7684\u7d50\u679c\u505a sign-extension \u5230 64-bits \u4e4b\u5f8c\u518d\u5b58\u56de <code>$rd</code> \u66ab\u5b58\u5668\u3002</p> <p>Note</p> <p>\u9019\u88e1\u8aaa\u300c\u591a\u5be6\u4f5c\u5341\u4e94\u689d\u6307\u4ee4\u300d\u5176\u5be6\u6709\u9ede\u4e0d\u592a\u7cbe\u78ba\uff0c\u4e8b\u5be6\u4e0a\uff0c\u771f\u6b63\u591a\u51fa\u4f86\u7684\u6307\u4ee4\u61c9\u8a72\u53ea\u6709\u5341\u4e8c\u689d\uff0c\u56e0\u70ba SLLI/SRAI/SRLI \u9019\u4e09\u689d\u6307\u4ee4\u662f RV32I \u4e2d\u672c\u4f86\u5c31\u6709\u7684\uff0c\u53ea\u662f\u5230 RV64I \u4e2d\u5b83\u5011\u7684\u683c\u5f0f\u6703\u6709\u4e00\u9ede\u9ede\u8b8a\u5316\u3002</p> <p>\u91dd\u5c0d SLLI/SRLI/SRAI \u9019\u4e09\u500b\u6307\u4ee4\uff0cshamt\uff08Shift-Amount\uff09\u6703\u5f9e\u672c\u4f86\u7684 5-bits \u8b8a\u6210 6-bits\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f SLLIW/SRLIW/SRAIW \u9019\u4e09\u500b\u6307\u4ee4\u7684 shamt \u624d\u6703\u662f 5-bits\u3002</p> <p>\u800c\u81f3\u65bc OPCODE \u70ba OP Type \u9019\u985e\u7684\u6307\u4ee4\uff0c\u5247\u591a\u51fa\u4e86 ADDW\u3001SLLW/SRLW\u3001SUBW/SRAW \u9019\u4e9b\u6307\u4ee4\u3002</p> <p>LUI (load upper immediate) uses the same opcode as RV32I. LUI places the 32-bit U-immediate into register rd, filling in the lowest 12 bits with zeros. The 32-bit result is sign-extended to 64 bits.</p> <p>AUIPC (add upper immediate to pc) uses the same opcode as RV32I. AUIPC is used to build pc-relative addresses and uses the U-type format. AUIPC forms a 32-bit offset from the U-immediate, filling in the lowest 12 bits with zeros, sign-extends the result to 64 bits, adds it to the address of the AUIPC instruction, then places the result in register rd.</p> <p>----- RISC-V Specification Volume 1, Chapter 4.2.1</p> <p>\u6839\u64da\u898f\u683c\u66f8\u7684\u63cf\u8ff0\uff0cLUI \u9019\u689d\u6307\u4ee4\u4e00\u6a23\u662f\u5c07 <code>imm[31:12]</code> \u5f8c\u9762\u88dc 12-bits \u7684 0 \u4e4b\u5f8c\uff0c\u518d\u505a sign-extension \u5230 64-bits\uff0c\u7136\u5f8c\u518d\u5b58\u56de\u53bb <code>$rd</code> \u66ab\u5b58\u5668\u3002 \u800c AUIPC \u5247\u662f\u5c07 <code>imm[31:12]</code> \u7684\u5f8c\u9762\u4e00\u6a23\u88dc 12-bits \u7684 0 \u4e4b\u5f8c\uff0c\u5148\u505a sign-extension \u5230 64-bits\uff0c\u518d\u548c\u7576\u524d\u7684 PC \u76f8\u52a0\uff0c\u6700\u5f8c\u5c07 64-bits \u7684\u904b\u7b97\u7d50\u679c\u5b58\u56de <code>$rd</code> \u66ab\u5b58\u5668\u3002</p> <p>\u6700\u5f8c\u5247\u662f LOAD/STORE \u6307\u4ee4\uff0c\u56e0\u70ba General Purpose Register \u5df2\u7d93\u88ab\u64f4\u5145\u5230 64-bits \u7684\u5bec\u5ea6\uff0c\u6240\u4ee5\u7406\u6240\u7576\u7136\u591a\u4e86 LD/LWU \u548c SD \u9019\u4e09\u500b\u6307\u4ee4\uff0c\u800c\u5176\u4e2d\u7684 D \u4ee3\u8868\u7684\u662f Double Word\uff0864-bits\uff09\u3002</p>"},{"location":"labs/lab2/#architecture-of-a-simple-iss","title":"Architecture of A Simple ISS","text":"<p>\u5728\u5be6\u4f5c\u4e0a\uff0c\u6211\u5011\u53ef\u4ee5\u7c21\u55ae\u5730\u7528 C \u8a9e\u8a00\u7684 struct \u4f86\u5efa\u7acb\u4e00\u500b\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u88e1\u9762\u5305\u542b\u4e86\u6240\u6709\u6211\u5011\u9700\u8981\u6a21\u64ec\u51fa\u4f86\u7684 Processor States\u3002</p> <pre><code>#include &lt;stdint.h&gt;\n#include &lt;bool.h&gt;\n\n#define MEM_SIZE 0x10000 (64-KiB)\n\ntypedef struct {\n    uint64_t current_pc, new_pc; // Program Counter\n    uint64_t regs[32];           // General Purpose Registers\n    uint8_t  mem[MEM_SIZE];      // Main Memory\n    bool  halt; // Halt signal\n} cpu_state_t;\n\ncpu_state_t* processor_ptr; // define the pointer of the processor state (main part of ISS)\n</code></pre> <p>\u8981\u8868\u793a Processor \u7684\u72c0\u614b\uff0c\u6211\u5011\u9700\u8981 PC\u300132 \u500b\u66ab\u5b58\u5668\u9084\u6709 Main Memory\u3002PC \u6703\u6307\u5411\u76ee\u524d\u6b63\u5728\u57f7\u884c\u7684\u6307\u4ee4\u5728\u8a18\u61b6\u9ad4\u4e2d\u7684\u5730\u5740\uff0c\u800c\u66ab\u5b58\u5668\u5247\u662f Processor \u6700\u57fa\u672c\u7528\u4f86\u66ab\u5b58\u904b\u7b97\u7d50\u679c\u7684\u55ae\u4f4d\u3002\u81f3\u65bc\u4e00\u500b\u7a0b\u5f0f\u7684\u6307\u4ee4\u548c\u8cc7\u6599\u672c\u8eab\uff0c\u5247\u90fd\u6703\u88ab\u5132\u5b58\u5728 Main Memory \u4e2d\uff0cProcessor \u6703\u900f\u904e LOAD/STORE \u6307\u4ee4\u4f86\u5b58\u53d6 Main Memory\uff0c\u5305\u542b\u8b80\u53d6\u6307\u4ee4\u3001\u9084\u6709\u5b58\u53d6 data\u3002</p> <p>\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5229\u7528\u7279\u6b8a\u7684\u6280\u5de7\uff08Union + Bit-Field\uff09\u4f86\u5b9a\u7fa9\u6307\u4ee4\u7684\u683c\u5f0f\uff1a</p> <p>Danger</p> <p>\u6ce8\u610f\uff0c\u96d6\u7136\u6211\u5011\u5be6\u4f5c\u7684\u662f RV64I\uff0c\u4f46\u662f\u6bcf\u689d\u6307\u4ee4\u672c\u8eab\u90fd\u662f 32-bits\uff084-bytes\uff09\u3002</p> <pre><code>#include &lt;stdint.h&gt;\ntypedef union {\n    struct {\n        uint32_t opcode : 7;\n        uint32_t rd : 5;\n        uint32_t func3 : 3;\n        uint32_t rs1 : 5;\n        uint32_t rs2 : 5;\n        uint32_t func7 : 7;\n    } R_TYPE;\n    struct {\n        uint32_t opcode : 7;\n        uint32_t rd : 5;\n        uint32_t func3 : 3;\n        uint32_t rs1 : 5;\n        int64_t imm_11_0 : 12;\n    } I_TYPE;\n    struct {\n        uint32_t opcode : 7;\n        uint64_t imm_4_0 : 5;\n        uint32_t func3 : 3;\n        uint32_t rs1 : 5;\n        uint32_t rs2 : 5;\n        int64_t imm_11_5 : 7;\n    } S_TYPE;\n    struct {\n        uint32_t opcode : 7;\n        uint32_t rd : 5;\n        int64_t imm_31_12 : 20;\n    } U_TYPE;\n    struct {\n        uint32_t opcode : 7;\n        uint64_t imm_11 : 1;\n        uint64_t imm_4_1 : 4;\n        uint32_t func3 : 3;\n        uint32_t rs1 : 5;\n        uint32_t rs2 : 5;\n        uint64_t imm_10_5 : 6;\n        int64_t imm_12 : 1;\n    } B_TYPE;\n    struct {\n        uint32_t opcode : 7;\n        uint32_t rd : 5;\n        uint64_t imm_19_12 : 8;\n        uint64_t imm_11 : 1;\n        uint64_t imm_10_1 : 10;\n        int64_t imm_20 : 1;\n    } J_TYPE;\n    uint32_t raw;\n} riscv_inst_t;\n</code></pre> <p>\u7136\u5f8c\u518d\u5229\u7528 C \u8a9e\u8a00\u4e2d\u7684 <code>enum</code> \u4f86\u5b9a\u7fa9 OPCODE \u548c function code\uff0c\u65b9\u4fbf\u6211\u5011\u7528\u4f86\u8fa8\u8a8d\u4e0d\u540c\u7684\u6307\u4ee4\u3002</p> <pre><code>/*\n * The name without any suffix (e.g., _FUNC3) represents the OPCODE type\n */\ntypedef enum {\n    /* 12 types in total */\n    OP = 0b0110011,\n    OP_32 = 0b0111011,\n    OP_IMM = 0b0010011,\n    OP_IMM_32 = 0b0011011,\n    LOAD = 0b0000011,\n    STORE = 0b0100011,\n    BRANCH = 0b1100011,\n    JAL = 0b1101111,\n    JALR = 0b1100111,\n    AUIPC = 0b0010111,\n    LUI = 0b0110111,\n    SYSTEM = 0b1110011,\n} OPCODE;\n\ntypedef enum {\n    ADD_SUB_FUNC3 = 0b000,\n    SLL_FUNC3 = 0b001,\n    SLT_FUNC3 = 0b010,\n    SLTU_FUNC3 = 0b011,\n    XOR_FUNC3 = 0b100,\n    SRL_SRA_FUNC3 = 0b101,\n    OR_FUNC3 = 0b110,\n    AND_FUNC3 = 0b111,\n} ARITHMETIC_FUNC3;\n\ntypedef enum {\n    BEQ_FUNC3 = 0b000,\n    BNE_FUNC3 = 0b001,\n    BLT_FUNC3 = 0b100,\n    BGE_FUNC3 = 0b101,\n    BLTU_FUNC3 = 0b110,\n    BGEU_FUNC3 = 0b111,\n} BRANCH_FUNC3;\n\ntypedef enum {\n    SB_FUNC3 = 0b000,\n    SH_FUNC3 = 0b001,\n    SW_FUNC3 = 0b010,\n    SD_FUNC3 = 0b011,\n} STORE_FUNC3;\n\ntypedef enum {\n    LB_FUNC3 = 0b000,\n    LH_FUNC3 = 0b001,\n    LW_FUNC3 = 0b010,\n    LD_FUNC3 = 0b011,\n    LBU_FUNC3 = 0b100,\n    LHU_FUNC3 = 0b101,\n    LWU_FUNC3 = 0b110,\n} LOAD_FUNC3;\n\n/*\n * Note that the SYSTEM type instructions use the I-Type format\n */\ntypedef enum {\n    ECALL_FUNC12 = 0b000000000000,\n    EBREAK_FUNC12 = 0b000000000001,\n} SYSTEM_FUNC12;\n</code></pre> <p>Question</p> <p>\u4f60\u6709\u6ce8\u610f\u5230\u81f3\u5c11\u76ee\u524d\u770b\u5230\u7684\u6240\u6709 OPCODE \u7a2e\u985e\u7684 least significant 2-bits \u90fd\u662f <code>0b11</code> \u55ce\uff0c\u4f60\u77e5\u9053\u539f\u56e0\u662f\u4ec0\u9ebc\u55ce\uff1f\uff08Hint\uff1aRISC-V C-Extension\uff09</p> <p>\u6709\u4e86\u5c0d\u65bc Processor States \u5b9a\u7fa9\u7684\u8cc7\u6599\u7d50\u69cb\u4e4b\u5f8c\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u958b\u59cb\u601d\u8003\u8981\u5982\u4f55\u6a21\u64ec Processor \u7684\u904b\u4f5c\u3002 ISA Simulator \u7684\u4efb\u52d9\u5f88\u7c21\u55ae\uff0c\u5c31\u662f\u9031\u800c\u5fa9\u59cb\u5730\u8b80\u53d6\u4e26\u57f7\u884c\u6307\u4ee4\u3002 \u6211\u5011\u53ef\u4ee5\u5b9a\u7fa9\u4e00\u500b\u51fd\u5f0f\uff0c\u4f5c\u70ba ISS \u57f7\u884c\u6307\u4ee4\u7684\u6700\u5c0f\u55ae\u4f4d\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u547c\u53eb\u9019\u500b\u51fd\u5f0f\u53ea\u6703\u57f7\u884c\u4e00\u689d\u6307\u4ee4\u3002</p> <pre><code>void execute_one_inst(cpu_state_t* proc_ptr) {\n    const rsicv_inst_t *inst_ptr = (riscv_inst_t*)(&amp;processor_ptr-&gt;mem[processor_ptr-&gt;pc]);\n    OPCODE opcode = *inst_ptr &amp; 0b1111111; // bitwise-AND\n    switch (opcode) {\n        case OP: {\n            handle_OP(proc_ptr, inst_ptr);\n            break;\n        }\n        case OP_32: {\n            handle_OP_32(proc_ptr, inst_ptr);\n            break;\n        }\n        case OP_IMM: {\n            handle_OP_IMM(proc_ptr, inst_ptr);\n            break;\n        }\n        case OP_IMM_32: {\n            handle_OP_IMM_32(proc_ptr, inst_ptr);\n            break;\n        }\n        case LOAD: {\n            handle_LOAD(proc_ptr, inst_ptr);\n            break;\n        }\n        case STORE: {\n            handle_STORE(proc_ptr, inst_ptr);\n            break;\n        }\n        case BRANCH: {\n            handle_BRANCH(proc_ptr, inst_ptr);\n            break;\n        }\n        case JAL: {\n            handle_JAL(proc_ptr, inst_ptr);\n            break;\n        }\n        case JALR: {\n            handle_JALR(proc_ptr, inst_ptr);\n            break;\n        }\n        case LUI: {\n            handle_LUI(proc_ptr, inst_ptr);\n            break;\n        }\n        case AUIPC: {\n            handle_AUIPC(proc_ptr, inst_ptr);\n            break;\n        }\n        case SYSTEM: {\n            handle_SYSTEM(proc_ptr, inst_ptr);\n            break;\n        }\n        default: {\n            Panic(\"Unsupported instruction: %x\\n\", inst_ptr-&gt;raw);\n        }\n    }\n    /* update program counter */\n    proc_ptr-&gt;current_pc = proc_state-&gt;new_pc;\n}\n</code></pre> <p>\u81f3\u65bc\u600e\u9ebc\u5be6\u4f5c\u9019\u4e9b Handler Function\uff0c\u9019\u5c31\u662f\u672c\u6b21\u4f5c\u696d\u7684\u4e00\u5927\u91cd\u9ede\u4e86\uff0c\u5927\u5bb6\u5c31\u53c3\u8003\u52a9\u6559\u63d0\u4f9b\u7684 Sample Code \u5427\uff01 \u52a9\u6559\u5728\u7bc4\u4f8b\u4e2d\u53ea\u5be6\u4f5c\u4e86 <code>addi</code> \u548c\u90e8\u5206 <code>ecall</code> \u6307\u4ee4\u7684\u529f\u80fd\uff0c\u4e26\u4e14\u7528\u9019\u5169\u689d\u6307\u4ee4 Demo \u4e86\u548c\u7d93\u5178\u7684\u7a0b\u5f0f <code>printf(\"Hello, World!\\n\")</code> \u76f8\u540c\u7684\u6548\u679c\uff0c\u5269\u4e0b\u7684\u6307\u4ee4\u5c31\u9700\u8981\u9760\u5927\u5bb6\u81ea\u884c\u5b8c\u6210\u3002</p> <p>\u7576\u6211\u5011\u5be6\u4f5c\u597d\u5c0d\u57f7\u884c\u4e00\u689d\u6307\u4ee4\u9019\u500b\u884c\u70ba\u7684\u51fd\u5f0f\u5c01\u88dd\u4e4b\u5f8c\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u57fa\u65bc <code>execute_one_inst()</code> \u4f86\u63a7\u5236\u6574\u500b ISS\u3002\u8b6c\u5982\uff0c\u6211\u53ef\u4ee5\u518d\u9019\u4e4b\u4e0a\u5efa\u69cb\u4e00\u500b\u51fd\u5f0f <code>void execute_insts(unsigned inst_count)</code>\uff1a</p> <pre><code>void execute_insts(unsigned long inst_count) {\n    for (unsigned i = 0; (i &lt; inst_count) &amp;&amp; (!processor_ptr-&gt;halt); i++){\n        execute_one_inst();\n    }\n}\n</code></pre> <p>Question</p> <p>\u5927\u5bb6\u5982\u679c\u89c0\u5bdf\u52a9\u6559\u63d0\u4f9b\u7684 Sample Code \u7576\u4e2d\u53ef\u4ee5\u767c\u73fe\uff0c\u52a9\u6559\u5c0d\u65bc interactive interface \u7684 <code>c</code> \u6307\u4ee4\u7684\u5be6\u4f5c\u65b9\u5f0f\u5c31\u662f\u547c\u53eb <code>execute_insts(-1)</code>\uff0c\u4f60\u662f\u5426\u53ef\u4ee5\u89e3\u91cb\u70ba\u4ec0\u9ebc\u8981\u50b3\u5165 -\\(1\\) \u5462\uff1f</p>"},{"location":"labs/lab2/#why-do-we-need-system-instructions","title":"Why Do We Need SYSTEM Instructions?","text":"<p>\u5927\u5bb6\u4e00\u5b9a\u8981\u6709\u4e0b\u9762\u9019\u5f35\u5716\u7684\u89c0\u5ff5\uff1a</p> <p>\u6211\u5011\u6240\u4f7f\u7528\u7684\u6e2c\u8a66\u7a0b\u5f0f\uff0c\u662f\u7d93\u7531 RISC-V GNU Toolchain \u7de8\u8b6f\u5668\u7de8\u8b6f\uff0c\u6700\u7d42\u8b8a\u6210\u4f7f\u7528 RISC-V \u6307\u4ee4\u7684\u53ef\u57f7\u884c\u6a94\u6848\uff0c\u800c\u6211\u5011\u5728 Lab 2 \u6240\u8a2d\u8a08\u7684 RISC-V ISA Simulator\uff0c\u5247\u662f\u4e00\u652f\u4e0d\u6298\u4e0d\u6263\u7684 x86 \u7a0b\u5f0f\u3002 \u4e5f\u5c31\u662f\u8aaa\uff0c\u6211\u5011\u7684 ISS \u662f\u76f4\u63a5\u8dd1\u5728\u6211\u5011\u81ea\u5df1\u7684\u96fb\u8166\u4e4b\u4e0a\uff08\u9019\u908a\u5148\u5ffd\u7565\u4f5c\u696d\u7cfb\u7d71\uff09\uff0c\u4f46\u662f\u6e2c\u8a66\u7a0b\u5f0f\u7684 RISC-V Program \u5247\u4e0d\u662f\u3002\u56e0\u70ba RISC-V Program \u4f7f\u7528\u7684\u662f RISC-V \u6307\u4ee4\uff0c\u6211\u5011\u7684 x86 \u96fb\u8166\u4e0d\u8a8d\u5f97\u9019\u4e9b\u6307\u4ee4\uff0c\u6240\u4ee5\u5fc5\u9808\u7d93\u7531\u6211\u5011\u8a2d\u8a08\u7684 ISS \u505a\u8f49\u63db\uff0c\u624d\u6709\u8fa6\u6cd5\u770b\u8d77\u4f86\u53ef\u4ee5\u76f4\u63a5\u5728\u6211\u5011\u7684\u96fb\u8166\u4e0a\u57f7\u884c\u3002</p> <p>Note</p> <p>\u5176\u5be6\u6211\u5011\u6240\u8a2d\u8a08\u7684 ISA Simulator\uff0c\u5c31\u6709\u9ede\u985e\u4f3c\u7de8\u8b6f\u5668\u9818\u57df\u7576\u4e2d\u6240\u8b02\u7684\u76f4\u8b6f\u5668\uff08Interpreter\uff09\uff0c\u5b83\u53ef\u4ee5\u52d5\u614b\u5730\u89e3\u6790 RISC-V \u6307\u4ee4\u4e26\u4e14\u57f7\u884c\u6307\u4ee4\u6240\u88ab\u5b9a\u7fa9\u7684\u884c\u7232\u3002</p> <p>\u6211\u5011\u9996\u5148\u6709\u4e00\u4ef6\u975e\u5e38\u91cd\u8981\u7684\u4e8b\u60c5\u9700\u8981\u63a2\u8a0e\uff0c\u90a3\u9ebc\u5c31\u662f\u7576\u6211\u5011\u7684 RISC-V Program \u9700\u8981\u6709 I/O \u7684\u529f\u80fd\u7684\u6642\u5019\uff08e.g., <code>printf</code> and <code>scanf</code>\uff09\uff0c\u6211\u5011\u8a72\u600e\u9ebcd\u5be6\u4f5c\uff1f \u6703\u9700\u8981\u63a2\u8a0e\u9019\u500b\u554f\u984c\u662f\u56e0\u70ba\uff0c\u4ee5\u6211\u5011\u6700\u5e38\u7528\u7684\u8f38\u51fa\u8f38\u5165\u88dd\u7f6e\uff0c\u9375\u76e4\uff08\u8f38\u5165\uff09\u548c\u87a2\u5e55\uff08\u8f38\u51fa\uff09\u4f86\u8aaa\uff0c\u9019\u4e9b\u88dd\u7f6e\u662f\u63a5\u5728\u6211\u5011\u7684\u96fb\u8166\u4e0a\uff0c\u4f46\u662f RISC-V Program \u4e26\u4e0d\u662f\u76f4\u63a5\u904b\u884c\u5728\u6211\u5011\u7684\u96fb\u8166\u4e0a\uff0c\u800c\u662f\u4e2d\u9593\u9084\u9694\u4e86\u4e00\u500b ISS\u3002 \u5982\u679c\u6211\u5011\u7684 RISC-V Program \u9700\u8981\u8f38\u51fa\u8f38\u5165\u7684\u529f\u80fd\u7684\u8a71\uff0c\u5fc5\u9808\u5411\u81ea\u5df1\u6240\u8655\u7684\u57f7\u884c\u74b0\u5883\uff08Eexcution Environment\uff09\u767c\u8d77\u670d\u52d9\u8acb\u6c42\uff08Service Request\uff09\uff0c\u4ee5\u76ee\u524d\u7684\u60c5\u5883\u4f86\u770b\uff0c\u5c0d RISC-V Program \u4f86\u8aaa Execution Encironment \u5c31\u662f\u6211\u5011\u7684 ISS\u3002 \u6839\u64da RISC-V \u898f\u683c\u66f8\u4e0a\u7684\u63cf\u8ff0\uff0cSYSTEM \u9019\u985e\u7684\u6307\u4ee4\u7684\u529f\u80fd\u662f\uff1a</p> <p>SYSTEM instructions are used to access system functionality that might require privileged access and are encoded using the I-type instruction format. The ECALL instruction is used to make a service request to the execution environment. ----- RISC-V Specification Volume 1</p> <p>\u4e5f\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u85c9\u7531\u5be6\u4f5c ECALL \u6307\u4ee4\uff0c\u8b93 RISC-V Program \u6709\u80fd\u529b\u5411 ISS \u767c\u51fa\u8acb\u6c42\uff0c\u59d4\u8a17\u5176\u5e6b\u5fd9\u8655\u7406\u95dc\u65bc I/O \u7684\u4efb\u52d9\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u5fc5\u9808\u53bb\u5b9a\u7fa9 Execition Environment Interface\uff08EEI\uff09\uff0c\u7576 ECALL \u6307\u4ee4\u88ab\u57f7\u884c\u7684\u6642\u5019\uff0c\u6211\u5011\u8a72\u5982\u4f55\u8fa8\u5225\u76ee\u524d RISC-V Program \u5230\u5e95\u767c\u51fa\u4e86\u4ec0\u9ebc\u985e\u578b\u7684\u8acb\u6c42\uff1f</p> <p>\u6700\u5e38\u898b\u7684\u505a\u6cd5\u662f\uff0c\u6211\u5011\u53ef\u4ee5\u898f\u5b9a\u7576\u57f7\u884c\u5230 ECALL \u6307\u4ee4\u7684\u6642\u5019\uff0c\u5fc5\u9808\u89c0\u5bdf\u66ab\u5b58\u5668 <code>$a0</code> \u4e2d\u7684\u503c\uff0c\u4f86\u6c7a\u5b9a RISC-V Program \u767c\u51fa\u7684 service request type\u3002</p> <ul> <li>\u7576\u57f7\u884c\u5230 ECALL \u7684\u6642\u5019\uff0c\u9996\u5148\u89c0\u5bdf <code>$a0</code> \u66ab\u5b58\u5668\u4e2d\u7684\u6578\u503c<ol> <li><code>$a0 == 0</code>     \u4ee3\u8868\u7a0b\u5f0f\u5df2\u7d93\u57f7\u884c\u7d50\u675f\uff0c\u61c9\u8a72\u5c07 Processor State \u4e2d\u7684 <code>halt</code> \u8a2d\u70ba true</li> <li><code>$a0 == 1</code>     \u4ee3\u8868\u7a0b\u5f0f\u5411\u57f7\u884c\u74b0\u5883\u767c\u51fa <code>putchar</code> \u7684\u8acb\u6c42\uff0c\u5176\u4e2d\u9700\u8981\u88ab\u5370\u51fa\u7684 character \u7684\u503c\u6703\u88ab\u653e\u5728\u66ab\u5b58\u5668 <code>$a1</code> \u7576\u4e2d</li> </ol> </li> </ul>"},{"location":"labs/lab2/#iss-with-debugging-interactive-interface","title":"ISS with Debugging Interactive Interface","text":"<p>\u5ef6\u7e8c\u5728 Lab 1 \u7576\u4e2d\u6211\u5011\u5229\u7528 readline library \u5be6\u4f5c\u7684 interactive interface\uff0c\u6211\u5011\u5728\u5be6\u4f5c ISS \u7684\u6642\u5019\uff0c\u53ef\u4ee5\u6548\u4eff\u985e\u4f3c GDB \u7684 C language debugger\uff0c\u63d0\u4f9b\u4e00\u7cfb\u5217\u6211\u5011\u5b9a\u7fa9\u597d\u7684\u6307\u4ee4\uff0c\u8b93 ISS \u7684\u4f7f\u7528\u8005\u53ef\u4ee5\u85c9\u7531\u9019\u4e9b\u6307\u4ee4\u76f4\u63a5\u64cd\u4f5c ISS\uff0c\u65b9\u4fbf\u4f7f\u7528\u8005 debug\u3002</p> <p>Note</p> <p>\u8acb\u7279\u5225\u6ce8\u610f\uff0c\u9019\u88e1\u6240\u8aaa\u7684\u65b9\u4fbf Debug \u4e26\u4e0d\u662f\u53ea\u65b9\u4fbf\u6211\u5011 Debug ISS \u672c\u8eab\uff0c\u800c\u662f\u65b9\u4fbf\u6211\u5011\u4e4b\u5f8c\u7528 ISS \u8dd1\u6211\u5011\u81ea\u5df1\u5beb\u7684 RISC-V Program \u7684\u6642\u5019\uff0c\u53ef\u4ee5\u65b9\u4fbf Debug RISC-V Program \u672c\u8eab</p> <p>\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u61c9\u8a72\u8981\u8b93\u6211\u5011\u7684 ISS \u652f\u63f4\u4ee5\u4e0b\u7e3d\u5171\u4e5d\u689d\u6307\u4ee4\uff1a</p> Command Format Example help help [command] help  help quit quit quit quit c c c si si [N] si  si 5 break b [Inst. Address] break  break 0x10 watch watch  watch  watch ($a0 == 10) disable disable &lt;b or w&gt; &lt;number&gt; disable b 1  disable w 0 reg reg &lt;pc or gpr&gt; reg pc  reg gpr mem mem &lt;N&gt; &lt;Base Address in Hex&gt; mem 4 0x10 <p>\u6bcf\u689d\u6307\u4ee4\u7684\u529f\u80fd\u6558\u8ff0\u5982\u4e0b\uff1a</p> <ol> <li>help <p>\u5370\u51fa\u652f\u63f4\u7684\u6307\u4ee4\u548c\u5c0d\u61c9\u7684\u8a0a\u606f</p> </li> <li>quit <p>\u96e2\u958b Simulator</p> </li> <li>c <p>\u6301\u7e8c\u57f7\u884c\u6307\u4ee4\u76f4\u5230\u9047\u5230 breakpoint\u3001watchpoint \u6216\u662f\u7a0b\u5f0f\u9000\u51fa</p> </li> <li>si <p>\u57f7\u884c \\(N\\) \u689d\u6307\u4ee4\uff0c\u5176\u4e2d \\(N\\) \u662f\u5927\u65bc\u96f6\u7684\u6b63\u6574\u6578\uff08\u5982\u679c\u6c92\u6709\u50b3\u5165 \\(N\\) \u5247\u9810\u8a2d \\(N\\) \u7b49\u65bc \\(1\\)\uff09</p> </li> <li>break <p>\u5217\u51fa\u76ee\u524d\u6240\u6709 breakpoint\uff08\u7de8\u865f\u5f9e\u96f6\u958b\u59cb\uff09\uff0c\u6216\u662f\u8a2d\u7f6e\u65b0\u7684 breakpoint</p> </li> <li>watch <p>\u5217\u51fa\u76ee\u524d\u6240\u6709 watchpoint\uff08\u7de8\u865f\u5f9e\u96f6\u958b\u59cb\uff09\uff0c\u6216\u662f\u8a2d\u7f6e\u65b0\u7684 watchpoint\uff08\u53ea\u8981\u652f\u63f4\u5c0d Register \u8a2d\u5b9a watchpoint \u5373\u53ef\uff09</p> </li> <li>disable <p>\u4ee5\u7de8\u865f\u4f86\u522a\u9664\u73fe\u6709\u7684 breakpoint \u6216\u662f watchpoint</p> </li> <li>reg <p>\u67e5\u770b PC \u6216\u662f GPR \u7684\u503c\uff08Ps\uff1aGPR \u61c9\u8a72\u8981\u628a 32 \u500b\u66ab\u5b58\u5668\u5168\u90e8\u90fd show \u51fa\u4f86\uff09</p> </li> <li>mem <p>\u67e5\u770b Main Memory \u7684\u5167\u5bb9\uff0c\u4ee5 Hex \u7684\u683c\u5f0f\u5370\u51fa\uff0c\u53ef\u4ee5\u6307\u5b9a\u8981\u8f38\u51fa \\(N\\) \u500b word\uff0832-bits\uff09</p> </li> </ol>"},{"location":"labs/lab2/#how-to-compile-and-run","title":"How to Compile and Run","text":"<p>\u5982\u540c Lab 1\uff0c\u5728 Lab 2 \u4e2d\u52a9\u6559\u4e00\u6a23\u5df2\u7d93\u63d0\u4f9b Makefile \u8b93\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u53ea\u8981\u5728 <code>lab-2</code> \u8def\u5f91\u5e95\u4e0b\u8f38\u5165 <code>make</code> \u5373\u53ef\u7de8\u8b6f ISS \u672c\u8eab\u9084\u6709\u5728 <code>lab-2/src/test-prog</code> \u5e95\u4e0b\u7684\u6e2c\u8a66\u7a0b\u5f0f\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u8981\u4f7f\u7528 ISS \u57f7\u884c\u6e2c\u8a66\u7528\u7684 RISC-V Program \u7684\u8a71\uff0c\u4ee5 <code>lab-2/src/test-prog/hello.c</code> \u70ba\u4f8b\uff0c\u4f60\u53ef\u5148 <code>make</code> \u4e4b\u5f8c\uff0c\u9032\u5165 <code>build</code> \u8cc7\u6599\u593e\uff0c\u7136\u5f8c\u8f38\u5165 <code>./main.elf hello.elf</code>\uff0c\u9032\u5165 ISS \u4e4b\u5f8c\u518d\u8f38\u5165 <code>c</code> \u8b93 ISS \u6301\u7e8c\u57f7\u884c\u76f4\u5230 RISC-V Program \u7d50\u675f\u70ba\u6b62\u3002 \u6b63\u5e38\u4f86\u8aaa\uff0c\u4f60\u61c9\u8a72\u6703\u770b\u5230\u5982\u4e0b\u7684\u8f38\u51fa\uff1a</p> <p>\u66f4\u591a\u6e2c\u8cc7\uff0c\u5f85\u52a9\u6559\u5b8c\u6210\u5f8c\u6703\u518d\u66f4\u65b0 Chapter 4 \u7684\u5167\u5bb9\u3002</p>"},{"location":"labs/lab2/#start-to-do-assignment","title":"Start to Do Assignment","text":"<ol> <li>Clone the sample code<ul> <li>\u5148\u78ba\u5b9a\u81ea\u5df1\u5df2\u7d93\u6253\u958b\u8ab2\u7a0b\u958b\u767c\u74b0\u5883\uff08Container\uff09\uff0c\u4e26\u4e14\u5728\u74b0\u5883\u4e2d\u7684 <code>workspace</code> \u5e95\u4e0b</li> <li>\u4e0b\u8f09\u52a9\u6559\u63d0\u4f9b\u7684 Sample Code <p><code>git clone https://gitlab.course.aislab.ee.ncku.edu.tw/113-1/lab-2.git</code></p> </li> <li>\u9032\u5165\u8cc7\u6599\u593e <p><code>cd lab-2</code></p> </li> </ul> </li> <li>Create a private repo<ul> <li>\u5982\u540c Lab 1 \u6240\u8ff0\uff0c\u5728 Gitlab \u4e0a\u9762\u5275\u5efa\u500b\u4eba Repo\uff0c\u4e26\u4e14\u547d\u540d\u70ba <code>Lab 2</code>\uff0c\u8acb\u4e0d\u8981\u52fe\u9078 Initialize the repository with README</li> <li>\u78ba\u8a8d branch \u7684\u540d\u7a31\u70ba main \u800c\u975e master <p><code>git branch -M main</code></p> </li> <li>\u65b0\u589e\u81ea\u5df1\u7684 Private Gitlab Repo \u70ba Remote Source <p><code>git remote add private &lt;HTTPS URL of your private repo&gt;</code></p> </li> </ul> </li> <li>\u5c07\u7a0b\u5f0f\u78bc Push \u4f60\u7684 Private Repository<ul> <li>\u8acb\u8a18\u5f97\u662f\u63a8\u5230 <code>private</code> \u800c\u975e <code>origin</code> <p><code>git push -u private main</code></p> </li> </ul> </li> <li>Notes<ul> <li>\u56e0\u70ba\u5728\u9810\u8a2d\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u8981 Gitlab Repo \u4e2d\u5305\u542b <code>.gitlab-ci.yml</code> \u6a94\u6848\u5c31\u6703\u89f8\u767c CI/CD Pipeline\uff0c\u5982\u679c\u4f60\u5728\u524d\u671f\u5c1a\u672a\u5b8c\u6210\u4f5c\u696d\u7684\u6642\u5019\u4e0d\u60f3\u89f8\u767c Pipeline\uff0c\u53ef\u4ee5\u5148\u5728 Gitlab \u4f60\u7684 Private Repo \u4e2d\u7684\u8a2d\u5b9a\u5c07 CI/CD \u529f\u80fd\u95dc\u9589\uff0c\u5f85\u5b8c\u6210\u4f5c\u696d\u4e4b\u5f8c\u518d\u6253\u958b</li> </ul> </li> <li>\u8acb\u8a18\u5f97\u4f9d\u64da Assignment Report Template \u64b0\u5beb\u672c\u6b21\u4f5c\u696d\u7684\u5831\u544a\uff0c\u4e26\u4e14\u7e73\u4ea4\u5831\u544a\u9023\u7d50\u5230\u6210\u5927 Moodle \u4f5c\u696d\u7e73\u4ea4\u5340\u4e0a</li> </ol>"},{"location":"labs/lab3/","title":"Lab 3 - Bare-metal Runtime Environment and RISC-V Assembly Programming","text":""},{"location":"labs/lab3/#chapter-1-application-binary-interface-abi","title":"Chapter 1. Application Binary Interface (ABI)","text":"<p>\u53c3\u8003</p> <p>RISC-V ABI Specification: A RISC-V ELF psABI Document</p>"},{"location":"labs/lab3/#11-what-is-abi","title":"1.1 What is ABI?","text":"<p>ABI \u5168\u7a31 Application Binary Interface\uff0c\u5e38\u5e38\u88ab\u62ff\u4f86\u548c ABI \u5c0d\u6bd4\u7684\u662f API (Application Programming Interface)\u3002 \u5c31\u5b9a\u7fa9\u4e0a\u4f86\u8aaa\uff0cABI \u57fa\u672c\u4e0a\u6700\u91cd\u8981\u7684\u90e8\u5206\u5c31\u662f\u898f\u7bc4\u4e86 Calling Convention\uff0c\u4e5f\u5c31\u662f\u51fd\u6578\u547c\u53eb\u7684\u904e\u7a0b\u4e2d\uff0c\u4e00\u7cfb\u5217\u9700\u8981\u9075\u5b88\u7684\u898f\u5b9a\uff0c\u5305\u542b\u66ab\u5b58\u5668\u7684\u4f7f\u7528\u3001\u53c3\u6578\u5982\u4f55\u50b3\u905e\uff0c\u9084\u6709 Caller-Callee Save \u7b49\u7b49\u7684\u8b70\u984c\u3002 \u4e0d\u904e\uff0c\u78ba\u5be6\u4f60\u770b\u5b8c\u9019\u4e9b\u4e4b\u5f8c\u53ef\u4ee5\u77e5\u9053 ABI \u662f\u4ec0\u9ebc\u6771\u897f\u9084\u6709 ABI \u898f\u7bc4\u4e86\u54ea\u4e9b\u6771\u897f\uff0c\u4f46\u662f\u4f60\u77e5\u9053\u70ba\u4ec0\u9ebc\u9700\u8981 ABI \u7684\u5b58\u5728\u55ce\uff1f</p> <p>\u901a\u5e38\u6703\u95dc\u5fc3 ABI \u7684\u4eba\u662f\u958b\u767c\u7de8\u8b6f\u5de5\u5177\u93c8\uff08\u5982 GCC\u3001LLVM\uff09\u3001\u958b\u767c\u4f5c\u696d\u7cfb\u7d71\u9084\u6709\u7cfb\u7d71\u51fd\u5f0f\u5eab\u7684\u958b\u767c\u8005\uff0c\u4f46\u5982\u679c\u4f60\u6703\u5728 Assembly-Level \u9032\u884c\u958b\u767c\u6216\u8005\u662f\u60f3\u8981\u5be6\u73fe\u8de8\u8a9e\u8a00\u9593\u7684\u51fd\u5f0f\u8abf\u7528\u7684\u8a71\uff0c\u4e5f\u6703\u9700\u8981\u7406\u89e3 ABI\u3002</p> <p>\u8b93\u6211\u5011\u4ee5\u53c3\u6578\u50b3\u905e\u70ba\u4f8b\u4f86\u89e3\u91cb ABI \u7684\u91cd\u8981\u6027\u3002\u5f9e CPU \u7684\u89d2\u5ea6\u4f86\u770b\uff0c\u51fd\u5f0f\u7684\u53c3\u6578\u53ef\u4ee5\u900f\u904e\u66ab\u5b58\u5668\u6216\u5806\u758a\u4f86\u50b3\u905e\u3002\u5047\u8a2d\u6211\u5011\u624b\u5beb\u4e86\u4e00\u500b\u7d44\u5408\u8a9e\u8a00\u7a0b\u5f0f\uff0c\u4e26\u5e0c\u671b\u5728\u5176\u4e2d\u547c\u53eb C \u6a19\u6e96\u51fd\u5f0f\u5eab\u4e2d\u7684 <code>printf</code> \u51fd\u6578\uff0c\u6211\u5011\u8a72\u5982\u4f55\u6b63\u78ba\u5730\u50b3\u905e\u53c3\u6578\u5462\uff1f \u5982\u679c\u6c92\u6709 ABI \u898f\u7bc4 \u51fd\u5f0f\u547c\u53eb\u7d04\u5b9a\uff08Procedure Calling Convention\uff09\uff0c\u4f60\u662f\u5426\u80fd\u78ba\u5b9a\u8a72\u4f7f\u7528\u54ea\u4e9b\u66ab\u5b58\u5668\uff0c\u6216\u662f\u8a72\u5982\u4f55\u5229\u7528\u5806\u758a\u4f86\u50b3\u905e\u53c3\u6578\uff1f</p> <p>\u82e5\u6211\u5011\u81ea\u5df1\u5047\u8a2d\u7684\u53c3\u6578\u50b3\u905e\u65b9\u5f0f\u8207\u7de8\u8b6f\u5668\u5be6\u969b\u9075\u5faa\u7684 Calling Convention \u4e0d\u4e00\u81f4\uff0c\u90a3\u9ebc\u7576\u7d44\u5408\u8a9e\u8a00\u7a0b\u5f0f\u547c\u53eb <code>printf</code> \u6642\uff0c\u53c3\u6578\u5c31\u7121\u6cd5\u6b63\u78ba\u50b3\u905e\uff0c\u5c0e\u81f4\u57f7\u884c\u932f\u8aa4\u3002 \u56e0\u6b64\uff0cABI \u7684\u5b58\u5728\u5c31\u662f\u70ba\u4e86\u63d0\u4f9b\u4e00\u5957\u6a19\u6e96\uff0c\u4f7f\u5f97\u4e0d\u540c\u8a9e\u8a00\u6216\u7de8\u8b6f\u5668\u4e4b\u9593\u53ef\u4ee5\u6b63\u78ba\u5730\u9032\u884c\u4e92\u52d5\u8207\u5354\u4f5c\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u80fd\u5920\u6b63\u5e38\u904b\u4f5c\u3002</p> <p>\u53e6\u5916\u4e00\u500b\u4f8b\u5b50\u5c31\u662f\u6211\u5011\u525b\u525b\u63d0\u5230\uff0c\u7576\u4f60\u9700\u8981\u5728\u4e0d\u540c\u7684\u7a0b\u5f0f\u8a9e\u8a00\u4e4b\u9593\u4e92\u76f8\u8abf\u7528\u51fd\u5f0f\u6642\uff0cABI \u626e\u6f14\u4e86\u81f3\u95dc\u91cd\u8981\u7684\u89d2\u8272\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5728 C++ \u7a0b\u5f0f\u4e2d\u8abf\u7528\u7528 Fortran \u6216 Rust \u5beb\u7684\u51fd\u5f0f\u3002\u5982\u679c\u6c92\u6709 ABI \u7684\u898f\u7bc4\uff0c\u4e0d\u540c\u8a9e\u8a00\u4e4b\u9593\u5c31\u7121\u6cd5\u6b63\u78ba\u5730\u50b3\u905e\u8cc7\u6599\u6216\u57f7\u884c\u51fd\u5f0f\u3002 ABI \u78ba\u4fdd\u4e86\u6bcf\u500b\u8a9e\u8a00\u7684\u7de8\u8b6f\u5668\u5728\u751f\u6210\u6a5f\u5668\u78bc\u6642\uff0c\u80fd\u5920\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8655\u7406\u51fd\u5f0f\u8abf\u7528\u3001\u53c3\u6578\u50b3\u905e\u548c\u8fd4\u56de\u503c\uff0c\u5f9e\u800c\u5be6\u73fe\u8de8\u8a9e\u8a00\u7684\u4e92\u64cd\u4f5c\u6027\u3002 \u6240\u4ee5\uff0cABI \u7684\u898f\u7bc4\u4e3b\u8981\u4f5c\u7528\u5728 Machine-Code-Level\uff0c\u6216\u8005\u8aaa\u662f\u5728\u7a0b\u5f0f\u5df2\u7d93\u88ab\u7de8\u8b6f\u70ba binary \u5f8c\u7684\u5c64\u7d1a\u3002\u5b83\u5b9a\u7fa9\u4e86\u61c9\u7528\u7a0b\u5f0f\u8207\u4f5c\u696d\u7cfb\u7d71\u6216\u5176\u4ed6\u7a0b\u5f0f\u4e4b\u9593\u7684\u4e92\u52d5\u65b9\u5f0f\uff0c\u5305\u62ec\u5982\u4f55\u50b3\u905e\u53c3\u6578\u3001\u4f7f\u7528\u66ab\u5b58\u5668\u3001\u5806\u758a\u7ba1\u7406\uff0c\u4ee5\u53ca\u51fd\u5f0f\u8fd4\u56de\u503c\u7684\u8655\u7406\u7b49\u3002\u56e0\u6b64\uff0cABI \u4e0d\u50c5\u898f\u7bc4\u4e86\u7d44\u5408\u8a9e\u8a00\u7a0b\u5f0f\u7684\u904b\u4f5c\uff0c\u4e5f\u540c\u6a23\u5f71\u97ff\u5230\u7de8\u8b6f\u5f8c\u7684\u6a5f\u5668\u78bc\uff0c\u4f7f\u4e0d\u540c\u4f86\u6e90\u7684\u7a0b\u5f0f\u78bc\u80fd\u5920\u5728\u57f7\u884c\u6642\u6b63\u78ba\u5730\u5354\u4f5c\u3002</p>"},{"location":"labs/lab3/#12-risc-v-calling-convention","title":"1.2 RISC-V Calling Convention","text":"<p>\u4f5c\u70ba\u6307\u4ee4\u96c6\u67b6\u69cb\uff0cRISC-V \u4e5f\u6709\u898f\u7bc4\u81ea\u5df1\u7684 ABI\uff0c\u6211\u5011\u5728\u63a5\u4e0b\u4f86\u4ecb\u7d39\u5176\u4e2d\u6700\u91cd\u8981\u7684\u5169\u500b\u90e8\u5206\uff0c\u5206\u5225\u662f Register Convention \u548c Procedure Calling Convention\u3002 \u4e0d\u904e\uff0cRISC-V ABI \u4e26\u4e0d\u9650\u65bc\u6211\u5011\u63d0\u5230\u7684\u9019\u5169\u500b\u90e8\u5206\uff0c\u5927\u5bb6\u5982\u679c\u5c0d\u65bc\u5b8c\u6574\u7684 RISC-V ABI \u898f\u7bc4\u6709\u8208\u8da3\u7684\u8a71\uff0c\u6b61\u8fce\u95b1\u8b80\u5b98\u65b9\u6587\u4ef6\u3002</p>"},{"location":"labs/lab3/#121-integer-register-convention","title":"1.2.1 Integer Register Convention","text":"<p>\u57fa\u672c\u4e0a\u9019\u500b\u90e8\u5206\u6709\u5169\u5927\u91cd\u9ede\uff0c\u7b2c\u4e00\u500b\u662f ABI Mnemonic\uff0c\u518d\u4f86\u5c31\u662f\u5927\u5bb6\u4e0a\u8ab2\u6703\u5b78\u5230\u7684 Caller/Callee-Saved \u7684\u6982\u5ff5\u3002 ABI Mnemonic \u7684\u547d\u540d\u898f\u5b9a\u5176\u5be6\u4e5f\u662f\u70ba\u4e86\u914d\u5408 Calling Convention\uff0c\u4e26\u4e14\u8b93 Programmer \u5728\u4f7f\u7528 RISC-V \u7d44\u5408\u8a9e\u8a00\u64b0\u5beb\u7a0b\u5f0f\u7684\u6642\u5019\u66f4\u52a0\u65b9\u4fbf \u3002\u5982\u679c\u55ae\u7d14\u770b\u9019\u4e9b\u66ab\u5b58\u5668\u7684\u5225\u540d\uff0c\u5176\u5be6\u610f\u7fa9\u4e26\u4e0d\u5927\u3002</p> <p>\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u9762\u7684\u5716\u7247\u7576\u4e2d\u6709\u4e00\u6b04\u662f Preserved across calls\uff0c\u9019\u5c0d\u61c9\u5230 Callee-saved\uff0c\u4ee5 <code>$ra</code> \u70ba\u4f8b\uff0c\u5b83\u7684 Preserved across calls \u5c6c\u6027\u88ab\u6a19\u8a18\u70ba No\uff0c\u8868\u793a Caller \u4e0d\u53ef\u4ee5\u9810\u8a2d <code>$ra</code> \u5728\u9032\u884c Procedure Calling \u4e4b\u5f8c\uff0c\u5176\u503c\u6703\u4fdd\u6301\u4e0d\u8b8a\u3002 \u4e5f\u56e0\u6b64\u7576 <code>$ra</code> \u7684\u503c\u5c0d Caller \u4f86\u8aaa\u662f\u91cd\u8981\u7684\u8a71\uff08\u4e5f\u5c31\u8868\u793a\u6703\u88ab\u7528\u5230\uff09\uff0c\u90a3\u9ebc Caller \u6709\u81ea\u5df1\u4fdd\u5b58 <code>$ra</code> \u7684\u8cac\u4efb\u3002\u63db\u53e5\u8a71\u8aaa\uff0c<code>$ra</code> \u9019\u500b\u66ab\u5b58\u5668\u662f Caller-saved\u3002</p>"},{"location":"labs/lab3/#122-procedure-calling-convention","title":"1.2.2 Procedure Calling Convention","text":"<p>Caller/Callee-saved \u7684\u6982\u5ff5\u5230\u5e95\u662f\u4ec0\u9ebc\uff1f</p> <p>Caller-saved \u8868\u793a Caller \u672c\u8eab\u5fc5\u9808\u8ca0\u8d77\u4fdd\u7559\u7279\u5b9a\u66ab\u5b58\u5668\u7684\u8cac\u4efb\u3002 \u4ee5 t0 \u66ab\u5b58\u5668\u70ba\u4f8b\uff0c\u5982\u679c\u4eca\u5929 caller \u81ea\u5df1\u6709\u4f7f\u7528\u5230 t0\uff0c\u90a3\u9ebc\u4ed6\u5728\u9032\u884c procedure calling \u4e4b\u524d\uff0c \u56e0\u70ba t0 \u662f caller-saved\uff0c\u4e5f\u5c31\u8868\u793a callee \u662f\u53ef\u4ee5\u96a8\u610f\u4f7f\u7528 t0 \u4e26\u4e14\u4e0d\u7528\u8ca0\u8d77\u4efb\u4f55\u8cac\u4efb\uff08\u4e5f\u5c31\u8868\u793a\u5373\u4f7f\u6539\u8b8a t0 \u4e5f\u4e0d\u7528\u5fa9\u539f\u5b83\uff09\uff0c \u4f46\u662f\u5c0d\u65bc caller \u4f86\u8aaa t0 \u5982\u679c\u5728\u9032\u884c procedure calling \u7136\u5f8c return \u4e4b\u5f8c\u503c\u5c31\u88ab\u6539\u8b8a\u4e86\u7684\u8a71\uff0c\u53ef\u80fd\u6703\u9020\u6210\u904b\u7b97\u932f\u8aa4\uff0c \u6240\u4ee5 caller \u5c31\u5fc5\u9808\u5728 procedure calling \u4e4b\u524d\u5148\u5229\u7528 stack \u7684\u7a7a\u9593\u4fdd\u5b58 t0 \u7684\u503c\uff0c\u9019\u6a23\u5373\u4f7f\u7d93\u904e procedure calling \u4e4b\u5f8c t0 \u88ab\u6539\u8b8a\u4e86\uff0c caller \u4f9d\u7136\u53ef\u4ee5\u5229\u7528 stack \u4e2d\u6240\u4fdd\u5b58\u7684\u8cc7\u8a0a\u4f86\u6062\u5fa9 t0 \u4e26\u7e7c\u7e8c\u9032\u884c\u904b\u7b97\u3002</p> <p>\u800c callee-saved \u7684\u6982\u5ff5\u5c31\u985e\u6bd4\u65bc caller-saved\uff0c\u5c0d\u65bc callee-saved \u7684\u66ab\u5b58\u5668\u4f86\u8aaa\uff0c\u6211\u5011\u4ee5 s0 \u70ba\u4f8b\uff0cs \u662f saved \u7684\u7c21\u5beb\uff0c\u9019\u88e1\u6240\u8aaa\u7684 saved register \u662f\u4ee5 caller \u7684\u89d2\u5ea6\u51fa\u767c\u3002 \u4e5f\u5c31\u662f\u5c0d\u65bc caller \u4f86\u8aaa\uff0c\u5b83\u53ef\u4ee5\u8a8d\u5b9a s0 ~ s11 \u9019\u5341\u4e8c\u500b\u66ab\u5b58\u5668\u662f\u70ba\u4e86 caller \u800c\u4fdd\u7559\u7684\uff0c\u56e0\u6b64 caller \u53ef\u4ee5\u5047\u8a2d\u5373\u4f7f\u7d93\u904e procedure calling\uff0c\u5728 procedure return \u4e4b\u5f8c s0 ~ s11 \u7684\u503c\u662f\u4e0d\u6703\u6539\u8b8a\u7684\u3002 \u4f46\u662f\uff0c\u5982\u679c\u70ba\u4e86\u9054\u5230\u9019\u6a23\u5b50\u7684\u9700\u6c42\u6211\u5011\u76f4\u63a5\u9650\u5236 callee \u4e0d\u53ef\u4ee5\u4f7f\u7528 s0 ~ s11 \u7684\u8a71\uff0c\u76f8\u7576\u65bc\u6709\u4e00\u5927\u90e8\u5206\u7684\u66ab\u5b58\u5668\u90fd\u4e0d\u80fd\u4f7f\u7528\u4e86\uff0c\u9019\u6a23\u5c0d\u6548\u80fd\u4e00\u5b9a\u6703\u6709\u76f8\u7576\u5927\u7684\u885d\u64ca\u3002 \u56e0\u6b64\uff0c\u5be6\u969b\u4e0a callee \u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528 saved register\uff0c\u4f46\u662f\u9019\u6642\u5019 callee \u5c31\u6709\u4e86\u4f7f\u7528\u5f8c\u5fc5\u9808\u9084\u539f\u7684\u8cac\u4efb\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u71df\u9020\u4e00\u500b\u5c0d\u65bc caller \u4f86\u8aaa\u770b\u8d77\u4f86 saved register \u4e0d\u6703\u88ab\u6539\u8b8a\u7684\u932f\u89ba\uff08illusion\uff09\u3002 \u5c0d\u65bc callee \u4f86\u8aaa\uff0c\u4e00\u6a23\u662f\u5229\u7528 stack \u4f86\u4fdd\u5b58 callee-saved register\uff0c\u5728\u9032\u5165 procedure \u7684\u6700\u4e00\u958b\u59cb\u5148\u4fdd\u5b58\u9019\u4e9b\u66ab\u5b58\u5668\u4e4b\u5f8c\u518d\u958b\u59cb\u9032\u884c\u904b\u7b97\uff0c\u7d50\u675f\u904b\u7b97\u4e4b\u5f8c\u5c07\u9019\u4e9b\u66ab\u5b58\u5668\u5fa9\u539f\u4e26\u4e14\u6062\u5fa9 stack \u4e4b\u5f8c\uff0c\u624d return \u56de\u5230 caller\u3002 \u9019\u6a23\u5c0d\u65bc caller \u4f86\u8aaa\u770b\u8d77\u4f86 saved register \u4f3c\u4e4e\u6c92\u6709\u88ab\u52d5\u904e\uff0c\u4f46\u5be6\u969b\u4e0a\u662f\u53ef\u80fd\u88ab\u4f7f\u7528\u904e\uff0c\u4f46\u662f\u53c8\u88ab\u9084\u539f\u4e86\u3002</p> <p>\u7e3d\u7d50\u4f86\u8aaa\uff0cRISC-V ABI \u7576\u4e2d\u5c0d\u65bc Function Call \u6709\u8457\u4e0b\u9762\u9019\u4e9b\u898f\u7bc4\uff08\u53ea\u8b1b\u8ff0\u6700\u70ba\u91cd\u8981\u7684\u90e8\u5206\uff09</p> <ol> <li>the contents of any register without specifying it as an argument register in the calling convention are unspecified upon entry</li> <li>the content of any register without specifying it as a return value register or callee-saved in the calling convention are unspecified upon exit</li> <li>the contents of all callee-saved registers must be restored to what was set on entry</li> <li>the contents of any fixed registers like gp and tp never change</li> <li>The base integer calling convention provides eight argument registers, a0-a7, the first two of which are also used to return values</li> <li>Scalars that are at most XLEN bits wide are passed in a single argument register, or on the stack by value if none is available.</li> <li> <p>About the stack itself</p> <ul> <li>The stack grows downwards (towards lower addresses)</li> <li>the stack pointer shall be aligned to a 128-bit boundary upon procedure entry</li> <li> <p>The first argument passed on the stack is located at offset zero of the stack pointer on function entry; following arguments are stored at correspondingly higher addresses</p> <p>\u9019\u689d\u898f\u7bc4\u91dd\u5c0d\u7684\u662f\u591a\u51fa\u4f86\u5fc5\u9808\u7528 Stack \u50b3\u905e\u7684 Function Argument\uff0c\u8981\u5f9e offset \u7b49\u65bc 0 \u958b\u59cb\uff0c\u4f46\u662f\u5982\u679c\u662f\u5728 Function Prologue &amp; Epilogue \u4fdd\u5b58\u66ab\u5b58\u5668\uff08e.g., Callee-Saved\uff09\u7684\u8a71\uff0c\u4e26\u4e0d\u7528\u9075\u5b88\u9019\u500b\u9650\u5236</p> </li> <li> <p>In the standard ABI, the stack pointer must remain aligned throughout procedure execution</p> </li> </ul> </li> </ol> <p>\u5728 Assembly Programming \u4e2d\uff0cProcedure\uff08\u6216\u7a31 Function\uff09\u901a\u5e38\uff08\u4f46\u4e0d\u4e00\u5b9a\uff09\u6703\u5305\u542b\u4e09\u500b\u90e8\u5206\uff0c\u5206\u5225\u662f Prologue\u3001Procedure Body \u9084\u6709 Epilogue\u3002\u5982\u679c\u76f4\u63a5\u64b0\u5beb C \u8a9e\u8a00\u4e2d\u7684 Function\uff0c\u901a\u5e38\u4e0d\u6703\u6ce8\u610f\u5230 Prologue \u9084\u6709 Epilogue\uff0c\u56e0\u70ba\u5728\u7de8\u8b6f\u968e\u6bb5\uff0c\u7de8\u8b6f\u5668\u5c31\u6703\u81ea\u52d5\u66ff\u6211\u5011\u7684 C Function \u52a0\u4e0a Prologue \u548c Epilogue \u4f86\u9032\u884c Stack \u548c Register \u7684\u7ba1\u7406\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u5c08\u6ce8\u5728 Procedure Body \u7684\u5be6\u4f5c\u5373\u53ef\u3002\u4f46\u662f\u7576\u6211\u5011\u4f7f\u7528\u7d44\u5408\u8a9e\u8a00\u64b0\u5beb\u7a0b\u5f0f\u7684\u6642\u5019\uff0c\u6211\u5011\u5c31\u5fc5\u9808\u81ea\u5df1\u5be6\u4f5c\u51fa Prologue \u548c Epilogue\uff0c\u9019\u6a23\u624d\u5f97\u4ee5\u9075\u5b88 Procedure Calling Convention\uff0c\u628a\u8a72\u5b58\u7684\u8cc7\u6599\u5b58\u9032 Stack \u7576\u4e2d\uff0c\u4e26\u4e14\u5728\u5fc5\u8981\u7684\u6642\u5019\u5c07\u8cc7\u6599\u9084\u539f\u3002</p> <p>\u53c3\u8003</p> <p>\u5728\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0cfunction prologue \u548c epilogue \u662f\u51fd\u6578\u9032\u5165\u8207\u9000\u51fa\u7684\u904e\u7a0b\u3002\u9019\u4e9b\u6b65\u9a5f\u4e3b\u8981\u8207\u5806\u758a\u7684\u4f7f\u7528\u548c\u5bc4\u5b58\u5668\u7684\u4fdd\u5b58\u6709\u95dc\uff0c\u662f\u7de8\u8b6f\u5668\u5728\u751f\u6210\u7d44\u5408\u8a9e\u8a00\u6216\u6a5f\u5668\u78bc\u6642\u81ea\u52d5\u6dfb\u52a0\u7684\uff0c\u4ee5\u4fbf\u78ba\u4fdd\u51fd\u6578\u80fd\u6b63\u78ba\u5730\u547c\u53eb\u8207\u8fd4\u56de\uff0c\u4e14\u4e0d\u5f71\u97ff\u4e3b\u7a0b\u5f0f\u7684\u5176\u4ed6\u90e8\u5206\u3002</p> <p>\u53c3\u8003\uff1aWikipedia - Function prologue and epilogue</p>"},{"location":"labs/lab3/#123-case-study-calculation-of-fibonacci-number","title":"1.2.3 Case Study - Calculation of Fibonacci Number","text":"<p>\u53c3\u8003\u7de8\u8b6f\u6307\u4ee4</p> <ul> <li><code>riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -S -O0 -fomit-fram-pointer &lt;file-name&gt;</code><ul> <li>\u4f60\u53ef\u4ee5\u8a66\u8a66\u770b\u628a <code>-fomit-frame-pointer</code> \u5f9e\u6307\u4ee4\u4e2d\u79fb\u9664\u4e26\u4e14\u518d\u6b21\u7de8\u8b6f\uff0c\u89c0\u5bdf\u7522\u751f\u51fa\u7684 assembly code \u767c\u751f\u4e86\u4ec0\u9ebc\u8b8a\u5316\uff1f\uff08\u95dc\u9375\u5b57\uff1aRISC-V Frame-Pointer\uff09</li> <li>Frame-Pointer is not necessary but useful for debugging</li> </ul> </li> </ul> <pre><code>unsigned long fib(unsigned long n) {\n    if (n &lt; 2) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n</code></pre> <p>\u8cbb\u6ce2\u90a3\u5951\u6578\u5217\u5e38\u5e38\u88ab\u4f5c\u70ba Assembly Programing \u7684\u7d93\u5178\u984c\u76ee\uff0c\u751a\u81f3\u8003\u7814\u7a76\u6240\u7684\u984c\u76ee\u4e5f\u66fe\u7d93\u51fa\u73fe\u904e\u3002 \u4f46\u662f\uff0c\u9019\u500b\u7a0b\u5f0f\u537b\u4e5f\u5e38\u5e38\u8b93\u4eba\u770b\u4e0d\u51fa\u4f86\u95dc\u65bc Caller-saved \u548c Callee-saved \u7684\u754c\u7dda\uff0c\u4e5f\u5c31\u662f\u8aaa\u770b\u4e0d\u51fa\u4f86\u5230\u5e95\u8ab0\u662f Caller \u800c\u8ab0\u662f Callee\u3002</p> <pre><code>    .file   \"fib.c\"\n    .text\n    .align  2\n    .globl  fib\n    .type   fib, @function\nfib:\n    # prologue\n    addi    sp,sp,-32\n    sd  ra,24(sp)\n    sd  s0,16(sp)\n    sd  a0,8(sp)\n    # function body\n    ld  a4,8(sp)\n    li  a5,1\n    bgtu    a4,a5,.L2\n    ld  a5,8(sp)\n    j   .L3\n.L2:\n    ld  a5,8(sp)\n    addi    a5,a5,-1\n    mv  a0,a5\n    call    fib\n    mv  s0,a0\n    ld  a5,8(sp)\n    addi    a5,a5,-2\n    mv  a0,a5\n    call    fib\n    mv  a5,a0\n    add a5,s0,a5\n.L3:\n    # epilogue\n    mv  a0,a5\n    ld  ra,24(sp)\n    ld  s0,16(sp)\n    addi    sp,sp,32\n    jr  ra\n</code></pre> <p>\u6703\u9020\u6210\u6df7\u6dc6\u6700\u6839\u672c\u7684\u539f\u56e0\u662f\u56e0\u70ba <code>fib</code> \u9019\u500b function \u672c\u8eab\u662f\u4e00\u500b Recursive Function\uff0c\u63db\u53e5\u8a71\u8aaa fib \u540c\u6642\u662f Caller \u4e5f\u662f Callee\uff0c\u56e0\u70ba\u4ed6\u6703\u547c\u53eb\u81ea\u8eab\uff08call itself\uff09\uff0c\u6240\u4ee5\u4e5f\u6703\u9020\u6210 Caller-saved \u548c Callee-saved \u9019\u5169\u500b\u90e8\u5206\u53ef\u4ee5\u88ab\u653e\u5728\u4e00\u8d77\u3002 \u6211\u5011\u89c0\u5bdf\u4e0a\u9762\u7684\u7d44\u5408\u8a9e\u8a00\u53ef\u4ee5\u770b\u5230\u5728 Function Prologue \u7684\u90e8\u5206\uff0c\u4fdd\u5b58\u4e86\u66ab\u5b58\u5668 ra\u3001s0 \u548c a0\uff0c\u6211\u5011\u67e5\u95b1\u524d\u9762\u63d0\u5230\u7684 Integer Register Convention \u53ef\u4ee5\u767c\u73fe\u53ea\u6709 s0 \u662f Callee-saved\uff0c\u4f46\u662f ra \u548c a0 \u5176\u5be6\u90fd\u662f Caller-saved\u3002 \u4e0d\u904e\u5728 GCC \u6240\u7522\u751f\u7684\u7d44\u5408\u8a9e\u8a00\u7576\u4e2d\uff0c\u6211\u5011\u53ef\u4ee5\u770b\u5230\u9019\u5169\u500b\u90e8\u5206\u90fd\u88ab\u653e\u5230\u4e86 Prologue \u7576\u4e2d\u3002</p>"},{"location":"labs/lab3/#case-study-c-assembly-hybrid-programming","title":"Case Study - C-Assembly Hybrid Programming","text":"<p>\u5728\u7cfb\u7d71\u8edf\u9ad4\u7684\u958b\u767c\u4e2d\uff0c\u5c24\u5176\u50cf\u662f\u4f5c\u696d\u7cfb\u7d71\u6216\u662f\u9a45\u52d5\u7a0b\u5f0f\uff08Driver\uff09\uff0c\u5e38\u5e38\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u7d44\u5408\u8a9e\u8a00\u5be6\u4f5c\u90e8\u5206\u7684 Function\uff0c\u4e26\u4e14\u5728 C \u8a9e\u8a00\u4e2d\u547c\u53eb\u9019\u4e9b\u7528\u7d44\u5408\u8a9e\u8a00\u5be6\u4f5c\u7684 Function\u3002 \u6211\u5011\u7a31\u9019\u7a2e\u958b\u767c\u60c5\u5883\u53eb\u505a C-Assembly Hybrid Programming\uff0c\u5728\u9019\u7a2e\u60c5\u5883\u5e95\u4e0b\u9075\u5b88 ABI \u5c31\u986f\u5f97\u7279\u5225\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5c0d\u65bc\u64b0\u5beb\u7d44\u5408\u8a9e\u8a00\u7684\u958b\u767c\u8005\u4f86\u8aaa\u3002</p> <pre><code>extern int sum(int a, int b, int c);\n\nint foo(void) {\n    return sum(1, 2, 3);\n}\n</code></pre> <p>\u5047\u8a2d\u6211\u5011\u4f7f\u7528 RISC-V Assembly \u4f86\u5b8c\u6210 <code>int sum(int, int, int)</code> \u7684\u5be6\u4f5c\uff0c\u4e26\u4e14\u5728 C Source Code \u4e2d\u547c\u53eb <code>sum()</code>\uff0c\u6211\u5011\u5148\u628a <code>foo()</code> \u9019\u500b\u51fd\u5f0f\u7de8\u8b6f\u6210\u53ea\u4f7f\u7528 RV64I \u6307\u4ee4\u7684\u7d44\u5408\u8a9e\u8a00</p> <pre><code>    .file   \"foo.c\"\n    .text\n    .align  2\n    .globl  foo\n    .type   foo, @function\nfoo:\n    # function prologue\n    addi sp,sp,-16\n    sd ra,8(sp)\n    # function body\n    li a2,3\n    li a1,2\n    li a0,1\n    call sum\n    mv a5,a0\n    mv a0,a5\n    # function epilogue\n    ld ra,8(sp)\n    addi sp,sp,16\n    jr ra # alias for: jalr x0, ra, 0\n</code></pre> <p>\u6211\u5011\u53ef\u4ee5\u770b\u5230 GCC C Compiler \u5c07\u9019\u6bb5 C \u8a9e\u8a00\u7a0b\u5f0f\u78bc\u8f49\u63db\u6210 RV64I \u7d44\u5408\u8a9e\u8a00\u7684\u6642\u5019\uff0c\u4f7f\u7528\u4e86 a0\u3001a1 \u548c a2 \u4f86\u50b3\u905e\u53c3\u6578\u7d66 sum \u51fd\u5f0f\u3002 \u9032\u5165 sum \u51fd\u5f0f\u4e4b\u5f8c\uff0c\u5148\u5728 stack \u4e0a\u5206\u914d\u4e86 16-bytes \u7684\u7a7a\u9593\uff0c\u4e26\u4e14\u4f7f\u7528\u5176\u4e2d\u4e00\u500b double-word \u5927\u5c0f\u7684\u7a7a\u9593\u4f86\u4fdd\u5b58 ra\uff0c\u4e26\u4e14\u5c07\u53c3\u6578\u5229\u7528 load-immediate (<code>li</code>) \u6307\u4ee4\u8f09\u5165\u66ab\u5b58\u5668\u4e4b\u5f8c\uff0c\u5229\u7528 <code>call</code> \u9019\u500b pseudo-instruction \u4f86\u547c\u53eb\u51fd\u5f0f <code>sum</code>\uff0c \u4e4b\u5f8c\u518d\u5c07 a0 \u7684\u503c\u8907\u88fd\u5230 a5\uff0c\u4e26\u4e14\u518d\u5c07 a5 \u7684\u503c\u8907\u88fd\u56de a0\uff0c\u4e4b\u5f8c\u4fbf\u6062\u5fa9\u539f\u672c ra \u7684\u503c\uff0c\u7136\u5f8c\u5c31 return\uff08\u5c0d\u61c9\u5230 <code>jr ra</code>\uff09\uff0c\u7531\u6b64\u4e5f\u53ef\u4ee5\u770b\u51fa\u9019\u88e1\u4e00\u6a23\u9075\u5b88 RISC-V ABI \u7684\u898f\u7bc4\uff0c\u5c07 return value \u5b58\u653e\u5728 a0 \u7576\u4e2d\u3002</p> <p>\u5982\u679c\u4eca\u5929\u6c92\u6709\u4e00\u5957\u660e\u78ba\u7684\u898f\u7bc4\uff0c\u5c24\u5176\u662f\u91dd\u5c0d Calling Convention\uff0c\u90a3\u9ebc\u5c0d\u65bc\u4f7f\u7528 assembly code \u5be6\u4f5c sum \u51fd\u5f0f\u7684\u9019\u500b\u4eba\u4f86\u8aaa\u5c31\u6703\u975e\u5e38\u82e6\u60f1\uff0c\u56e0\u70ba\u4ed6\u6703\u4e0d\u77e5\u9053\u5230\u5e95\u53c3\u6578\u900f\u904e\u54ea\u4e9b\u66ab\u5b58\u5668\u50b3\u905e\u3001\u4e0d\u77e5\u9053\u4ed6\u8a72\u8ca0\u8d77\u54ea\u4e9b\u8cac\u4efb\u4fdd\u8b49\u54ea\u4e9b\u66ab\u5b58\u5668\u7684\u503c\u6703\u5728\u51fd\u5f0f\u8abf\u7528\u7684\u524d\u5f8c\u4fdd\u6301\u4e00\u81f4\uff0c\u9084\u6709\u50b3\u56de return value \u7684\u6642\u5019\u53c8\u8a72\u653e\u5728\u54ea\u500b\u66ab\u5b58\u5668\u3002 \u4ee5\u4e0b\u6211\u5011\u9075\u5b88 ABI \u7684\u898f\u7bc4\uff0c\u793a\u7bc4\u4e00\u500b sum \u51fd\u5f0f\u7684\u7d44\u5408\u8a9e\u8a00\u5be6\u4f5c\u3002</p> <pre><code>    .file    sum.s\n    .text\n    .align   2\n    .global  sum\n    .type    sum, @function\nsum:\n    # function prologue\n    addi sp, sp, -16\n    sd s0, 0(sp)\n    # function body\n    mv s0, a0\n    add s0, s0, a1\n    add s0, s0, a2\n    mv a0, s0\n    # function epilogue\n    ld s0, 0(sp)\n    addi sp, sp, 16\n    ret\n</code></pre> <p>\u5982\u6b64\u4e00\u4f86\uff0c\u5373\u4f7f\u6211\u5011\u662f\u4f7f\u7528 assembly \u5be6\u4f5c sum \u51fd\u5f0f\uff0c\u4f46\u662f\u56e0\u70ba\u6211\u5011\u56b4\u683c\u4f9d\u7167 RISC-V ABI \u898f\u7bc4\u53bb\u5be6\u4f5c\uff0c\u5c31\u53ef\u4ee5\u548c\u4ee5 C \u8a9e\u8a00\u64b0\u5beb\u7684 foo \u51fd\u5f0f\u4e92\u76f8\u914d\u5408\uff0c\u800c\u4e0d\u6703\u51fa\u73fe\u932f\u8aa4\u3002</p> <p>\u518d\u8b93\u6211\u5011\u770b\u4e00\u500b\u66f4\u6975\u7aef\u7684\u4f8b\u5b50\uff0c\u5047\u8a2d\u6211\u5011\u6709\u516b\u500b\u4ee5\u4e0a\u7684\u53c3\u6578\u8981\u9032\u884c\u50b3\u905e\u7684\u8a71\uff0c\u4f9d\u7167\u524d\u9762\u7684\u8ad6\u8ff0\uff0c\u5982\u679c a0 ~ a7 \u9019\u516b\u500b\u66ab\u5b58\u5668\u4e0d\u6577\u4f7f\u7528\u7684\u8a71\uff0c\u6703\u4f7f\u7528 Stack \u4f86\u50b3\u905e\u5269\u9918\u53c3\u6578\u3002\u8003\u616e\u4ee5\u4e0b C Code\uff1a</p> <pre><code>extern int sum(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k);\n\nint foo(void){\n    return sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}\n</code></pre> <p>\u4f7f\u7528 <code>riscv64-unknown-elf-gcc -march=rv64i -mabi=lp64 -O0 -fomit-frame-pointer -S foo.c</code>\uff0c\u6211\u5011\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u7684\u7d50\u679c</p> <pre><code>    .option nopic\n    .text\n    .align  2\n    .globl  foo\n    .type   foo, @function\nfoo:\n    # allocate 32-bytes in the stack to pass last two arguments\n    addi    sp,sp,-32\n    sd  ra,24(sp)\n    li  a5,10\n    sd  a5,8(sp)\n    li  a5,9\n    sd  a5,0(sp)\n    # pass the first 8 arguments by using a0 ~ a7\n    li  a7,8\n    li  a6,7\n    li  a5,6\n    li  a4,5\n    li  a3,4\n    li  a2,3\n    li  a1,2\n    li  a0,1\n    call    sum\n    mv  a5,a0\n    mv  a0,a5\n    ld  ra,24(sp)\n    addi    sp,sp,32\n    jr  ra\n</code></pre> <p>\u6839\u64da\u524d\u9762\u6211\u5011\u63d0\u5230 RISC-V ABI \u7684\u898f\u5247\uff0c\u5728\u7576\u4f7f\u7528 Stack \u9032\u884c\u53c3\u6578\u50b3\u905e\u7684\u6642\u5019\uff0c\u7b2c\u4e00\u500b\u8981\u653e\u9032 Stack \u4e2d\u7684\u53c3\u6578\u61c9\u8a72\u653e\u5728 offset \u7b49\u65bc 0 \u7684\u4f4d\u7f6e\uff0c\u800c\u6839\u64da\u4e0a\u9762\u7684 Assembly Code\uff0c\u5b83\u78ba\u5be6\u628a\u7b2c\u4e5d\u500b\u53c3\u6578\uff0c\u5e38\u6578 9 \u653e\u5728 stack \u4e2d offset \u70ba 0 \u7684\u4f4d\u7f6e\uff0c\u5c0d\u61c9\u5230 <code>li a5, 9</code> \u548c <code>sd a5, 0(sp)</code>\uff0c\u7b26\u5408 RISC-V ABI \u7684\u898f\u7bc4\u3002</p> <p>More about ABI - Named ABI and C/C++ Type Details</p> <p>\u7de8\u8b6f\u7684\u6642\u5019\uff0c\u50b3\u5165\u7684 options \u4e2d\u7684\u5176\u4e2d\u4e00\u500b <code>-mabi=lp64</code> \u529f\u80fd\u5230\u5e95\u662f\u4ec0\u9ebc\uff1f</p> <p>ABI \u9664\u4e86\u898f\u7bc4\u6211\u5011\u524d\u9762\u63d0\u5230\u7684 Register Convention \u548c Procedure Calling Convention \u4ee5\u5916\uff0c\u4e5f\u898f\u7bc4\u4e86 C/C++ Type Details\u3002 \u5728 Type Details \u7576\u4e2d\uff0c\u898f\u7bc4\u4e86 C/C++ \u4e2d\u5404\u7a2e\u4e0d\u540c Data Types \u7684 size \u548c alignment\u3002</p> <p>LP64, LP64F, LP64D, and LP64Q: Use the following type sizes and alignments (based on the LP64 convention):</p> Type Size (Bytes) Alignment (Bytes) Note bool/_Bool 1 1 char 1 1 short 2 2 int 4 4 long 8 8 long long 8 8 __int128 16 16 void * 8 8 __bf16 2 2 Half precision floating point (bfloat16) _Float16 2 2 Half precision floating point (binary16 in IEEE 754-2008) float 4 4 Single precision floating point (binary32 in IEEE 754-2008) double 8 8 Double precision floating point (binary64 in IEEE 754-2008) long double 16 16 Quadruple precision floating point (binary128 in IEEE 754-2008) float _Complex 8 4 double _Complex 16 8 long double _Complex 32 16 <p>\u4ee5 RV64 \u4f86\u8aaa\uff0c\u7e3d\u5171\u5b9a\u7fa9\u4e86 LP64\u3001LD64F\u3001LP64D \u548c LP64Q \u9019\u56db\u7a2e Named ABI\uff0c\u4ed6\u5011\u7684 Type Details \u90fd\u57fa\u65bc\u4e0a\u9762\u7684\u8868\u683c\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f F\u3001D \u548c Q \u4ee3\u8868\u662f\u5426\u4f7f\u7528 RISC-V \u7684\u6d6e\u9ede\u6578\u64f4\u5c55\uff08Extension\uff09\u3002 \u4ee5 LP64 \u70ba\u4f8b\uff0cL \u4ee3\u8868 Long \u4e14 P \u4ee3\u8868 Pointer\uff0c\u6240\u4ee5 LP64 \u4ee3\u8868 Long \u548c Pointer \u7684\u9577\u5ea6\u90fd\u662f 64-bit\u3002 \u6211\u5011\u4ee5 <code>unsigned int</code> \u548c <code>unsigned long</code> \u70ba\u4f8b\uff0c\u5728 LP64 \u7684\u898f\u7bc4\u4e2d\uff0c\u524d\u8005\u7684\u9577\u5ea6\u662f 32-bit \u800c\u5f8c\u8005\u662f 64-bit\uff0c\u9019\u6a23\u7684\u5dee\u7570\u6703\u76f4\u63a5\u5f71\u97ff\u5230\u5169\u8005\u53ef\u4ee5\u8868\u793a\u7684\u503c\u57df\u7bc4\u570d\u3002 \u53ea\u4e0d\u904e\u5c31\u7b97\u6211\u5011\u5728\u5beb\u7a0b\u5f0f\u7684\u6642\u5019\u4f7f\u7528\u7684\u662f 32-bit \u9577\u5ea6\u751a\u81f3\u662f\u66f4\u5c0f\u7684 data type\uff0c\u9084\u662f\u4f9d\u7136\u6703\u88ab\u8f09\u5165\u5230 64-bit \u7684\u66ab\u5b58\u5668\u4e2d\u518d\u9032\u884c\u904b\u7b97\u3002 </p>"},{"location":"labs/lab3/#chapter-2-bare-metal-runtime-environment","title":"Chapter 2. Bare-metal Runtime Environment","text":"<p>\u4ee5\u76ee\u524d\u6211\u5011\u5be6\u4f5c\u7684 Simple RISC-V ISA Simulator \u4f86\u8aaa\uff0c\u5df2\u7d93\u5177\u5099\u6700\u57fa\u672c\u7684\u6574\u6578\u904b\u7b97\u529f\u80fd\uff0c\u9084\u6709\u8f38\u51fa\u8f38\u5165\u7684\u529f\u80fd\uff0c\u90a3\u662f\u5426\u4ee3\u8868\u6211\u5011\u5df2\u7d93\u53ef\u4ee5\u7528\u9019\u500b Simulator \u4f86\u57f7\u884c\u5404\u7a2e\u7a0b\u5f0f\u4e86\uff1f \u9019\u500b\u554f\u984c\u6538\u95dc\u65bc\u5716\u9748\u5b8c\u5099\u6027\uff08Turing Complete\uff09\u3002\u7c21\u55ae\u4f86\u8aaa\uff0c\u76ee\u524d\u6211\u5011\u6240\u5be6\u4f5c\u7684 ISS \u5df2\u7d93\u5177\u5099\u57fa\u672c\u7684\u7b97\u8853\u6307\u4ee4\u3001\u5206\u652f\u6307\u4ee4\uff08Branch &amp; Dump\uff09\u9084\u6709 Load/Store \u6307\u4ee4\uff0c \u6240\u4ee5\u5df2\u7d93\u53ef\u4ee5\u6a21\u64ec\u4e00\u500b\u5716\u9748\u6a5f\uff08Turing Machine\uff09\u7684\u904b\u4f5c\uff0c\u53ef\u4ee5\u89e3\u6c7a\u901a\u7528\u8a08\u7b97\u554f\u984c\u3002 \u518d\u52a0\u4e0a\u6211\u5011\u5229\u7528 ECALL \u6307\u4ee4\u7684\u5be6\u4f5c\u8ce6\u4e88\u6211\u5011\u7684\u7cfb\u7d71 I/O \u7684\u529f\u80fd\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u66f4\u8f15\u6613\u5730\u89c0\u5bdf\u7cfb\u7d71\u7684\u904b\u4f5c\u4e26\u4e14\u548c\u7cfb\u7d71\u9032\u884c\u4e92\u52d5\u3002</p> <p>\u4f46\u662f\uff0c\u5373\u4f7f\u6211\u5011\u7684 ISS \u5df2\u7d93\u5177\u5099\u8a08\u7b97\u4efb\u4f55\u53ef\u8a08\u7b97\u554f\u984c\u7684\u80fd\u529b\u4e86\uff0c\u4f46\u6709\u4e00\u500b\u4ee4\u4eba\u982d\u75bc\u7684\u554f\u984c\u662f\uff0c\u5728\u9019\u6a23\u7684\u7cfb\u7d71\u4e0a\u9762\u9032\u884c\u958b\u767c\u5bb9\u6613\u55ce\uff1f \u4e0d\u8ad6\u662f\u958b\u767c CPU\uff0c\u6216\u662f\u958b\u767c\u5404\u5f0f\u5404\u6a23\u4e0d\u540c\u5f62\u5f0f\u7684\u8a08\u7b97\u6a5f\u7cfb\u7d71\uff0c\u6211\u5011\u7d42\u7a76\u9700\u8981\u5728\u5176\u4e0a\u958b\u767c\u8edf\u9ad4\uff0c\u4f7f\u5176\u53ef\u4ee5\u4f9d\u7167\u6211\u5011\u60f3\u8981\u7684\u65b9\u5f0f\u9032\u884c\u904b\u4f5c\uff0c\u56e0\u6b64\u95dc\u6ce8\u958b\u767c\u5bb9\u6613\u7a0b\u5ea6\u662f\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\u3002</p> <p>Success</p> <p>\u9019\u500b\u554f\u984c\u53ef\u4ee5\u9032\u4e00\u90e8\u63a2\u8a0e\u5230\u4f5c\u696d\u7cfb\u7d71\u7684\u8a95\u751f\uff0c\u9084\u6709\u5404\u5f0f\u5404\u6a23\u7cfb\u7d71\u8edf\u9ad4\u7684\u767c\u5c55\u3002</p> <p>\u56de\u61b6\u4e00\u4e0b\u52a9\u6559\u5728 Lab 2 \u63d0\u4f9b\u7684\u7bc4\u4f8b\u7a0b\u5f0f <code>hello.c</code>\uff0c\u5b83\u53ef\u4ee5\u4f7f ISS \u8f38\u51fa <code>Hello, World!</code> \u4e26\u7d50\u675f\uff0c\u9019\u500b\u7a0b\u5f0f\u7684\u539f\u59cb\u78bc\u5982\u4e0b\uff1a</p> <pre><code>int main(void) {\n    /* print the string \"Hello, World!\\n\" and ends the program */\n    asm volatile(\"li a0, 1\\n\"\n                 \"li a1, 'H'\\n\" // 'H'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'e'\\n\" // 'e'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'l'\\n\" // 'l'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'l'\\n\" // 'l'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'o'\\n\" // 'o'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, ','\\n\" // ','\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, ' '\\n\" // ' '\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'W'\\n\" // 'W'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'o'\\n\" // 'o'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'r'\\n\" // 'r'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'l'\\n\" // 'l'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, 'd'\\n\" // 'd'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, '!'\\n\" // '!'\n                 \"ecall\\n\"\n                 \"li a0, 1\\n\"\n                 \"li a1, '\\n'\\n\" // '\\n'\n                 \"ecall\\n\"\n                 \"li a0, 0\\n\"\n                 \"ecall\\n\" // end the program\n    );\n}\n</code></pre> <p>\u5728\u5927\u5bb6\u7684\u8a18\u61b6\u4e2d\u672c\u61c9\u8a72\u53ea\u9700\u8981 <code>#include &lt;stdio.h&gt;</code> \u548c <code>printf(\"Hello, World!\\n\")</code> \u5c31\u597d\u4e86\uff0c\u70ba\u4ec0\u9ebc\u73fe\u5728\u9700\u8981\u5beb\u9019\u9ebc\u591a\u7a0b\u5f0f\u78bc\uff0c\u751a\u81f3\u9700\u8981\u624b\u5beb\u7d44\u5408\u8a9e\u8a00\u624d\u80fd\u9054\u5230\u4e00\u6a23\u7684\u529f\u80fd\uff1f \u6211\u5011\u63db\u500b\u65b9\u5f0f\u601d\u8003\uff0c\u5176\u5be6\u6240\u6709\u5728 CPU \u4e0a\u9762\u904b\u4f5c\u7684\u7a0b\u5f0f\u90fd\u6703\u5148\u88ab Compiler \u7de8\u8b6f\u6210\u5c0d\u61c9\u7279\u5b9a\u6307\u4ee4\u96c6\u67b6\u69cb\u7684\u7d44\u5408\u8a9e\u8a00\uff0c\u7136\u5f8c\u518d\u7d93\u7531 Assembler \u8f49\u63db\u6210\u6a5f\u68b0\u78bc\u4e4b\u5f8c\uff0c\u6700\u5f8c\u624d\u5f97\u4ee5\u904b\u884c\u5728 CPU \u4e4b\u4e0a\uff0c\u56e0\u70ba\u7279\u5b9a\u7684\u6307\u4ee4\u624d\u662f CPU \u5f97\u4ee5\u89e3\u8b80\u7684\u8cc7\u8a0a\u3002 \u6240\u4ee5\uff0c\u4f7f\u7528\u7d44\u5408\u8a9e\u8a00\u64b0\u5beb\u4efb\u4f55\u7a0b\u5f0f\u5176\u5be6\u662f\u4e00\u4ef6\u7b26\u5408\u76f4\u89ba\u5f97\u4e8b\u60c5\u3002\u4f46\u662f\u6211\u5011\u4e4b\u6240\u4ee5\u5f88\u5c11\u9019\u6a23\u505a\u7684\u539f\u56e0\u5c31\u662f\u56e0\u70ba\uff0c\u9019\u6a23\u505a\u6548\u7387\u592a\u4f4e\u4e86\uff01 \u5728\u4f60\u4e4b\u524d\u5beb\u7a0b\u5f0f\u7684\u8a18\u61b6\u7576\u4e2d\uff0c\u4f60\u96a8\u610f\u547c\u53eb\u7684\u4e00\u500b C Standard Library \u4e2d\u7684 Function \u80cc\u5f8c\u53ef\u80fd\u90fd\u5c0d\u61c9\u5230\u4e0a\u842c\u689d\u7d44\u5408\u8a9e\u8a00\uff0c\u4f60\u6709\u8fa6\u6cd5\u60f3\u50cf\u9019\u5e7e\u842c\u689d\u6307\u4ee4\u90fd\u9760\u4f60\u624b\u52d5\u81ea\u5df1\u4e00\u500b\u4e00\u500b\u5beb\u51fa\u4f86\u55ce\uff0c\u986f\u7136\u9019\u662f\u4e0d\u5207\u5be6\u969b\u7684\u3002</p>"},{"location":"labs/lab3/#21-hardware-dependent-core-library","title":"2.1 Hardware-Dependent Core Library","text":"<p>\u76ee\u524d\u5c0d\u6211\u5011\u7684 ISA Simulator \u4f86\u8aaa\uff0c\u76f4\u63a5\u548c\u786c\u9ad4\u76f8\u95dc\u7684\u4e26\u4e14\u6211\u5011\u9700\u8981\u7684\u64cd\u4f5c\u6709\u5169\u500b</p> <ol> <li>\u63a7\u5236 ISS \u662f\u5426\u505c\u6b62\u57f7\u884c\u6307\u4ee4\uff08Halt\uff09<ul> <li>\u56e0\u70ba ISS \u672c\u8eab\u6703\u4e0d\u65b7\u5730\u91cd\u8907\u57f7\u884c\u6307\u4ee4\u7684\u9019\u500b\u6b65\u9a5f\uff0c\u56e0\u6b64\u5fc5\u9808\u8981\u63d0\u4f9b\u4e00\u500b\u6a5f\u5236\uff0c\u4f86\u544a\u8a34 ISS \u4ec0\u9ebc\u6642\u5019\u61c9\u8a72\u8981\u505c\u4e0b\u4f86\uff0c\u4e26\u4e14\u5c07\u63a7\u5236\u6b0a\u8f49\u79fb\u56de User \u624b\u4e0a</li> </ul> </li> <li>I/O \u76f8\u95dc\u529f\u80fd\uff08\u8f38\u51fa\u3001\u8f38\u5165\uff09<ul> <li>\u76ee\u524d\u50c5\u5be6\u4f5c\u8f38\u51fa\u7684\u529f\u80fd\uff0c\u66ab\u6642\u4e0d\u5be6\u4f5c\u8f38\u5165\u529f\u80fd</li> <li>\u8f38\u51fa\u76f8\u95dc\u7684\u51fd\u6578\u5982 <code>putchar</code>\u3001<code>putint</code> \u548c <code>printf</code></li> </ul> </li> </ol> <p>Use abstraction to simplify design. ----- 8 Great Ideas in Computer Architecture, By David A. Patterson, PhD</p> core.h<pre><code>#ifndef __CORE_H__\n#define __CORE_H__\n\n#include &lt;stdint.h&gt;\n\n/* system call enumeration list */\n#define SYS_EXIT 0\n#define SYS_PUTC 1\n\nstatic inline void __internal_syscall(uint64_t arg0, uint64_t arg1) {\n    register uint64_t a0 asm(\"a0\") = arg0;\n    register uint64_t a1 asm(\"a1\") = arg1;\n    asm volatile(\"ecall\" ::\"r\"(a0), \"r\"(a1) :);\n}\n\n#define SYSCALL_1(A0) __internal_syscall(A0, 0)\n#define SYSCALL_2(A0, A1) __internal_syscall(A0, A1)\n\n/* function used to exit the current running program */\nextern void terminate(void) __attribute__((noreturn));\n\n/* basic output function (single character as unit) */\nextern void platform_outb(char c);\n\n#endif\n</code></pre> <p>\u5728 <code>core.h</code> \u4e2d\u6211\u5011\u9996\u5148\u5b9a\u7fa9\u4e86 <code>__internal_syscall</code> \u9019\u500b\u51fd\u5f0f\uff0c\u4f5c\u70ba\u786c\u9ad4\u76f8\u95dc\u51fd\u5f0f\u547c\u53eb\u7684\u57fa\u790e\uff0c\u7136\u5f8c\u57fa\u65bc\u53c3\u6578\u500b\u6578\u7684\u4e0d\u540c\uff0c\u6211\u5011\u53c8\u5206\u5225\u5b9a\u7fa9\u4e86 <code>SYSCALL_1</code> \u548c <code>SYSCALL_2</code>\u3002 \u63a5\u4e0b\u4f86\u6211\u5011\u5ba3\u544a\uff08Declare\uff09\u4e86\u6700\u91cd\u8981\u7684\u5169\u500b\u51fd\u5f0f\uff0c\u5206\u5225\u662f <code>terminate</code> \u7528\u4f86\u4f5c\u70ba RISC-V Program \u7d50\u675f\u6642\u61c9\u8a72\u8981\u4e3b\u52d5\u547c\u53eb\u7684\u51fd\u5f0f\uff0c\u4ee5\u8b93 ISS \u505c\u4e0b\u3002 \u800c <code>platform_outb</code> \u5247\u53ef\u4ee5\u5411 ISS \u767c\u51fa\u8acb\u6c42\uff0c\u8acb\u5176\u5e6b\u5fd9\u5370\u51fa\u4e00\u500b\u5b57\u5143\uff08character\uff09\u3002</p> <p>\u56e0\u70ba <code>char</code> \u7684\u5927\u5c0f\u70ba\u4e00\u500b byte\uff0c\u56e0\u6b64\u8a72\u51fd\u6578\u7684\u5f8c\u7db4 outb \u4ee3\u8868\u7684\u542b\u7fa9\u662f output byte\u3002</p> core.c<pre><code>#include \"core.h\"\n\nvoid terminate(void) {\n    for (;;) {\n        SYSCALL_1(SYS_EXIT);\n    }\n}\n\nvoid platform_outb(char c) { SYSCALL_2(SYS_PUTC, c); }\n</code></pre> <p>\u5728 <code>core.c</code> \u4e2d\u6211\u5011\u5b9a\u7fa9\uff08Define\uff09\u4e86 <code>terminate</code> \u548c <code>platform_outb</code>\u3002\u56e0\u70ba <code>terminate</code> \u53ea\u9700\u8981\u50b3\u5165\u4e00\u500b\u53c3\u6578\uff0c\u4e5f\u5c31\u662f\u66ab\u5b58\u5668 $a0 \u7684\u503c\uff0c\u66f4\u7cbe\u78ba\u5730\u8aaa\u662f\u5c07 $a0 \u8a2d\u70ba 0\uff0c\u6240\u4ee5\u5be6\u4f5c\u4e0a\u6211\u5011\u4f7f\u7528 <code>SYSCALL_1</code>\u3002 \u800c\u6839\u64da Lab 2 \u5c0d ISS \u7684\u5be6\u4f5c\u898f\u7bc4\uff0c\u6211\u5011\u53ef\u4ee5\u5f97\u77e5 <code>platform_outb</code> \u8981\u5728\u547c\u53eb ECALL \u6307\u4ee4\u4e4b\u524d\u5c07 $a0 \u8a2d\u6210 1\uff0c\u4e26\u4e14\u5c07\u6b32\u5370\u51fa\u7684\u5b57\u5143\u7684\u6578\u503c\u653e\u9032 $a1 \u7576\u4e2d\uff0c\u56e0\u6b64\u6211\u5011\u4f7f\u7528 <code>SYSCALL_2</code>\u3002</p>"},{"location":"labs/lab3/#22-hareware-independent-library","title":"2.2 Hareware-Independent Library","text":"<p>\u7576\u6211\u5011\u5c0d\u786c\u9ad4\u76f8\u95dc\u7684\u64cd\u4f5c\u9032\u884c\u57fa\u672c\u7684\u62bd\u8c61\u5316\u4e4b\u5f8c\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5229\u7528 Hardware-Depedent Core Library \u4f86\u5efa\u69cb\u5176\u9918\u548c\u786c\u9ad4\u7121\u95dc\u7684\u7d30\u7bc0\u90e8\u5206\u3002 \u5982 I/O Library \u548c Floating-Point Mmulation Library\u3002</p>"},{"location":"labs/lab3/#221-io-library","title":"2.2.1 I/O Library","text":"<p>\u6b63\u5e38\u4f86\u8aaa\uff0cI/O Library \u5982 C \u8a9e\u8a00\u4e2d\u7684 <code>stdio.h</code> \u61c9\u8a72\u8981\u540c\u6642\u5305\u542b\u8f38\u51fa\u548c\u8f38\u5165\u7684\u529f\u80fd\uff0c\u5982 <code>printf</code> \u548c <code>scanf</code> \u9019\u5169\u500b\u51fd\u5f0f\u3002 \u4f46\u662f\uff0c\u56e0\u70ba\u5be6\u4f5c\u8f38\u5165\u529f\u80fd\u7684\u8a71\uff0c\u6703\u6d89\u53ca\u5230\u4e2d\u65b7\uff08Interrupt\uff09\u9019\u500b\u529f\u80fd\u7684\u5be6\u4f5c\uff0c\u5df2\u7d93\u8d85\u51fa\u9019\u4efd\u6559\u6750\u7684\u7bc4\u570d\u3002\u56e0\u6b64\uff0c\u5728\u9019\u88e1\u6211\u5011\u50c5\u5be6\u4f5c\u8f38\u51fa\u76f8\u95dc\u529f\u80fd\u3002</p> io.h<pre><code>#ifndef __IO_H__\n#define __IO_H__\n\n/* basic output library */\nvoid putchar(char c);\nvoid puts(char *s);\nvoid putint(int integer);\nvoid printf(char *format, ...);\n\n#endif\n</code></pre> io.c<pre><code>#include \"../include/io.h\"\n\n#include \"../include/core.h\"\n\n#include &lt;stdarg.h&gt;\n\n#define NOT_IMPLEMENTED                                                        \\\n    do {                                                                       \\\n        puts(\"Please implement the function by yourself!\\n\");                  \\\n        terminate();                                                           \\\n    } while (0);\n\nvoid putchar(char c) { platform_outb(c); }\n\nvoid puts(char *s) {\n    while (*s != '\\0') {\n        putchar(*(s++));\n    }\n}\n\nvoid putint(int numb) {\n    if (numb &lt; 0) {\n        putchar('-');\n        numb = -numb; // convert to positive number\n    }\n\n    if (numb / 10) {\n        putint(numb / 10);\n    }\n    putchar((numb % 10) + '0');\n}\n\nvoid printf(char *format, ...) {\n    NOT_IMPLEMENTED\n    // TODO\n}\n</code></pre>"},{"location":"labs/lab3/#222-integer-multiplication-and-division-emulation","title":"2.2.2 Integer Multiplication and Division Emulation","text":"<p>\u56e0\u70ba\u5728 RISC-V \u7684\u67b6\u69cb\u4e2d\uff0c\u6574\u6578\u4e58\u9664\u6cd5\u76f8\u95dc\u7684\u6307\u4ee4\u662f\u88ab\u5b9a\u7fa9\u5728 M-Extension \u7576\u4e2d\uff0c\u4e26\u4e0d\u5305\u542b\u5728 RV32/64I \u7576\u4e2d\uff0c\u6240\u4ee5\u6211\u5011\u76ee\u524d\u5be6\u4f5c\u7684 ISS \u4e26\u4e0d\u80fd\u76f4\u63a5\u57f7\u884c\u6574\u6578\u4e58\u9664\u6cd5\u76f8\u95dc\u7684\u6307\u4ee4\u3002\u4f46\u662f\uff0c\u4e58\u9664\u6cd5\u9084\u6709\u53d6\u6a21\u904b\u7b97\uff08Modulo Operation\uff09\u5728\u7a0b\u5f0f\u8a2d\u8a08\u4e4b\u4e2d\u662f\u76f8\u7576\u5e38\u898b\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u9650\u5236\u6211\u5011\u7684\u7a0b\u5f0f\u4e0d\u80fd\u9032\u884c\u4e58\u9664\u6cd5\u9084\u6709\u53d6\u6a21\u904b\u7b97\u7684\u8a71\uff0c\u6703\u8b93\u6211\u5011\u5beb\u7a0b\u5f0f\u8b8a\u5f97\u975e\u5e38\u4e0d\u65b9\u4fbf\u548c\u9ebb\u7169\u3002\u4f46\u6211\u5011\u7684 ISS \u53c8\u53ea\u80fd\u57f7\u884c\u52a0\u6e1b\u6cd5\u904b\u7b97\u548c\u5e38\u898b\u7684\u908f\u8f2f\u904b\u7b97\uff0c\u90a3\u8a72\u600e\u9ebc\u8fa6\uff1f</p> <p>\u672c\u8cea\u4e0a\uff0c\u4e58\u9664\u6cd5\u9084\u6709\u6a21\u904b\u7b97\u7684\u80cc\u5f8c\u4e5f\u662f\u52a0\u6e1b\u6cd5\uff0c\u56e0\u6b64\u5229\u7528\u52a0\u6e1b\u6cd5\u4f86\u6a21\u64ec\u4e58\u9664\u6cd5\u9084\u6709\u6a21\u904b\u7b97\u662f\u4e00\u4ef6\u53ef\u4ee5\u9054\u6210\u7684\u4e8b\u60c5\u3002</p> <p>Simulation\uff08\u6a21\u64ec\uff09 vs. Emulation\uff08\u4eff\u771f\uff09</p> <p>\u5728\u8a08\u7b97\u6a5f\u79d1\u5b78\u4e2d\uff0csimulation \u548c emulation \u9019\u5169\u500b\u8a5e\u96d6\u7136\u4e2d\u6587\u90fd\u53ef\u4ee5\u88ab\u7ffb\u8b6f\u70ba\u300c\u6a21\u64ec\u300d\uff0c\u4f46\u5b83\u5011\u7684\u5177\u9ad4\u542b\u7fa9\u548c\u61c9\u7528\u5834\u666f\u662f\u4e0d\u540c\u7684\u3002\u9019\u5169\u8005\u7684\u5dee\u7570\u4e3b\u8981\u9ad4\u73fe\u5728\u5b83\u5011\u7684\u76ee\u6a19\u3001\u5be6\u4f5c\u65b9\u5f0f\u4ee5\u53ca\u61c9\u7528\u60c5\u5883\u4e0a\u3002</p> <ol> <li>Simulation\uff08\u6a21\u64ec\uff09\uff1a Simulation \u662f\u6307\u4f7f\u7528\u8edf\u9ad4\u6216\u786c\u9ad4\u4f86\u6a21\u64ec\u7cfb\u7d71\u7684\u884c\u70ba\uff0c\u91cd\u9ede\u662f\u6a21\u64ec\u7cfb\u7d71\u7684\u529f\u80fd\u548c\u908f\u8f2f\uff0c\u800c\u4e0d\u4e00\u5b9a\u5b8c\u5168\u5fe0\u5be6\u65bc\u7cfb\u7d71\u7684\u5be6\u969b\u904b\u4f5c\u65b9\u5f0f\u3002\u6a21\u64ec\u7684\u76ee\u7684\u662f\u5c0d\u7cfb\u7d71\u7684\u884c\u70ba\u9032\u884c\u9810\u6e2c\u3001\u6e2c\u8a66\u6216\u5206\u6790\uff0c\u4e0d\u8981\u6c42\u5177\u5099\u5be6\u969b\u904b\u884c\u8a72\u7cfb\u7d71\u7684\u80fd\u529b\u3002</li> <li>ISA Simulator: \u4f8b\u5982\u7576\u63d0\u5230 ISA Simulator\uff08\u6307\u4ee4\u96c6\u67b6\u69cb\u6a21\u64ec\u5668\uff09\uff0c\u6307\u7684\u662f\u6a21\u64ec\u4e00\u500b\u8655\u7406\u5668\u7684\u6307\u4ee4\u96c6\u67b6\u69cb\uff08ISA\uff09\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u786c\u9ad4\u4e0a\u57f7\u884c\u8a72 ISA \u5b9a\u7fa9\u7684\u6307\u4ee4\uff0c\u89c0\u5bdf\u6307\u4ee4\u57f7\u884c\u7684\u7d50\u679c\u3002\u6a21\u64ec\u5668\u7684\u91cd\u9ede\u5728\u65bc\u6a21\u64ec CPU \u7684\u884c\u70ba\uff0c\u4f8b\u5982\u6307\u4ee4\u7684\u57f7\u884c\u9806\u5e8f\u3001\u8a08\u7b97\u7d50\u679c\u7b49\uff0c\u4f46\u6a21\u64ec\u5668\u4e0d\u9700\u8981\u5728\u771f\u5be6\u786c\u9ad4\u4e0a\u904b\u884c\uff0c\u4e5f\u4e0d\u5fc5\u8003\u616e\u5be6\u969b\u786c\u9ad4\u7684\u6642\u9593\u7cbe\u5ea6\u6216\u96fb\u8def\u7d30\u7bc0\u3002</li> <li>\u61c9\u7528\u60c5\u5883\uff1a\u6a21\u64ec\u4e3b\u8981\u7528\u65bc\u7cfb\u7d71\u8a2d\u8a08\u3001\u9a57\u8b49\u3001\u6027\u80fd\u5206\u6790\u7b49\uff0c\u4f8b\u5982\u8655\u7406\u5668\u8a2d\u8a08\u968e\u6bb5\u7684\u6307\u4ee4\u96c6\u6a21\u64ec\u3001\u8edf\u9ad4\u958b\u767c\u968e\u6bb5\u7684\u884c\u70ba\u6a21\u64ec\u7b49\u3002\u9019\u7a2e\u65b9\u5f0f\u53ef\u4ee5\u5e6b\u52a9\u8a2d\u8a08\u8005\u5728\u786c\u9ad4\u9084\u672a\u5b8c\u6210\u4e4b\u524d\u5c31\u80fd\u9032\u884c\u6e2c\u8a66\u3002</li> <li>Emulation\uff08\u4eff\u771f\uff09\uff1a Emulation \u5247\u662f\u6307\u4f7f\u7528\u8edf\u9ad4\u6216\u786c\u9ad4\u4f86\u4eff\u771f\u53e6\u4e00\u500b\u7cfb\u7d71\u7684\u529f\u80fd\u8207\u884c\u70ba\uff0c\u4e26\u4e14\u8b93\u5b83\u80fd\u5920\u5fe0\u5be6\u5730\u57f7\u884c\u539f\u672c\u61c9\u8a72\u5728\u88ab\u4eff\u771f\u7684\u7cfb\u7d71\u4e0a\u904b\u884c\u7684\u8edf\u9ad4\u6216\u786c\u9ad4\u3002\u4eff\u771f\u7684\u76ee\u6a19\u662f\u4f7f\u7cfb\u7d71\u300c\u770b\u8d77\u4f86\u300d\u5c31\u50cf\u539f\u7cfb\u7d71\u4e00\u6a23\uff0c\u80fd\u5920\u5b8c\u5168\u6a21\u64ec\u5b83\u7684\u529f\u80fd\uff0c\u4e26\u4e14\u4f7f\u5f97\u8edf\u9ad4\u548c\u786c\u9ad4\u5728\u4eff\u771f\u74b0\u5883\u4e2d\u904b\u884c\u4e0d\u6703\u611f\u77e5\u5230\u5dee\u7570\u3002</li> <li>Floating-Point Emulation: \u7576\u63d0\u5230 Floating-Point Emulation\uff08\u6d6e\u9ede\u6578\u4eff\u771f\uff09\uff0c\u901a\u5e38\u6307\u7684\u662f\u4f7f\u7528\u8edf\u9ad4\u4eff\u771f\u4f86\u66ff\u4ee3\u786c\u9ad4\u5be6\u73fe\u6d6e\u9ede\u904b\u7b97\u3002\u7576\u786c\u9ad4\u4e0d\u652f\u6301\u67d0\u4e9b\u6d6e\u9ede\u6307\u4ee4\u6642\uff0c\u8edf\u9ad4\u4eff\u771f\u5668\u53ef\u4ee5\u300c\u6a21\u4eff\u300d\u786c\u9ad4\u4f86\u57f7\u884c\u9019\u4e9b\u6d6e\u9ede\u6307\u4ee4\uff0c\u4f7f\u7cfb\u7d71\u611f\u89ba\u4e0d\u5230\u9019\u4e9b\u904b\u7b97\u5176\u5be6\u662f\u7531\u8edf\u9ad4\u800c\u975e\u786c\u9ad4\u5b8c\u6210\u7684\u3002</li> <li>\u61c9\u7528\u60c5\u5883\uff1a\u4eff\u771f\u4e3b\u8981\u7528\u65bc\u66ff\u4ee3\u6216\u5fa9\u73fe\u67d0\u500b\u7cfb\u7d71\u7684\u904b\u4f5c\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u7576\u65b0\u7684\u8655\u7406\u5668\u4e0d\u518d\u652f\u63f4\u820a\u7684\u6307\u4ee4\u96c6\u6216\u786c\u9ad4\u529f\u80fd\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\u4eff\u771f\u6280\u8853\u8b93\u820a\u7684\u8edf\u9ad4\u4ecd\u80fd\u5920\u904b\u884c\u3002\u53e6\u4e00\u500b\u4f8b\u5b50\u662f\u904a\u6232\u6a5f\u7684\u4eff\u771f\u5668\uff0c\u5b83\u53ef\u4ee5\u8b93\u4e0d\u540c\u786c\u9ad4\u5e73\u53f0\u57f7\u884c\u539f\u4f86\u53ea\u80fd\u5728\u904a\u6232\u6a5f\u4e0a\u904b\u884c\u7684\u904a\u6232\u3002</li> </ol> <p>Simulation \u662f\u5074\u91cd\u65bc\u6a21\u64ec\u7cfb\u7d71\u7684\u884c\u70ba\u6216\u908f\u8f2f\u904b\u4f5c\uff0c\u4e0d\u9700\u8981\u5b8c\u5168\u91cd\u73fe\u7cfb\u7d71\u7684\u5177\u9ad4\u904b\u884c\u65b9\u5f0f\uff0c\u901a\u5e38\u7528\u65bc\u8a2d\u8a08\u548c\u9a57\u8b49\u968e\u6bb5\u3002Emulation \u662f\u5074\u91cd\u65bc\u5fe0\u5be6\u91cd\u73fe\u53e6\u4e00\u500b\u7cfb\u7d71\u7684\u904b\u884c\u65b9\u5f0f\uff0c\u8b93\u5176\u80fd\u5920\u904b\u884c\u539f\u672c\u5c08\u5c6c\u65bc\u8a72\u7cfb\u7d71\u7684\u8edf\u9ad4\u6216\u786c\u9ad4\u529f\u80fd\u3002\u56e0\u6b64\uff0cISA Simulator \u66f4\u504f\u5411\u65bc\u63d0\u4f9b\u8655\u7406\u5668\u884c\u70ba\u7684\u6a21\u64ec\uff0c\u4ee5\u4fbf\u9032\u884c\u6e2c\u8a66\u548c\u5206\u6790\uff0c\u800c Floating-Point Emulation \u5247\u662f\u6307\u7576\u786c\u9ad4\u7121\u6cd5\u652f\u6301\u67d0\u4e9b\u6d6e\u9ede\u904b\u7b97\u6642\uff0c\u4f7f\u7528\u8edf\u9ad4\u4f86\u4eff\u771f\u5176\u529f\u80fd\u3002</p> <p>----- ChatGPT</p> <p>\u5728\u9019\u88e1\uff0c\u56e0\u70ba\u6211\u5011\u4f7f\u7528\u7684\u7de8\u8b6f\u5668\u662f GCC\uff08specially, RISC-V GNU Toolchain for RISC-V\uff09\uff0c\u800c GCC \u6b63\u597d\u63d0\u4f9b\u4e86\u4e00\u500b\u975e\u5e38\u65b9\u4fbf\u7684\u529f\u80fd\uff0c\u53eb\u505a The GCC low-level runtime library\uff08\u53c8\u7a31 Libgcc\uff09\uff0c \u6211\u5011\u53ef\u4ee5\u501f\u52a9\u5176\u4e2d\u7684 Routines for integer arithmetic \u4f86\u5b8c\u6210\u6574\u6578\u4e58\u9664\u6cd5\u548c\u53d6\u6a21\u904b\u7b97\u7684\u6a21\u64ec\u3002</p> <p>\u5177\u9ad4\u4f86\u8aaa\uff0cLibgcc \u91dd\u5c0d\u786c\u9ad4\u8cc7\u6e90\u53d7\u9650\u7684\u786c\u9ad4\uff08e.g., \u6c92\u6709\u5167\u5efa\u6574\u6578\u4e58\u9664\u6cd5\u5668\u6216 FPU\uff09\u63d0\u4f9b\u4e86\u8a31\u591a\u65b9\u4fbf\u7684\u529f\u80fd\uff0c\u8b93\u786c\u9ad4\u8cc7\u6e90\u53d7\u9650\u7684\u786c\u9ad4\u4e5f\u53ef\u4ee5\u57f7\u884c\u66f4\u591a\u6a23\u7684\u529f\u80fd\u6216\u904b\u7b97\u3002</p> <p>Most of the routines in libgcc handle arithmetic operations that the target processor cannot perform directly. This includes integer multiply and divide on some machines, and all floating-point and fixed-point operations on other machines. libgcc also includes routines for exception handling, and a handful of miscellaneous operations.  ----- GNU low-level runtime library</p> <p>\u6211\u5011\u6b63\u597d\u53ef\u4ee5\u5229\u7528 Libgcc \u7576\u4e2d\u7684 Routines for integer arithmetic \u4f86\u5c07\u4e58\u9664\u6cd5\u904b\u7b97\u5b50\u9084\u6709\u53d6\u6a21\u904b\u7b97\uff08<code>*</code>, <code>/</code> and <code>%</code>\uff09\u76f4\u63a5\u8f49\u63db\u6210\u5c0d\u61c9\u7684\u51fd\u5f0f\u547c\u53eb\uff0c \u8b93\u6211\u5011\u5be6\u4f5c\u7684 ISS \u5373\u4f7f\u6c92\u6709 M-extension \u7684\u652f\u63f4\u4e5f\u4f9d\u7136\u53ef\u4ee5\u57f7\u884c\u5c0d\u61c9\u7684\u904b\u7b97\u3002</p> <p>\u5c0d\u65bc\u8f49\u5beb RISC-V Program \u7684\u4eba\u4f86\u8aaa\uff0c\u5176\u5be6\u9019\u6574\u4ef6\u4e8b\u60c5\u8b8a\u5f97\u5f88\u7c21\u55ae\uff01\u56e0\u70ba\u9019\u4e9b operator \u5230\u5c0d\u61c9 function call \u7684\u8f49\u63db\u662f\u7531 Compiler \u81ea\u52d5\u5728\u80cc\u5f8c\u5b8c\u6210\u7684\uff0c \u6240\u4ee5\u6211\u5011\u5728\u64b0\u5beb\u7a0b\u5f0f\u7684\u6642\u5019\u53ea\u8981\u50cf\u5f80\u5e38\u4e00\u6a23\uff0c\u76f4\u63a5\u4f7f\u7528\u6211\u5011\u60f3\u8981\u7528\u7684 operators\uff0c\u6700\u5f8c\u5728\u7de8\u8b6f\u7684\u6642\u5019\uff0c\u5728\u6700\u5f8c\u9762\u52a0\u4e0a <code>-lgcc</code> \u7684 compilation flag \u5373\u53ef\u3002 <code>-lgcc</code> \u9019\u500b flag \u7684\u7528\u9014\u662f\u6307\u793a GCC \u8981 link \u5230 Libgcc\uff0c\u9019\u6a23\u6211\u5011\u624d\u53ef\u4ee5\u4f7f\u7528 Libgcc \u63d0\u4f9b\u7684\u529f\u80fd\u3002</p>"},{"location":"labs/lab3/#223-floating-point-emulation-library","title":"2.2.3 Floating-Point Emulation Library","text":"<p>\u5728 RISC-V \u7576\u4e2d\u6d6e\u9ede\u6578\u76f8\u95dc\u7684\u904b\u7b97\u4e00\u6a23\u662f\u88ab\u6b78\u985e\u5728\u64f4\u5145 F-Extension \u7576\u4e2d\uff0c\u4e26\u6c92\u6709\u88ab\u6b78\u985e\u5728 RV32/64I \u7576\u4e2d\uff0c\u6240\u4ee5\u6211\u5011\u8a2d\u8a08\u7684 ISS \u4e5f\u7121\u6cd5\u76f4\u63a5\u4ee5\u57f7\u884c\u55ae\u4e00\u6307\u4ee4\u7684\u65b9\u5f0f\u9032\u884c\u6d6e\u9ede\u6578\u76f8\u95dc\u7684\u904b\u7b97\uff0c\u56e0\u70ba\u6211\u5011\u4e26\u6c92\u6709\u5be6\u4f5c F-Extension \u4e2d\u6240\u5305\u542b\u7684\u6307\u4ee4\uff0c\u9084\u6709\u6d6e\u9ede\u6578\u904b\u7b97\u6240\u9700\u8981\u7684\u66ab\u5b58\u5668\u3002</p> <p>\u4e0d\u904e\uff0c\u6d6e\u9ede\u6578\u904b\u7b97\u672c\u8cea\u4e0a\u4e5f\u662f\u4e8c\u9032\u4f4d\u7684\u908f\u8f2f\u904b\u7b97\uff0c\u56e0\u6b64\u6211\u5011\u662f\u6709\u8fa6\u6cd5\u5229\u7528\u6574\u6578\u6307\u4ee4\u4f86\u6a21\u64ec\u6d6e\u9ede\u6578\u904b\u7b97\u7684\u3002\u9019\u4e5f\u548c\u6211\u5011\u524d\u9762\u63d0\u5230\u6211\u5011\u6240\u5be6\u4f5c\u7684\u6307\u4ee4\u96c6\u5df2\u7d93\u5177\u5099 Turing Complete \u7684\u6027\u8cea\u6709\u95dc\u3002</p>"},{"location":"labs/lab3/#2231-why-floating-instead-of-fixed","title":"2.2.3.1 Why Floating instead of Fixed?","text":"<p>\u5927\u5bb6\u4e4b\u524d\u5b78\u5230\u4ee5 Two's Complement \u8868\u793a Binary Integer \u5176\u5be6\u5c31\u5c6c\u65bc\u5b9a\u9ede\u6578\u904b\u7b97\uff08Fixed-Point Arithmetic\uff09\u7684\u4e00\u7a2e\uff0c\u53ea\u4e0d\u904e\u5dee\u5225\u5728\u65bc\u6211\u5011\u7684\u5c0f\u6578\u9ede\u662f\u4f4d\u65bc\u6700\u5f8c\u4e00\u500b Digit \u7684\u5f8c\u9762\uff0c\u6240\u4ee5\u4e26\u6c92\u6709\u5c0f\u6578\u7684\u90e8\u5206\u3002\u66f4\u5ee3\u7fa9\u7684 Fixed-Point \u901a\u5e38\u662f\u53ea\u540c\u6642\u5305\u542b Integer Part \u548c Fraction Part \u7684\u683c\u5f0f\u3002\u4f46\u6d6e\u9ede\u6578\u5247\u4e0d\u540c\u65bc\u5b9a\u9ede\u6578\uff0c\u6d6e\u9ede\u6578\u4f7f\u7528\u7684\u662f\u6240\u8b02\u7684 Sign-Magnitude Representation\uff0c\u4e5f\u5c31\u662f\u628a Sign \u548c\u6578\u503c\u5927\u5c0f\uff08\u7d55\u5c0d\u503c\uff09\u5206\u6210\u5169\u500b\u90e8\u5206\u4f86\u8868\u793a\uff0c\u5169\u500b\u90e8\u5206\u4e92\u4e0d\u76f8\u95dc\u3002\u66f4\u7cbe\u78ba\u5730\u4f86\u8aaa\uff0c\u5728 Floating-Point \u4e2d\uff0cMagnitude \u7684\u90e8\u5206\u53c8\u62c6\u5206\u6210 Exponent \u52a0\u4e0a Mantisa \u4f86\u8868\u793a\uff0c\u9019\u7a2e\u8868\u793a\u65b9\u5f0f\u9020\u6210\u5c0f\u6578\u9ede\u7684\u4f4d\u7f6e\u662f\u6d6e\u52d5\u7684\uff0c\u9019\u4e5f\u662f\u6d6e\u9ede\u6578\u9019\u500b\u540d\u7a31\u7684\u7531\u4f86\u3002\u6d6e\u9ede\u6578\u8868\u793a\u6d6e\u52d5\u7684\u5c0f\u6578\u9ede\u3002</p> <p>\u6211\u5011\u5fc5\u9808\u8981\u6709\u4e00\u500b\u8a8d\u77e5\u662f\uff0c\u5be6\u6578\u6709\u7121\u9650\u591a\u500b\uff0c\u6240\u4ee5\u4e0d\u7ba1\u662f\u4ee5\u5b9a\u9ede\u6578\u9084\u662f\u6d6e\u9ede\u6578\u4f86\u8aaa\uff0c\u4e00\u5b9a\u90fd\u6703\u6709\u7121\u6cd5\u7cbe\u78ba\u8868\u793a\u7684\u6578\u5b57\uff0c\u8b6c\u5982 \\(\\frac{1}{3}\\) \u4e0d\u8ad6\u662f\u4ee5\u5b9a\u9ede\u6578\u9084\u662f\u6d6e\u9ede\u6578\u90fd\u7121\u6cd5\u7cbe\u78ba\u5730\u8868\u793a\uff0c\u6211\u5011\u53ea\u80fd\u8fd1\u4f3c\u8868\u9054\u3002\u4f46\u65e2\u7136\u9019\u6a23\u70ba\u4ec0\u9ebc\u6211\u5011\u4e0d\u4f7f\u7528\u5b9a\u9ede\u6578\u4f86\u9032\u884c\u5c0f\u6578\u904b\u7b97\u5c31\u597d\uff1f\u7562\u7adf\u5b9a\u9ede\u6578\u4f7f\u7528\u4e8c\u88dc\u6578\u904b\u7b97\uff0c\u5728\u7b97\u6578\u55ae\u5143\u7684\u8a2d\u8a08\u4e0a\u76f8\u8f03 Sign-Magnitude \u8868\u793a\u5f62\u5f0f\u66f4\u70ba\u7c21\u55ae\uff0c\u56e0\u70ba Two's Complement \u53ef\u4ee5\u76f4\u63a5\u9032\u884c\u76f8\u52a0\uff0c\u4e0d\u7528\u505a\u4efb\u4f55\u984d\u5916\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u6d6e\u9ede\u6578\u7684\u904b\u7b97\u901a\u5e38\u90fd\u9700\u8981\u9032\u884c\u984d\u5916\u7684\u64cd\u4f5c\uff0c\u8b6c\u5982 Alignment \u548c Normalization\u3002</p> <p>\u5b9a\u9ede\u6578\u6700\u5927\u7684\u4e00\u500b\u52a3\u52e2\u5728\u65bc\u6c92\u8fa6\u6cd5\u5f88\u597d\u5730\u8868\u793a\u592a\u5927\u6216\u662f\u592a\u63a5\u8fd1\u96f6\u7684\u6578\u5b57\uff0c\u4f46\u662f\u6d6e\u9ede\u6578\u53d7\u76ca\u65bc\u4f7f\u7528 Exponent \u52a0\u4e0a Mantisa \u4f86\u8868\u793a\u6578\u503c\u5927\u5c0f\uff08Magnitude\uff09\uff0c\u6240\u4ee5\u85c9\u7531\u63a7\u5236 Exponent \u6211\u5011\u53ef\u4ee5\u5f88\u8f15\u6613\u5730\u5f97\u5230\u975e\u5e38\u5927\u7684\u6578\u5b57\u6216\u662f\u975e\u5e38\u63a5\u8fd1\u96f6\u4f46\u4e0d\u7b49\u65bc\u96f6\u7684\u6578\u5b57\u3002</p> Again, the horizontal axis is the naive interpretation of the 6 bits as an integer (though the sign is kept as a separate bit, rather than using two\u2019s complement).     The vertical axis is the actual floating point value represented by those bits, according the the IEEE-ish minifloat format we chose.     Source: Fun with floating point <p>\u4e0d\u904e\uff0c\u76f8\u8f03\u65bc\u5b9a\u9ede\u6578\uff0c\u6d6e\u9ede\u6578\u6709\u4e00\u500b\u7279\u6027\u662f\u6578\u503c\u7684\u5206\u5e03\u4e26\u4e0d\u5747\u52fb\u3002\u6211\u5011\u5206\u6210\u5169\u90e8\u5206\u4f86\u8a0e\u8ad6\uff0c\u91dd\u5c0d Subnormal Floating-Point\uff0c\u56e0\u70ba Exponent \u56fa\u5b9a\u70ba \\(-126\\)\uff0c\u5728\u4e0d\u8003\u616e\u6b63\u8ca0\u865f\u7684\u60c5\u6cc1\u4e0b\u552f\u4e00\u6703\u5f71\u97ff\u6578\u503c\u5927\u5c0f\u7684\u53ea\u6709 Fraction\u3002 \u6240\u4ee5\uff0cSubnormal \u7684\u6578\u503c\u5206\u5e03\u5176\u5be6\u662f\u5747\u52fb\u5730\uff0c\u5747\u52fb\u5730\u5206\u4f48\u5728\u5be6\u6578\u8ef8\u4e0a\u9760\u8fd1\u96f6\u7684\u5730\u65b9\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u67d0\u7a2e\u7a0b\u5ea6\u4e0a\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u628a Subnormal \u8996\u70ba\u662f\u5b9a\u9ede\u6578\u3002 \u4f46\u662f\uff0c\u5c0d\u65bc Normal Floating-Point \u4f86\u8aaa\uff0cExponent \u662f\u6703\u8b8a\u52d5\u7684\uff0c\u9019\u4e5f\u9020\u6210\u4e86\u7576 Exponent \u8d8a\u4f86\u8d8a\u5927\u7684\u6642\u5019\uff08\u4e5f\u4ee3\u8868\u96e2\u5be6\u6578\u8ef8\u4e0a\u539f\u9ede\u8d8a\u4f86\u8d8a\u9060\uff09\uff0cNormal \u7684\u5206\u5e03\u6703\u8d8a\u4f86\u8d8a\u4e0d\u5e73\u5747\uff0c\u5206\u5e03\u8d8a\u4f86\u8d8a\u96e2\u6563\u3002</p>"},{"location":"labs/lab3/#2232-ieee-754-single-precision-floating-point-binary32-format","title":"2.2.3.2 IEEE 754 Single-Precision Floating-Point (Binary32) Format","text":"<p>IEEE 754-2008</p> <p>\u6587\u7ae0\u4e2d\u95dc\u65bc Single-Precision Floating-Point \u7684\u4ecb\u7d39\u57fa\u65bc IEEE 754-2008 \u7684\u898f\u7bc4\uff0c\u8a73\u7d30\u5167\u5bb9\u53ef\u4ee5\u53c3\u8003\uff1a754-2008 - IEEE Standard for Floating-Point Arithmetic</p> <p></p> <p>\u6839\u64da IEEE 754 \u7684\u898f\u7bc4\uff0c\u55ae\u7cbe\u5ea6\u6d6e\u9ede\u6578\u7684\u9577\u5ea6\u70ba 32-bit\uff0c\u5176\u4e2d 1-bit\uff08MSB\uff09\u4f5c\u70ba Sign-bit\uff0c8-bit \u4f5c\u70ba Exponent\uff0c\u800c\u6700\u4f4e\u7684 23-bit \u4f5c\u70ba Fraction\u3002</p> <ol> <li>1-bit sign \\(S\\)</li> <li>w-bit biased exponent \\(E = e + \\text{bias}\\)</li> <li>\\((t = p \u2212 1)\\)-bit trailing significand field digit string \\(T = d_1 d_2 ... d_{p-1}\\); the leading bit of the significand, \\(d_0\\), is implicitly encoded in the biased exponent E.</li> </ol> <p>\u5c0d\u65bc binary32 \u4f86\u8aaa\uff0cbias \u70ba 127\uff0c\u4e26\u4e14 \\(e_{\\text{max}} = 127\\)\uff0c\u800c\u898f\u683c\u66f8\u4e5f\u898f\u5b9a \\(e_{\\text{min}} = 1 - e_{\\text{max}} = -126\\)\u3002</p> <p>Significand vs. Fraction</p> <p>\u7576\u6211\u5011\u8b1b Significand \u7684\u6642\u5019\uff0c\u6307\u7684\u662f\u6d6e\u9ede\u6578\u8868\u793a\u6cd5\u4e2d\u7684 Fraction \u52a0\u4e0a Implicit Leading 1\u3002\u5982\u679c\u53ea\u6709\u8aaa Fraction \u7684\u8a71\u5c31\u662f\u55ae\u7d14\u53ea\u5305\u542b\u5c0f\u6578\u9ede\u5f8c\u7684\u90e8\u5206\uff0c\u4e0d\u5305\u542b Leading 1\u3002 \u5728 IEEE 754 \u898f\u683c\u66f8\u4e2d\uff0c\u53c8\u628a Fraction \u7a31\u70ba Trailing Significand Field\u3002</p> <p>\u6839\u64da IEEE 754 \u7684\u898f\u7bc4\uff0c\u4f9d\u7167 Exponent \u548c Fraction \u7684\u503c\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u5e7e\u7a2e\u60c5\u6cc1\uff1a</p> Value Exponent Fraction (Trailing Significand) \\(\\pm 0\\) All zeros All zeros Normal Not all zeros also not all ones Arbitrary Subnormal All zeros Not all zeros \\(\\pm \\infty\\) All ones All zeros NaN All ones Not all zeros <p>\u9700\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f\uff0c\u4f9d\u7167 IEEE 754 \u7684\u898f\u5b9a\uff0cExponent \u7684\u8868\u793a\u65b9\u5f0f\u662f \\(E = e + \\text{bias}\\)\uff0c\u5176\u4e2d \\(E\\) \u662f\u52a0\u4e0a Bias \u4e4b\u5f8c\u5132\u5b58\u5728\u6d6e\u9ede\u6578\u8868\u793a\u6cd5\u4e2d\u7684 Exponent \u6578\u503c\uff0c\u800c \\(e\\) \u662f\u771f\u5be6\u7684 Exponent\uff0c\u800c\u91dd\u5c0d\u55ae\u7cbe\u5ea6\u6d6e\u9ede\u6578\u4f86\u8aaa\uff0c754 \u898f\u5b9a\u5176 Bias \u61c9\u70ba 127\u3002 \u4f7f\u7528 Biased Representation (Offset Binary) \u4f86\u8868\u793a Exponent \u5176\u5be6\u662f\u4e00\u500b\u5f88\u5de7\u5999\u7684\u8a2d\u8a08\uff0c\u6211\u5011\u77e5\u9053\u55ae\u7cbe\u5ea6\u6d6e\u9ede\u6578\u5be6\u969b\u4e0a\u53ef\u4ee5\u8868\u793a\u7684\u6307\u6578 \\(e\\) \u7684\u7bc4\u570d\u70ba \\(-126 \\sim 127\\)\uff0c\u52a0\u4e0a Bias \u4e4b\u5f8c\u6211\u5011\u53ef\u4ee5\u767c\u73fe \\(E\\) \u4e00\u5b9a\u662f\u4e00\u500b\u975e\u8ca0\u6574\u6578\u3002 \u5148\u5ffd\u7565 Sign-bit \u4e26\u4e14\u914d\u5408 Fraction\uff0c\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u5c07 Exponent \u548c Fraction \u5408\u8d77\u4f86\u8996\u70ba\u4e00\u500b\u7121\u7b26\u865f\u6578\u6574\u6578\uff0c\u7136\u5f8c\u76f4\u63a5\u4f7f\u7528\u6574\u6578\u6392\u5e8f\u6f14\u7b97\u6cd5\u4f86\u6392\u5e8f\u6d6e\u9ede\u6578\uff01\uff0c\u91dd\u5c0d Sign-bit \u70ba 1 \u7684\u72c0\u6cc1\uff08\u4e5f\u5c31\u662f\u8ca0\u6578\uff09\u53ea\u8981\u5c07\u6392\u5e8f\u9806\u5e8f\u985b\u5012\u5373\u53ef\u3002  \u6240\u4ee5\u4f7f\u7528 Offset Binary \u4f86\u8868\u793a Exponent \u7684\u597d\u8655\u5c31\u662f\u6211\u5011\u53ef\u4ee5\u4e0d\u7528\u518d\u91dd\u5c0d\u6d6e\u9ede\u6578\u5be6\u4f5c\u7279\u6b8a\u7684\u6392\u5e8f\u6f14\u7b97\u6cd5\uff0c\u800c\u662f\u53ef\u4ee5\u76f4\u63a5\u6cbf\u7528\u6574\u6578\u6392\u5e8f\u6f14\u7b97\u6cd5\u3002</p> <p>Warning</p> <p>\u8acb\u7279\u5225\u6ce8\u610f\uff0cSubnormal Number \u7684\u6307\u6578\u90e8\u5206\u662f \\(-126\\) \u800c\u975e \\(-127\\)\uff01</p>"},{"location":"labs/lab3/#2233-rouding-and-calculation-error","title":"2.2.3.3 Rouding and Calculation Error","text":"<p>Keyword</p> <ul> <li>IEEE 754-2008</li> <li>Infinite Precision</li> <li>Guard, Round and Sticky Bit (GRS)</li> <li>Units at the last bit (ulp)</li> <li>Rounding Mode, Round-to-the-Nearest</li> </ul> <p>\u53c3\u8003</p> <p>\u7a3d\u6838\u5206\u6790\u4e2d\u6578\u5b57\u56db\u6368\u4e94\u5165\u7684\u8ff7\u5931? \u4f60\u807d\u904e\u300c\u9280\u884c\u5bb6\u6368\u5165\u6cd5\u300d\u55ce?</p> <p>\u6211\u5011\u5148\u4f86\u63a2\u8a0e\u70ba\u4ec0\u9ebc\u6703\u51fa\u73fe Round-to-Nearest \u9019\u7a2e\u7279\u6b8a\u7684 rounding mode\u3002 \u5728\u4e2d\u5c0f\u5b78\u968e\u6bb5\u6211\u5011\u6700\u5e38\u4f7f\u7528\u7684\u662f\u56db\u6368\u4e94\u5165\u9019\u7a2e\u65b9\u5f0f\uff0c\u770b\u4f3c\u597d\u50cf\u662f\u4e00\u500b\u76f8\u5c0d\u516c\u5e73\u7684\u6368\u5165\u65b9\u5f0f\uff0c\u4f46\u5be6\u969b\u4e0a\u4f7f\u7528\u56db\u6368\u4e94\u5165\u76f8\u8f03\u65bc IEEE 754 \u5b9a\u7fa9\u7684 Round-to-the-Nearest \u6703\u5f15\u5165\u8f03\u591a\u7684\u7d71\u8a08\u8aa4\u5dee\u3002\u56e0\u70ba\u56db\u6368\u4e94\u5165\u5c0d\u65bc\u8981\u6368\u5165\u7684\u503c\u525b\u597d\u7b49\u65bc 0.5 \u7684 Unit-in-the-last-place (ulp) \u9019\u7a2e tie-breaking case \u4f86\u8aaa\uff0c\u6703\u50cf\u4e0a\u6368\u5165\uff0c\u610f\u5473\u8457\u5728\u9019\u7a2e\u72c0\u6cc1\u4e0b\u503c\u7e3d\u662f\u6703\u7121\u689d\u4ef6\u5730\u8b8a\u5927\uff0c\u9020\u6210 Positive Bias\u3002 \u4ee5\u7d71\u8a08\u7684\u89c0\u9ede\u4f86\u770b\uff0c\u6211\u5011\u7e3d\u662f\u6703\u5e0c\u671b\u6368\u5165\u5f8c\u7684\u5e73\u5747\u503c\u53ef\u4ee5\u8d8a\u63a5\u8fd1\u539f\u59cb\u503c\u7684\u5e73\u5747\u503c\uff0c\u9019\u4e5f\u662f\u70ba\u4ec0\u9ebc\u6211\u5011\u91dd\u5c0d\u53d6\u6368\u7684\u90e8\u5206\u7b49\u65bc 0.5 ULP \u7684\u9019\u7a2e\u60c5\u6cc1\u5fc5\u9808\u8981\u505a\u7279\u5225\u7684\u8a0e\u8ad6\uff0c\u8b93\u9019\u7a2e\u72c0\u6cc1\u6709\u6642\u5019\u6703 Round-up \u800c\u6709\u6642\u5019\u6703 Round-down\uff0c\u4f86\u62b5\u92b7\u7d71\u8a08\u4e0a\u7684 Bias\u3002</p> <p></p> <p>\u5728 IEEE 754 \u4e2d\u5176\u5be6\u7e3d\u5171\u898f\u7bc4\u4e86\u56db\u7a2e Rounding Mode\uff0c\u9664\u4e86 Round-to-Nearest \u4e4b\u5916\uff0c \u9084\u6709 Round-Torward-Positive\u3001Round-Toward-Negative \u548c Round-Toward-Zero\u3002\u4e26\u4e14 IEEE 754 \u898f\u5b9a\u9810\u8a2d\u7684 Rounding Mode \u61c9\u8a72\u70ba Round-to-the-Nearest\u3002\u4f46\u5be6\u969b\u4e0a\u5728 IEEE 754 \u7684\u898f\u7bc4\u4e2d\uff0cRound-to-Nearest \u53c8\u88ab\u7d30\u5206\u6210\u4e86\u5169\u7a2e\uff0c\u5206\u5225\u662f roundTiesToEven \u548c roundTiesToAway\u3002 \u5176\u4e2d roundTiesToAway \u5176\u5be6\u5c31\u662f\u6211\u5011\u6240\u719f\u6089\u7684\u56db\u6368\u4e94\u5165\u7684\u65b9\u5f0f\uff0c\u800c roundTiesToEven \u5247\u662f\u6211\u5011\u4eca\u5929\u8981\u8a0e\u8ad6\u7684\u91cd\u9ede\uff0c\u4e5f\u5c31\u662f\u5927\u5bb6\u5e38\u8aaa\u7684 Round-to-Even\u3002 roundTiesToEven \u898f\u5b9a\u7576\u6211\u5011\u9047\u5230 tie-breaking case \u7684\u6642\u5019\uff0c\u5fc5\u9808\u8981\u4fdd\u6301 LSB \u6c38\u9060\u662f 0\uff08\u5728\u9019\u88e1\u6211\u5011\u5c07 binary \u4e2d\u7684 0 \u8996\u70ba\u5076\u6578\uff0c1 \u8996\u70ba\u5947\u6578\uff09\u3002 \u63db\u53e5\u8a71\u8aaa\uff0c\u5728 tie-breaking case \u4e2d\u5982\u679c\u9047\u5230 LSB \u662f 1 \u7684\u8a71\u6211\u5011\u5c31\u5fc5\u9808 Round-up\uff0c\u56e0\u70ba\u9019\u6a23\u9032\u4f4d\u4e4b\u5f8c\u5c31\u53ef\u4ee5\u4f7f LSB \u8b8a\u6210 0\u3002\u800c\u7576 LSB \u662f 0 \u7684\u6642\u5019\u5247\u76f4\u63a5 Round-down \u4ee5\u4fdd\u6301 LSB \u4f9d\u7136\u70ba 0\u3002</p> <p>\u4ee5\u6d6e\u9ede\u6578\u52a0\u6cd5\u70ba\u4f8b\uff0c\u9032\u884c\u52a0\u6cd5\u4e4b\u524d\u6211\u5011\u5fc5\u9808\u8981\u5c07\u5169\u500b\u6578\u5b57\u4f9d\u7167 Exponent \u9032\u884c\u5c0d\u9f4a\uff08alignment\uff09\uff0c\u5982\u679c\u6211\u5011\u4f7f\u7528\u624b\u7b97\u7684\u65b9\u5f0f\u9032\u884c\u904b\u7b97\uff0c\u53ea\u8981\u6211\u5011\u9858\u610f\u628a\u6578\u5b57\u5168\u90e8\u5beb\u4e0b\u4f86\u7684\u8a71\uff0c\u90a3\u9ebc\u7cbe\u5ea6\u5c31\u4e0d\u6703\u640d\u5931\uff01 \u4f46\u5be6\u969b\u4e0a\u5728\u8edf\u9ad4\u6216\u662f\u786c\u9ad4\u4e2d\uff0c\u7531\u65bc Bits \u6578\u91cf\u6709\u9650\uff0c\u53ef\u80fd\u6703\u640d\u5931\u4e00\u5b9a\u7684\u7cbe\u5ea6\u800c\u9020\u6210\u8aa4\u5dee\uff0c\u4f46\u662f\u5982\u679c\u6211\u5011\u56e0\u70ba\u9019\u6a23\u5fae\u5c0f\u7684\u8aa4\u5dee\u9020\u6210 Rounding \u7684\u7d50\u679c\u4e0d\u540c\uff0c\u67d0\u4e9b\u4eba\u7b97\u51fa\u4f86\u662f\u9700\u8981 Round-down \u4f46\u6709\u4e9b\u4eba\u662f Round-up \u7684\u8a71\uff0c\u9019\u6642\u5019\u5230\u5e95\u8ab0\u624d\u662f\u5c0d\u7684\uff0c\u53c8\u6216\u8005\u662f\u8aaa\u5230\u5e95\u8ab0\u624d\u662f\u7b26\u5408 IEEE 754 \u7684\u898f\u7bc4\uff1f</p> <p>Definition</p> Correct Rounding This standard\u2019s method of converting an infinitely precise result to a floating-point number, as determined by the applicable rounding direction. A floating-point number so obtained is said to be correctly rounded.----- IEEE 754-2008 Chapter 2  <p>\u5176\u5be6\u5728 IEEE 754 \u4e2d\uff0c\u53ea\u91dd\u5c0d\u4f55\u8b02\u300e\u6b63\u78ba\u7684\u904b\u7b97\u7d50\u679c\u300f\u505a\u4e86\u8a73\u7d30\u7684\u898f\u7bc4\uff0cIEEE 754 \u4e26\u6c92\u6709\u898f\u5b9a\u4f60\u61c9\u8a72\u8981\u5982\u4f55\u5be6\u73fe\u904b\u7b97\u7684\u904e\u7a0b\u6216\u662f\u6f14\u7b97\u6cd5\u7684\u7d30\u7bc0\u3002IEEE 754 \u898f\u7bc4\u7576\u6211\u5011\u5c0d\u4e00\u500b\u7121\u9650\u7cbe\u5ea6\u7684\u7d50\u679c\u9032\u884c\u6368\u5165\u7684\u8a71\uff0c\u6240\u5f97\u5230\u7684\u7d50\u679c\u5c31\u7a31\u70ba\u6b63\u78ba\u7684\u6368\u5165\u7d50\u679c\uff08Correct Rounding\uff09\u3002 \u63db\u53e5\u8a71\u8aaa\u5c31\u662f\u7576\u6211\u5011\u5728\u8a08\u7b97\u7684\u904e\u7a0b\u4e2d\u4e0d\u640d\u5931\u4efb\u4f55\u7cbe\u5ea6\uff08\u767d\u8a71\u4e00\u9ede\u5c31\u662f\u4e0d\u6368\u68c4\u4efb\u4f55 Bits/Digits\uff09\uff0c\u7136\u5f8c\u518d\u4ee5\u9019\u6a23\u8a08\u7b97\u7684\u7d50\u679c\u505a Rounding \u7684\u8a71\uff0c\u5c31\u8a8d\u5b9a\u9019\u6a23\u7684\u7d50\u679c\u662f\u6b63\u78ba\u7684\u7d50\u679c\u3002 \u4f46\u56e0\u70ba\u8981\u5f37\u8feb\u8a08\u7b97\u904e\u7a0b\u4e2d\u4e0d\u80fd\u640d\u5931\u4efb\u4f55\u7cbe\u5ea6\u7684\u8a71\uff0c\u4e0d\u8ad6\u662f\u8edf\u9ad4\u6216\u662f\u786c\u9ad4\u4e0a\u90fd\u6703\u6709\u6bd4\u8f03\u5927\u7684 overhead\uff0c\u4ee5\u6211\u5011\u76ee\u524d\u63a2\u8a0e\u55ae\u7cbe\u5ea6\u6d6e\u9ede\u6578\u8aaa\uff0c\u770b\u8d77\u4f86\u53ef\u80fd\u9084\u597d\uff0c\u56e0\u70ba\u5169\u500b\u6b63\u898f\uff08Normal\uff09\u6d6e\u9ede\u6578\u7684 Exponent \u6700\u591a\u76f8\u5dee \\(127 - (-126) = 253\\)\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u8981\u4f7f\u7528 253-bit \u7684 extra-bits \u5373\u53ef\u4fdd\u8b49\u904b\u7b97\u904e\u7a0b\u4e2d\u4e0d\u640d\u5931\u4efb\u4f55\u7cbe\u5ea6\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u5011\u4eca\u5929\u9700\u8981\u7528\u5230\u96d9\u500d\u7cbe\u5ea6\uff08Double Precision\uff09\u751a\u81f3\u662f\u56db\u500d\u7cbe\u5ea6\uff08Quad Precision\uff09\u7684\u6642\u5019\uff0c\u5c31\u6703\u9700\u8981\u4f7f\u7528\u975e\u5e38\u975e\u5e38\u591a\u7684 extra-bits\uff0c\u9019\u6a23\u505a\u7684\u6210\u672c\u975e\u5e38\u9ad8\u3002</p> <p>Since the worst case for rounding would be when the actual number is halfway between two floating-point representations, accuracy in floating point is normally measured in terms of the number of bits in error in the least significant bits of the significand; the measure is called the number of units in the last place, or ulp. If a number were off by 2 in the least significant bits, it would be called off by 2 ulps. Provided there are no overflow, underflow, or invalid operation exceptions, IEEE 754 guarantees that the computer uses the number that is within one-half ulp.  ----- Computer Organization and Design RISC-V Edition: The Hardware/Software Interface<sup>1</sup></p> <p>\u6839\u64da\u8ab2\u672c<sup>1</sup>\u4e0a\u7684\u63cf\u8ff0\uff0c\u6703\u5c0e\u81f4 Rounding \u904e\u5f8c\u7684\u7d50\u679c\u548c\u539f\u59cb\u7d50\u679c\u6709\u6700\u5927\u8aa4\u5dee\u7684\u72c0\u6cc1\u5c31\u662f\u7576\u539f\u59cb\u7d50\u679c\u525b\u597d\u4ecb\u65bc\u5169\u500b\u6d6e\u9ede\u6578\u8868\u793a\u4e4b\u9593\uff08Floating-Poing Representation\uff09\uff0c\u56e0\u6b64\u6211\u5011\u5e38\u5e38\u6703\u7528 Units in the last place (ulp) \u4f86\u8861\u91cf\u7d55\u5c0d\u8aa4\u5dee\u7684\u5927\u5c0f\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u5047\u8a2d\u4e0d\u640d\u5931\u7cbe\u5ea6\u7684\u8a08\u7b97\u7d50\u679c\u70ba \\(1.01011_{\\text{two}}\\)\uff0c\u800c\u6211\u5011\u7684\u6709\u6548\u4f4d\u6578\u53ea\u5230\u5c0f\u6578\u9ede\u5f8c\u5169\u4f4d\uff0c\u90a3\u5047\u8a2d\u6368\u5165\u5f8c\u7d50\u679c\u70ba \\(1.01_{\\text{two}}\\)\uff0c\u5247\u6211\u5011\u53ef\u4ee5\u8aaa\u9019\u500b\u904b\u7b97\u7684\u8aa4\u5dee\u70ba \\(0.375\\) \u500b ulp\u3002 \u53ea\u8981\u6211\u5011\u53ef\u4ee5\u9075\u5b88 IEEE 754 \u7684\u898f\u7bc4\uff0c\u4e5f\u5c31\u662f\u53ea\u8981\u6211\u5011\u4fdd\u8b49\u6211\u5011\u7684\u7d50\u679c\u662f Correct Rounding \u7684\u8a71\uff0c\u90a3\u9ebc\u8aa4\u5dee\u6700\u591a\u5c31\u53ea\u6703\u662f \\(\\frac{1}{2}\\) \u500b ulp\u3002</p> <p>Definition</p> Units in the last place (ULP) The number of bits in error in the least significant bits of the significand between the actual number and the number that can be represented. If the exponent range is not upper-bounded, a ULP value of a floating-point number x is the distance between the two closest straddling floating-point numbers a and b nearest to x. The IEEE 754 standard requires that the result of an elementary arithmetic operation such as addition, multiplication, or division is correctly rounded. A correctly rounded result means that the rounded result is within 0.5 ULP of the exact result. <p>\u6240\u4ee5\uff0c\u6bd4\u8d77\u5728\u904b\u7b97\u904e\u7a0b\u4e2d\u4e0d\u640d\u5931\u4efb\u4f55\u7cbe\u5ea6\uff0c\u6709\u6c92\u6709\u4e00\u7a2e\u65b9\u6cd5\u662f\u5728\u4fdd\u8b49\u4e0d\u5f71\u97ff Rounding \u7d50\u679c\u7684\u524d\u63d0\u4e0b\u6368\u68c4\u90e8\u5206\u7cbe\u5ea6\uff0c\u8b93\u5be6\u4f5c\u7684\u6210\u672c\u66f4\u5c0f\u3001\u66f4\u7c21\u55ae\uff1f \u9019\u7a2e\u65b9\u6cd5\u5c31\u662f\u6211\u5011\u5728\u8ab2\u5802\u4e0a\u6240\u8b1b\u7684 Guard, Round and Sticky Bit (GRS)\u3002\u6839\u64da\u8ab2\u672c<sup>1</sup>\u4e0a\u7684\u5b9a\u7fa9\uff1a</p> <p>Definition</p> Guard Bit The first of two extra bits kept on the right during intermediate calculations of floating-point numbers; used to improve rounding accuracy. Round Bit the name of the second of two extra bits kept on the right during intermediate floating-point calculations, which improves rounding accuracy. Sticky Bit A bit used in rounding in addition to guard and round that is set whenever there are nonzero bits to the right of the round bit. <p>\u4f7f\u7528 GRS \u53ef\u4ee5\u8b93\u6211\u5011\u53ef\u4ee5\u5728\u8a08\u7b97\u7684\u904e\u7a0b\u4e2d\uff0c\u50c5\u50c5\u9700\u8981\u4fdd\u7559 3 \u500b extra-bits\uff0c\u4f46\u662f\u537b\u53ef\u4ee5\u5f97\u5230\u548c\u4e0d\u640d\u5931\u4efb\u4f55\u7cbe\u5ea6\u7684\u8a08\u7b97\u7d50\u679c\u4e00\u6a23\u7684 Rounding \u7d50\u679c\u3002</p> G R S Rounding Direction 0 0 0 Round-down 0 0 1 Round-down 0 1 0 Round-down 0 1 1 Round-down 1 0 0 Round-up when LSB equaling 1 otherwise Round-down 1 0 1 Round-up 1 1 0 Round-up 1 1 1 Round-up <p>\u900f\u904e\u89c0\u5bdf\u5176\u5be6\u53ef\u4ee5\u767c\u73fe\u6211\u5011\u53ef\u4ee5\u5c07 Round Bit \u548c Sticky Bit \u518d\u505a OR\uff0c\u5f97\u5230\u66f4\u7c21\u7d04\u7684\u5224\u65b7\u689d\u4ef6\u3002</p> G R | S Rounding Direction 0 0 Round-down 0 0 Round-down 0 0 Round-down 0 0 Round-down 1 0 Round-up when LSB equaling 1 otherwise Round-down 1 1 Round-up 1 1 Round-up 1 1 Round-up <p>\u5176\u5be6\u91cd\u9ede\u5728\u65bc Sticky Bit \u7684\u5be6\u4f5c\uff1b\u6839\u64da\u8ab2\u672c<sup>1</sup>\u5c0d\u65bc Sticky Bit \u7684\u5b9a\u7fa9\uff0cSticky Bit \u662f\u53ea\u8981\u7576 Round Bit \u7684\u53f3\u5074\u7684\u6240\u6709 Bit \u53ea\u8981\u51fa\u73fe\u4efb\u4f55\u4e00\u500b 1 \u7684\u8a71\uff0c\u90a3\u9ebc Sticky Bit \u5c31\u662f 1\uff0c\u5426\u5247 Sticky Bit \u5c31\u662f 0\u3002 \u9019\u7a2e\u64cd\u4f5c\u53c8\u7a31\u70ba Reduction Operation\uff0c\u5728 Verilog \u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Reduction Operator\uff0c\u4f46\u662f C \u8a9e\u8a00\u7684\u8a71\u5c31\u5fc5\u9808\u81ea\u5df1\u5be6\u4f5c\u3002 \u5728\u4f7f\u7528 Extra-bit \u4f86\u8f14\u52a9 Rounding \u7684\u6642\u5019\uff0c\u6211\u5011\u4e0d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Trouncate\uff08\u622a\u65b7\uff09\u7684\u65b9\u5f0f\u4f86\u7372\u5f97 Sticky Bit\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u5047\u8a2d\u6211\u5011\u7684\u6d6e\u9ede\u6578\u904b\u7b97\u7d50\u679c\u662f \\(1.101001_{\\text{two}}\\)\uff0c\u4e14\u6709\u6548\u4f4d\u6578\u5230\u5c0f\u6578\u9ede\u5f8c\u7b2c\u4e8c\u4f4d\uff08\u5373 LSB \u7684\u4f4d\u7f6e\u70ba\u5c0f\u6578\u9ede\u5f8c\u7b2c\u4e8c\u4f4d\uff09\uff0c \u7576\u6211\u5011\u60f3\u8981\u4f7f\u7528 GRS \u4f86\u8f14\u52a9 Rounding \u7684\u6642\u5019\uff0c\u6709\u4e9b\u4eba\u53ef\u80fd\u6703\u505a\u932f\uff0c\u76f4\u63a5\u6368\u68c4\u6389 LSB \u5f8c\u4e09\u4f4d\u4e4b\u5f8c\u7684\u6240\u6709\u6578\u5b57\uff0c\u5f97\u5230 \\(G = 1\\)\u3001\\(R = 0\\) \u4e14 \\(S = 0\\)\uff0c\u56e0\u6b64\u5c07\u7d50\u679c Round-down\uff08\u56e0\u70ba LSB \u662f 0\uff09\uff0c\u5f97\u5230 \\(1.10_{\\text{two}}\\)\u3002 \u4f46\u662f\uff0c\u6b63\u78ba\u7684\u7d50\u679c\u61c9\u8a72\u662f \\(G = 1\\)\u3001\\(R = 0\\) \u4e14 \\(S = 1\\)\uff0c\u56e0\u70ba Round Bit \u7684\u5f8c\u9762\u5176\u5be6\u51fa\u73fe\u4e86\u4e00\u500b 1\uff08\u5c0f\u6578\u9ede\u5f8c\u7b2c\u516d\u4f4d\uff09\uff0c\u4f9d\u7167 Sticky Bit \u7684\u5b9a\u7fa9\uff08\u5c0d Sticky Bit \u4ee5\u5f8c\u7684\u6240\u6709 Bit \u505a Unary OR\uff09\u4f86\u8aaa\u7684\u8a71\u61c9\u8a72\u8981\u628a S \u8a2d\u70ba 1\u3002\u5982\u679c\u4f9d\u7167 GRS \u7b49\u65bc 101 \u4f86\u5224\u65b7\u7684\u8a71\uff0c\u6211\u5011\u61c9\u8a72\u8981\u5c07\u7d50\u679c Round-up\uff0c\u5f97\u5230 \\(1.11_{\\text{two}}\\)\u3002 \u4f9d\u7167 IEEE 754 \u7684\u898f\u7bc4\u4f86\u8aaa\uff0c\\(1.11_{\\text{two}}\\) \u624d\u662f\u6b63\u78ba\u7684\u6368\u5165\u7d50\u679c\uff08Correct Rounding\uff09\u3002</p> <p>\u88dc\u5145\uff1aKahan Summation Algorithm</p> <p>Kahan Summation\uff0c\u6216\u7a31\u70ba Kahan \u88dc\u511f\u52a0\u6cd5\uff0c\u662f\u4e00\u7a2e\u5728\u6d6e\u9ede\u6578\u52a0\u6cd5\u4e2d\u63d0\u5347\u7cbe\u5ea6\u7684\u7b97\u6cd5\uff0c\u7531 William Kahan \u767c\u660e\u3002 \u6b64\u65b9\u6cd5\u4e3b\u8981\u7528\u65bc\u7d2f\u52a0\u5927\u91cf\u6d6e\u9ede\u6578\u6642\uff0c\u907f\u514d\u56e0\u6d6e\u9ede\u6578\u8aa4\u5dee\uff08\u5982\u6368\u5165\u8aa4\u5dee\uff09\u800c\u5c0e\u81f4\u6700\u7d42\u7d50\u679c\u504f\u5dee\u904e\u5927\u7684\u554f\u984c\u3002 \u7576\u5c0d\u5927\u91cf\u6d6e\u9ede\u6578\u7d2f\u52a0\u6642\uff0c\u6578\u503c\u8f03\u5c0f\u7684\u6d6e\u9ede\u6578\u5728\u52a0\u5165\u6578\u503c\u8f03\u5927\u7684\u7d2f\u52a0\u548c\u6642\uff0c\u5bb9\u6613\u56e0\u70ba\u6d6e\u9ede\u6578\u8868\u793a\u7684\u7cbe\u5ea6\u6709\u9650\u800c\u5c0e\u81f4\u8aa4\u5dee\u3002 \u4f8b\u5982\uff0c\u82e5\u548c\u7684\u5927\u5c0f\u9060\u5927\u65bc\u63a5\u4e0b\u4f86\u8981\u52a0\u5165\u7684\u6578\u5b57\uff0c\u5247\u52a0\u5165\u7684\u6578\u53ef\u80fd\u6703\u56e0\u7cbe\u5ea6\u9650\u5236\u800c\u88ab\u6368\u68c4\u6216\u7522\u751f\u8f03\u5927\u8aa4\u5dee\u3002 Kahan summation \u63d0\u4f9b\u4e86\u88dc\u511f\u6a5f\u5236\uff0c\u4ee5\u8a18\u9304\u4e26\u88dc\u511f\u9019\u4e9b\u6368\u5165\u8aa4\u5dee\u3002</p> <p>\u5728\u67d0\u4e9b\u5834\u666f\u7576\u4e2d\u904b\u7b97\u7684\u6e96\u78ba\u5ea6\u662f\u81f3\u95dc\u91cd\u8981\u7684\uff0c\u50cf\u662f\u7269\u7406\u6a21\u64ec\u6216\u662f\u7d93\u878d\u8a08\u7b97\u7684\u61c9\u7528\uff0c\u53ea\u8981\u7d2f\u7a4d\u4e00\u5b9a\u7684\u8aa4\u5dee\u5f80\u5f80\u5c31\u6703\u5c0d\u7d50\u679c\u7522\u751f\u5f88\u5927\u7684\u5f71\u97ff\u3002 \u4f46\u662f\u8a08\u7b97\u7528\u7684\u96fb\u8166\u5f80\u5f80\u4e5f\u90fd\u662f\u63a1\u7528\u6d6e\u9ede\u6578\u9032\u884c\u8a08\u7b97\uff0c\u5f15\u5165\u8aa4\u5dee\u662f\u7121\u53ef\u907f\u514d\u7684\u4e8b\u60c5\uff0c\u56e0\u6b64\u9700\u8981\u767c\u5c55\u51fa\u7279\u5b9a\u7684\u6f14\u7b97\u6cd5\u4f86\u88dc\u511f\uff08Compensate\uff09\u9019\u4e9b\u8aa4\u5dee\uff0c\u4f7f\u8a08\u7b97\u7d50\u679c\u66f4\u8cbc\u8fd1\u771f\u5be6\u60c5\u6cc1\u3002</p> <p>\u53c3\u8003\uff1aWikipedia - Kahan summation algorithm</p>"},{"location":"labs/lab3/#2234-implementation","title":"2.2.3.4 Implementation","text":"<p>\u6211\u5011\u4ee5 RISC-V F-Extension \u70ba\u4f8b\uff0c\u5e38\u898b\u7684\u6d6e\u9ede\u6578\u904b\u7b97\u5305\u542b\u52a0\u6e1b\u4e58\u9664\u9084\u6709\u958b\u5e73\u65b9\u6839\uff08Square-Root\uff09\u904b\u7b97\uff0c\u5728\u9019\u88e1\u6211\u53ea\u8a0e\u8ad6\u6d6e\u9ede\u6578\u52a0\u6e1b\u6cd5\u7684\u904b\u7b97\u3002 \u96d6\u7136\u4ee5\u6f14\u7b97\u6cd5\u7684\u89c0\u9ede\u4f86\u8aaa\uff0c\u6d6e\u9ede\u6578\u52a0\u6e1b\u6cd5\u7684\u904b\u7b97\u4e0d\u6703\u5f88\u8907\u96dc\uff0c\u4f46\u662f\u5728\u5be6\u4f5c\u4e0a\u5176\u5be6\u9084\u662f\u6709\u5f88\u591a\u7d30\u7bc0\u9700\u8981\u6ce8\u610f\uff0c\u4e26\u4e14\u4e5f\u6709\u5f88\u591a\u6280\u5de7\u53ef\u4ee5\u52a0\u5feb\u904b\u7b97\u901f\u5ea6\u3002</p> <p>Berkeley SoftFloat Release 3e</p> <p>ucb-bar/berkeley-softfloat-3</p> <p>Berkeley SoftFloat is a software implementation of binary floating-point that conforms to the IEEE Standard for Floating-Point Arithmetic. SoftFloat is distributed in the form of C source code. Building the SoftFloat sources generates a library file (typically softfloat.a or libsoftfloat.a) containing the floating-point subroutines.</p> <p>\u4ee5\u4e0b\u7684\u7a0b\u5f0f\u78bc\u4e3b\u8981\u53c3\u8003 Berkeley SoftFloat 3 \u7684\u5be6\u4f5c\uff0c\u4e26\u4e14\u505a\u4e86\u5fc5\u8981\u7684\u7c21\u5316\u3002</p> <p>\u91dd\u5c0d\u52a0\u6cd5\u548c\u6e1b\u6cd5\u7684\u904b\u7b97\uff0c\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u7528\u53e6\u5916\u4e00\u7a2e\u89c0\u9ede\u4f86\u8a6e\u91cb\u3002\u5c0d\u65bc\u52a0\u6cd5\u904b\u7b97\uff0c\u6839\u64da\u5169\u500b Operands \u7684 Sign-Bit \u6211\u5011\u53ef\u4ee5\u628a\u554f\u984c\u5340\u5206\u6210 Magnitude \u76f8\u52a0\u3001\u76f8\u6e1b\u5169\u7a2e\u60c5\u6cc1\uff0c\u4e26\u4e14\u5728\u984d\u5916\u5224\u65b7\u7d50\u679c\u7684 Sign-Bit \u5373\u53ef\u3002 \u8a0e\u8ad6\u6d6e\u9ede\u6578\u52a0\u6cd5\u904b\u7b97 \\(A + B = C\\)\uff1a</p> <ol> <li>\u7576 \\(A\\) \u548c \\(B\\) \u540c\u865f\uff08same sign\uff09\uff1a \\(\\text{mag}\\left(A + B\\right) = \\text{mag}\\left(A\\right) + \\text{mag}\\left(B\\right) = \\text{mag}\\left(C\\right)\\)<ul> <li>\u76f4\u63a5\u628a \\(A\\) \u6216 \\(B\\) \u7684 Sign-Bit \u4f5c\u70ba \\(C\\) \u7684 Sign-Bit \u5373\u53ef</li> </ul> </li> <li>\u7576 \\(A\\) \u548c \\(B\\) \u7570\u865f\uff08contrary sign\uff09\uff1a\\(\\text{mag}\\left(A + B\\right) = |\\text{mag}\\left(A\\right) - \\text{mag}\\left(B\\right)| = \\text{mag}\\left(C\\right)\\)<ul> <li>\u5982\u679c \\(\\text{exp}\\left(A\\right) = \\text{exp}\\left(B\\right)\\)<ul> <li>\u5982\u679c \\(\\text{mag}\\left(A\\right) \\geq \\text{mag}\\left(B\\right)\\)\uff0c\u5247 \\(\\text{sign}\\left(C\\right) = \\text{sign}\\left(A\\right)\\)\uff0c\u53cd\u4e4b\u5247 \\(\\text{sign}\\left(C\\right) = \\text{sign}\\left(B\\right)\\)</li> </ul> </li> <li>\u5982\u679c \\(\\text{exp}\\left(A\\right) &gt; \\text{exp}\\left(B\\right)\\)<ul> <li>\u5247 \\(\\text{sign}\\left(C\\right) = \\text{sign}\\left(A\\right)\\)</li> </ul> </li> <li>\u5982\u679c \\(\\text{exp}\\left(A\\right) &lt; \\text{exp}\\left(B\\right)\\)<ul> <li>\u5247 \\(\\text{sign}\\left(C\\right) = \\text{sign}\\left(B\\right)\\)</li> </ul> </li> </ul> </li> </ol> <p>\u800c\u91dd\u5c0d\u6e1b\u6cd5\u904b\u7b97\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u516c\u5f0f \\(A - B = A + \\left(-B\\right)\\) \u5373\u53ef\u5c07\u6e1b\u6cd5\u554f\u984c\u8b8a\u63db\u70ba\u52a0\u6cd5\u554f\u984c\u3002\u5176\u4e2d\uff0c\u8981\u5c07\u4e00\u500b\u6d6e\u9ede\u6578\u8b8a\u865f\u975e\u5e38\u7c21\u55ae\uff0c\u53ea\u8981\u5c07\u5176 Sign-Bit \u7ffb\u8f49\uff08flip\uff09\u5373\u53ef\u3002 \u7136\u800c\uff0c\u5728\u5be6\u4f5c\u4e0a\uff0c\u56e0\u70ba\u8981\u8003\u616e\u5404\u5f0f\u5404\u6a23\u904b\u7b97\u904e\u7a0b\u4e2d\u6216\u662f\u904b\u7b97\u5f8c\u53ef\u80fd\u6703\u7522\u751f\u7684\u554f\u984c\uff0c\u5176\u5be6\u6703\u5c0e\u81f4\u7a0b\u5f0f\u78bc\u8b8a\u5f97\u76f8\u5c0d\u8907\u96dc\u5f88\u591a\u3002</p> Header file<pre><code>#ifndef __FP_H__\n#define __FP_H__\n\n#include &lt;stdbool.h&gt;\n#include \"stdint.h\"\n\n/*\n * utilize bit-field to extract sign, exponent and fraction of a fp\n * Ps: it is related to big/little-endian\n */\ntypedef struct {\n    /* the order of bit-fields is important */\n    uint32_t frac : 23;    // 23-bit fraction\n    uint16_t exponent : 8; // 8-bit exponent\n    bool sign : 1;         // a-bit sign\n} f32_field;\n\n/*\n * union type contains uint32_t, float and f32_field,\n * for easy bit string manipulation\n */\ntypedef union {\n    uint32_t ui32;   // raw bit-string\n    float f32;       // single-precision float\n    f32_field field; // float-type integer\n} ui32_f32;\n\nextern uint8_t exceptionFlags;\n\nextern float f32_add(float a, float b);\nextern float f32_sub(float a, float b);\nextern float f32_neg(float a);\nextern float f32_abs(float a);\n\n#endif\n</code></pre> <p>\u5c0d\u65bc\u4f7f\u7528\u9019\u500b library \u7684\u4f7f\u7528\u8005\u4f86\u8aaa\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>f32_</code> \u958b\u982d\u7684\u9019\u56db\u500b\u51fd\u5f0f\u4f86\u505a\u6d6e\u9ede\u6578\u8a08\u7b97\u3002\u76ee\u524d\u8003\u616e\u5230\u96e3\u6613\u5ea6\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u5be6\u4f5c\u4e86\u52a0\u6e1b\u3001\u53d6\u53cd\u6578\u548c\u7d55\u5c0d\u503c\u9019\u56db\u7a2e\u904b\u7b97\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>ui32_f32</code> \u9019\u500b\u7279\u6b8a\u7684 data type \u4f86\u5efa\u69cb\u6d6e\u9ede\u6578\u3002</p> Helper Functions<pre><code>#include &lt;stdint.h&gt;\n#include &lt;stdbool.h&gt;\n// #include &lt;stdio.h&gt;\n\n#include \"fp.h\"\n\n/* initialize exception flags */\nuint8_t exceptionFlags = 0;\n/* flag types enumeration */\ntypedef enum {\n    flag_inexact = 1,\n    flag_underflow = 2,\n    flag_overflow = 4,\n    flag_infinite = 8,\n    flag_invalid = 16\n} exceptionFlag_t;\n/* function to raise flags */\nstatic void raiseFlags(uint8_t flags) { exceptionFlags |= flags; }\n\n/* countLeadingZero8 can be viewed as a Look-Up Table (LUT) */\nstatic const uint_least8_t countLeadingZeros8[256] = {\n    8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3,\n    3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n/*\n * countLeadingZeros32 takes the advantage of countLeadingZeros8\n * to spped up the counting process\n */\nstatic inline uint8_t countLeadingZeros32(uint32_t a) {\n    uint_fast8_t count = 0;\n    if (a &lt; 0x10000) {\n        count = 16;\n        a &lt;&lt;= 16;\n    }\n    if (a &lt; 0x1000000) {\n        count += 8;\n        a &lt;&lt;= 8;\n    }\n    count += countLeadingZeros8[a &gt;&gt; 24];\n    return count;\n}\n\n/*----------------------------------------------------------------------------\n| Shifts 'a' right by the number of bits given in 'dist', which must not\n| be zero.  If any nonzero bits are shifted off, they are \"jammed\" into the\n| least-significant bit of the shifted value by setting the least-significant\n| bit to 1.  This shifted-and-jammed value is returned.\n|   The value of 'dist' can be arbitrarily large.  In particular, if 'dist' is\n| greater than 32, the result will be either 0 or 1, depending on whether 'a'\n| is zero or nonzero.\n*----------------------------------------------------------------------------*/\nstatic inline uint32_t shiftRightJam32(uint32_t a, uint16_t dist) {\n    return (dist &lt; 31) ? a &gt;&gt; dist | ((uint32_t)(a &lt;&lt; (-dist &amp; 31)) != 0)\n                       : (a != 0);\n}\n\n/*\n * basically, the sig should be a 23-bit value\n * but here is a trick that\n * the overflow part of sig will be added to the exp\n * which reduces the complexity of calculation\n * by removing additional shifting and addition\n */\nstatic inline uint32_t packToF32UI(bool sign, uint16_t exp, uint32_t sig) {\n    return (((uint32_t)(sign) &lt;&lt; 31) + ((uint32_t)(exp) &lt;&lt; 23) + (sig));\n}\n\nstatic float roundPackToF32(bool sign, int16_t exp, uint32_t sig) {\n    uint8_t roundIncrement = 0x40, roundBits = sig &amp; 0x7F;\n\n    /* add 0.5 ULP and trouncate extra-bits */\n    sig = (sig + roundIncrement) &gt;&gt; 7;\n    if (roundBits) {\n        raiseFlags(flag_inexact);\n    }\n    /* adjust LSB if it's tie-breaking case */\n    sig &amp;= ~(uint32_t)(!(roundBits ^ 0x40));\n    if (!sig) {\n        exp = 0;\n    }\n\n    ui32_f32 ret;\n    ret.ui32 = packToF32UI(sign, exp, sig);\n    return ret.f32;\n}\n\nstatic float normRoundPackToF32(bool sign, int16_t exp, uint32_t sig) {\n    int8_t shiftDist =\n        countLeadingZeros32(sig) - 1; // minus 1 because of using only 31-bit\n    ui32_f32 z;\n\n    exp -= shiftDist;\n    if ((7 &lt;= shiftDist) &amp;&amp; ((unsigned int)exp &lt; 0xFD)) {\n        z.ui32 = packToF32UI(sign, sig ? exp : 0, sig &lt;&lt; (shiftDist - 7));\n    } else {\n        return roundPackToF32(sign, exp, sig &lt;&lt; shiftDist);\n    }\n    return z.f32;\n}\n</code></pre> <p>\u63a5\u4e0b\u4f86\u6211\u5011\u5b9a\u7fa9\u4e86\u6578\u500b Helper Fuction \u7528\u4f86\u4f5c\u70ba\u4e3b\u8981\u8a08\u7b97\u904e\u7a0b\u4e2d\u7684\u8f14\u52a9\u51fd\u5f0f\u3002 \u5176\u4e2d\u6709\u4e09\u500b\u90e8\u5206\u6bd4\u8f03\u7279\u5225\uff0c\u5206\u5225\u662f <code>countLeadingZeros32</code>\u3001<code>shiftRightJam32</code> \u548c <code>roundPackTo32</code>\uff0c\u6211\u5011\u4ee5\u4e0b\u4f86\u4e00\u4e00\u63a2\u8a0e\u9019\u4e09\u500b Function \u7684\u529f\u80fd\u548c\u7279\u5225\u4e4b\u8655\u3002</p> <p>\u9996\u5148\u662f <code>countLeadingZeros32</code>\uff0c\u9019\u500b\u51fd\u6578\u7528\u4f86\u8a08\u7b97\u4e00\u500b 32-bit binray \u7684 Leading-Zeros\u3002\u57fa\u672c\u4e0a\u9019\u500b\u51fd\u5f0f\u5728\u5be6\u4f5c\u7684\u6982\u5ff5\u4e0a\u61c9\u8a72\u4e0d\u6703\u96e3\uff0c\u4ee5\u4e0b\u793a\u7bc4\u4e00\u7a2e naive \u7684\u5be6\u4f5c\u65b9\u5f0f\u3002 </p> <p>\u540d\u8a5e\uff1aNaive Implementation</p> <p>\u53c3\u8003\uff1aSienceDirect - Naive Implementation</p> Naive Implementation A naive implementation, in the context of Computer Science, refers to a simple and straightforward approach to implementing a concept or algorithm, often using basic techniques and hardware. It involves performing operations one at a time, which may result in slower speeds compared to more optimized implementations. Naive Imepletation for counting leading-zeros<pre><code>static uint8_t countLeadingZeros32(uint32_t a) {\n    uint8_t count;\n    while (!(a &amp; 0x80000000)) {\n        count++;\n        a &lt;&lt;= 1;\n    }\n    return count;\n}\n</code></pre> <p>\u4e0d\u904e\u56e0\u70ba\u4f7f\u7528 software-based \u7684\u65b9\u5f0f\u4f86\u6a21\u64ec\u6d6e\u9ede\u6578\u904b\u7b97\u672c\u8eab\u5c31\u5df2\u7d93\u5f88\u6162\u4e86\uff0c\u56e0\u6b64\u5728 Berkeley Softfloat \u4e2d\uff0c\u5229\u7528\u4e86 Look-Up Table \u7684\u65b9\u5f0f\u4f86\u5c0d\u8a08\u7b97\u904e\u7a0b\u9032\u884c\u52a0\u901f\u3002 \u5927\u81f4\u4e0a\u4f86\u8aaa\uff0c\u5148\u5229\u7528\u5169\u6b21\u7684 if-statement \u505a\u521d\u6b65\u5730\u5224\u65b7\uff0c\u6700\u5f8c\u518d\u76f4\u63a5\u4ee5\u67e5\u8868\u7684\u65b9\u5f0f\u8a08\u7b97\uff0c\u5728\u67e5\u8868\u6642\u53ea\u9700\u8a08\u7b97 8-bit binary \u7684 leading-zeros \u6578\u91cf\u3002</p> <p>\u518d\u4f86\u662f <code>shiftRightJam</code>\uff0c\u9019\u500b\u51fd\u5f0f\u5176\u5be6\u5c31\u662f\u8ca0\u8cac\u57f7\u884c\u908f\u8f2f\u53f3\u79fb\u64cd\u4f5c\uff08Logical Right-Shifting\uff09\uff0c\u4f46\u7279\u5225\u4e4b\u8655\u5728\u65bc\u5b83\u591a\u4e86 Jamming \u64cd\u4f5c\u3002 \u9084\u8a18\u5f97\u524d\u9762\u6211\u5011\u8aaa\uff0c\u70ba\u4e86\u4f7f\u904b\u7b97\u5f8c\u6368\u5165\u7684\u7d50\u679c\u70ba\u6b63\u78ba\u7d50\u679c\uff0c\u6211\u5011\u5fc5\u9808\u5229\u7528 GRS \u9019\u4e09\u500b extra-bit \u4f86\u8f14\u52a9\u904b\u7b97\uff0c\u5176\u4e2d Sticky Bit \u5fc5\u9808\u8981\u4f7f\u7528 Reduced-OR \u7684\u65b9\u5f0f\u4f86\u5be6\u4f5c\uff0c\u800c Jamming \u64cd\u4f5c\u6307\u7684\u5c31\u662f\u9019\u500b\u90e8\u5206\u3002</p> <p>\u6700\u5f8c\u662f <code>roundPackToF32</code> \u9019\u500b\u51fd\u5f0f\uff0c\u9019\u500b\u51fd\u5f0f\u7684\u4e3b\u8981\u529f\u80fd\u662f\u5c07\u7d66\u5b9a\u7684 Sign\u3001Exponent \u548c Significand\uff08\u6ce8\u610f\uff0c\u4e0d\u662f Fraction\uff09\u7d93\u904e Rounding \u4e4b\u5f8c\uff0c\u518d\u8f49\u63db\u6210 FP32 \u7684\u683c\u5f0f\u3002 \u6b63\u5e38\u4f86\u8aaa\uff0cIEEE 754 \u7684\u898f\u7bc4\u898f\u5b9a\u4e86\u5c0d\u65bc Normal Number \u4f86\u8aaa\uff0c\u6211\u5011\u53ea\u9700\u8981\u5132\u5b58 Significand \u4e2d Fraction \u7684\u90e8\u5206\uff0c\u5c07 Leading-one \u7701\u7565\uff0c\u8b8a\u6210 Implicit Leading-one\u3002 \u800c\u5c0d\u65bc Subnormal Number \u4f86\u8aaa\uff0c\u4e0d\u6703\u6709 Leading-one \u7684\u5b58\u5728\uff0c\u5728\u6578\u503c\u4e0a\u4e5f\u50c5\u6709 Fraction \u7684\u90e8\u5206\u3002 \u5728 <code>roudPackToF32</code> \u4e2d\uff0c\u5982\u679c\u6211\u5011\u53c8\u4f9d\u7167\u50b3\u5165\u7684 Exponent \u548c Significand \u4f86\u5224\u65b7\u8a72\u6578\u662f Normal \u9084\u662f Subnormal \u7136\u5f8c\u6c7a\u5b9a\u8a72\u5982\u679c\u8f49\u63db\u683c\u5f0f\uff0c\u6703\u9020\u6210\u984d\u5916\u7684\u958b\u92b7\u3002 \u6ce8\u610f\u5230\uff0c\u6839\u64da <code>packToF32UI</code> \u9019\u500b\u51fd\u5f0f\u7684\u5be6\u4f5c\u4f86\u8aaa\uff0c\u5176\u5be6 Significand \u591a\u51fa\u4f86\u7684 Leading-one\uff08i.e., 24-th bit\uff09\u5176\u5be6\u53ef\u4ee5\u76f4\u63a5\u8996\u70ba Overflow \u4e26\u4e14\u6703\u88ab\u76f4\u63a5\u52a0\u5230 Exponent \u7576\u4e2d\u3002 \u4e5f\u56e0\u6b64\u6211\u5011\u5728\u5be6\u4f5c\u4e0a\u4e0d\u7528\u518d\u984d\u5916\u5224\u65b7 Normal/Subnormal\uff0c\u53ea\u8981\u76f4\u63a5\u547c\u53eb <code>packToF32UI</code> \u5373\u53ef\u3002</p> Magnitude Addition<pre><code>static float addMag_F32(uint32_t uiA, uint32_t uiB) {\n    ui32_f32 a, b, z;\n    a.ui32 = uiA;\n    b.ui32 = uiB;\n\n    int16_t expA = a.field.exponent;\n    int16_t expB = b.field.exponent;\n    uint32_t sigA = a.field.frac;\n    uint32_t sigB = b.field.frac;\n\n    bool signZ;\n    int16_t expZ;\n    uint32_t sigZ;\n\n    int16_t expDiff = expA - expB;\n\n    if (!expDiff) {\n        /* A and B have the same exponents */\n        if (!expA) {\n            /* exponents of A and B are zero (subnormal) */\n            z.ui32 = uiA + sigB;\n            goto uiz;\n        }\n        /* A and B are normal number */\n        signZ = a.field.sign;\n        expZ = expA;\n        sigZ = 0x01000000 + sigA + sigB; // contain \"two\" implicit leading 1\n        if (!(sigZ &amp; 1) &amp;&amp; (expZ &lt; 0xFE)) {\n            /* check whether it can be normalized */\n            z.ui32 = packToF32UI(signZ, expZ, sigZ &gt;&gt; 1); // without rounding\n            goto uiz;\n        }\n        sigZ &lt;&lt;= 6;\n    } else {\n        /* A and B have the different exponents */\n        signZ = a.field.sign;\n        /* keep 6 extra-bits befor starting calculating */\n        sigA &lt;&lt;= 6;\n        sigB &lt;&lt;= 6;\n        if (expDiff &gt; 0) {\n            /* align to A */\n            /* A must be normal FP */\n            expZ = expA;\n            sigB += expB ? 0x20000000 : sigB;\n            sigB = shiftRightJam32(sigB, expDiff);\n        } else {\n            /* align to B */\n            /* B must be normal FP */\n            expZ = expB;\n            sigA += expA ? 0x20000000 : sigA;\n            sigA = shiftRightJam32(sigA, -expDiff);\n        }\n        sigZ =\n            0x20000000 + sigA + sigB; // contain only \"one\" implicit leading 1\n        /* check and normalize */\n        if (sigZ &lt; 0x40000000) {\n            expZ--;\n            sigZ &lt;&lt;= 1;\n        }\n    }\n    return roundPackToF32(signZ, expZ, sigZ); // round and pack\nuiz:\n    return z.f32;\n}\n</code></pre> Magnitude Substraction<pre><code>static float subMag_F32(uint32_t uiA, uint32_t uiB) {\n    ui32_f32 a, b, z;\n    a.ui32 = uiA;\n    b.ui32 = uiB;\n\n    uint8_t signA = a.field.sign;\n    uint8_t signB = b.field.sign;\n    bool signZ;\n    int16_t expA = a.field.exponent;\n    int16_t expB = b.field.exponent;\n    int16_t expZ;\n    uint32_t sigA = a.field.frac;\n    uint32_t sigB = b.field.frac;\n    uint32_t sigX, sigY, sigZ;\n\n    int8_t shiftDist;\n    int16_t expDiff;\n    int32_t sigDiff;\n    uint32_t uiZ;\n\n    /* main part */\n    expDiff = expA - expB;\n    if (!expDiff) {\n        /* expA == expB */\n        sigDiff = sigA - sigB;\n        if (!sigDiff) {\n            /* sigA == sigB */\n            uiZ = packToF32UI(0, 0, 0);\n            goto uiZ;\n        }\n        if (expA) {\n            expA--;\n        }\n        signZ = a.field.sign;\n        if (sigDiff &lt; 0) {\n            signZ = !signZ;\n            sigDiff = -sigDiff;\n        }\n        shiftDist = countLeadingZeros32(sigDiff) - 8;\n        expZ = expA - shiftDist;\n        if (expZ &lt; 0) {\n            shiftDist = expA;\n            expZ = 0;\n        }\n        uiZ = packToF32UI(signZ, expZ, sigDiff &lt;&lt; shiftDist);\n        goto uiZ;\n    } else {\n        signZ = a.field.sign;\n        sigA &lt;&lt;= 7; // keep 7 extra-bits\n        sigB &lt;&lt;= 7;\n        if (expDiff &lt; 0) {\n            /* expA &lt; expB */\n            signZ = !signZ;\n            expZ = expB - 1;\n            sigX = sigB | 0x40000000;\n            sigY = sigA + (expA ? 0x40000000 : sigA);\n            expDiff = -expDiff;\n        } else {\n            /* expA &gt; expB */\n            expZ = expA - 1;\n            sigX = sigA | 0x40000000;\n            sigY = sigB + (expB ? 0x40000000 : sigB);\n        }\n        return normRoundPackToF32(signZ, expZ,\n                                  sigX - shiftRightJam32(sigY, expDiff));\n    }\nuiZ:\n    z.ui32 = uiZ;\n    return z.f32;\n}\n</code></pre> <p>\u6700\u5f8c\uff0c\u6839\u64da\u6211\u5011\u6700\u4e00\u958b\u59cb\u7684\u8a0e\u8ad6\uff0c\u5c0d\u65bc\u6d6e\u9ede\u6578\u52a0\u6e1b\u6cd5\u9019\u5169\u7a2e\u904b\u7b97\uff0c\u6211\u5011\u5be6\u969b\u4e0a\u90fd\u53ef\u4ee5\u8f49\u63db\u6210 Magnitude \u76f8\u52a0\u6216\u76f8\u6e1b\u7684\u554f\u984c\u3002 \u5728 Berkeley SoftFloat \u7684\u5be6\u4f5c\u4e2d\uff0c\u63a1\u7528\u7684\u65b9\u5f0f\u662f\u5c07 Leading-one \u5c0d\u9f4a\uff08align\uff09\u5230\u7b2c 31 \u500b bit\uff0c\u6240\u4ee5\u6703\u591a\u51fa 7 \u500b extra-bit\u3002</p> Actual API for users (add, sub, neg and abs)<pre><code>float f32_add(float a, float b) {\n    ui32_f32 uA, uB;\n    float (*magsFuncPtr)(uint32_t, uint32_t); // function ptr\n\n    uA.f32 = a, uB.f32 = b;\n    magsFuncPtr = (uA.field.sign ^ uB.field.sign) ? &amp;subMag_F32 : &amp;addMag_F32;\n    return magsFuncPtr(uA.ui32, uB.ui32);\n}\n\nfloat f32_sub(float a, float b) { return f32_add(a, f32_neg(b)); }\n\nfloat f32_neg(float a) {\n    ui32_f32 ret;\n    ret.ui32 = *(uint32_t *)(&amp;a) ^ 0x80000000;\n    return ret.f32;\n}\n\nfloat f32_abs(float a) {\n    ui32_f32 ret;\n    ret.ui32 = *(uint32_t *)(&amp;a) &amp; 0x7fffffff;\n    return ret.f32;\n}\n</code></pre> <p>\u6700\u5f8c\uff0c\u6211\u5011\u53ef\u4ee5\u770b\u5230\u5728 <code>f32_add</code> \u9019\u500b\u51fd\u5f0f\u4e2d\uff0c\u5229\u7528\u4e86\u4e00\u500b Function Pointer <code>magsFuncPtr</code> \u914d\u5408 a \u548c b \u7684 sign-bit \u4f86\u5224\u65b7\u8981\u547c\u53eb <code>addMag_F32</code> \u9084\u662f <code>subMag_F32</code>\u3002</p> <p>Big-Endian &amp; Little-Endian \u5c0d Floating-Point Negation \u5be6\u4f5c\u4e0a\u7684\u5f71\u97ff</p> <p>\u53c3\u8003\uff1a\u6d6e\u9ede\u6578\u904b\u7b97\u548c\u5b9a\u9ede\u6578\u64cd\u4f5c</p> <p>\u5f9e\u524d\u9762\u7684\u7a0b\u5f0f\u78bc\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u5011\u5229\u7528\u4e86 C \u8a9e\u8a00\u4e2d\u7684 Bit-Field \u6280\u5de7\u4f86\u66f4\u65b9\u4fbf\u5730\u53d6\u51fa Sign\u3001Exponent \u548c Fraction\u3002\u4f46\u662f\uff0cBit-Field \u7684\u9806\u5e8f\u5176\u5be6\u6703\u53d7\u5230 Endianness \u7684\u5f71\u97ff\u3002 \u5982\u679c\u662f Big-Endian \u7684\u67b6\u69cb\uff0c\u6211\u5011\u76ee\u524d\u6240\u5b9a\u7fa9\u7684 Bit-Field \u7684\u9806\u5e8f\u5c31\u5fc5\u9808\u985b\u5012\u904e\u4f86\uff0c\u8b8a\u6210\u5148\u5ba3\u544a Fraction\u3001\u518d\u5ba3\u544a Exponent \u548c Sign\u3002</p>"},{"location":"labs/lab3/#chapter-3-how-to-compile-and-run-the-demo","title":"Chapter 3. How to Compile and Run The Demo","text":"<p>\u70ba\u4e86\u540c\u6642\u64cd\u662f\u6211\u5011\u5be6\u4f5c\u7684 I/O Library \u548c Floating-Point Emulation Library\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e00\u500b\u975e\u5e38\u6709\u8da3\u7684\u7a0b\u5f0f\u4f86\u6e2c\u8a66\uff0c\u9019\u500b\u7a0b\u5f0f\u7684\u7528\u9014\u662f\u5229\u7528 ASCII Code \u756b\u51fa\u975e\u5e38\u540d\u7684\u788e\u5f62 Mandelbrot Set\u3002</p> Draw Mandelbrot Set with ASCII<pre><code>#include \"../lib/include/io.h\"\n#include \"../lib/include/fp.h\"\n\nint main(void) {\n    int n;\n    float r, i, R, I, b;\n    for (i = -1; i &lt; 1; i = f32_add(i, 0.06), puts(\"\\n\"))\n        for (r = -2; I = i, (R = r) &lt; 1; r = f32_add(r, 0.03), putchar(n + 31))\n            for (n = 0; b = I * I, 26 &gt; n++ &amp;&amp; f32_add(R * R, b) &lt; 4;\n                 I = f32_add(2 * R * I, i), R = f32_add(f32_sub(R * R, b), r))\n                ;\n}\n</code></pre> <p>\u53d7\u9650\u65bc\u6211\u5011\u53ea\u6709\u5be6\u4f5c\u6d6e\u9ede\u6578\u7684\u52a0\u6e1b\u6cd5\u904b\u7b97\u7684\u6a21\u64ec\uff0c\u4f46\u662f\u7e6a\u88fd Mandelbrot Set \u6703\u9700\u8981\u7528\u5230\u6d6e\u9ede\u6578\u7684\u4e58\u6cd5\u904b\u7b97\u9084\u6709\u6bd4\u8f03\u904b\u7b97\uff0c\u6240\u4ee5\u6211\u5011\u9084\u662f\u5fc5\u9808\u8981\u4f7f\u7528 Libgcc \u4f86\u5f4c\u88dc\u6211\u5011\u5be6\u4f5c\u4e0a\u7684\u4e0d\u8db3\uff0c\u624d\u80fd\u4f7f\u9019\u500b\u7a0b\u5f0f\u5728\u6211\u5011\u7684 ISS \u4e0a\u57f7\u884c\u3002</p> <p>\u57f7\u884c\u5f8c\u9810\u671f\u6703\u770b\u5230\u4ee5\u4e0b\u8f38\u51fa\uff1a</p> <p>\u5982\u540c Lab 2\uff0c\u53ea\u8981\u8f38\u5165 <code>make</code> \u5c31\u53ef\u4ee5\u57f7\u884c\u7de8\u8b6f\uff0c\u6240\u6709\u7de8\u8b6f\u904e\u7a0b\u4e2d\u7522\u751f\u7684\u6a94\u6848\u548c\u6700\u7d42\u7684\u57f7\u884c\u6a94\uff08ELF\uff09\u90fd\u6703\u88ab\u653e\u5728 <code>build/</code> \u8cc7\u6599\u593e\u5e95\u4e0b\u3002</p>"},{"location":"labs/lab3/#chapter-4-start-to-do-the-assignment","title":"Chapter 4. Start to Do The Assignment","text":""},{"location":"labs/lab3/#41-assignment-requirement","title":"4.1 Assignment Requirement","text":"<ol> <li>\u5b8c\u6210 <code>printf</code> \u7684\u5be6\u4f5c\uff0c\u4e26\u4e14\u5c07 Mandelbrot Set \u7a0b\u5f0f\u4e2d\u7684 <code>puts</code> \u548c <code>putchar</code> \u66ff\u63db\u6210 printf\u3002</li> <li>\u5b8c\u6210 Assignment Report\uff0c\u4e26\u4e14\u56de\u7b54 Report \u4e2d\u7684\u63d0\u554f</li> </ol>"},{"location":"labs/lab3/#42-notes","title":"4.2 Notes","text":"<ol> <li>Clone the sample code<ul> <li>\u5148\u78ba\u5b9a\u81ea\u5df1\u5df2\u7d93\u6253\u958b\u8ab2\u7a0b\u958b\u767c\u74b0\u5883\uff08Container\uff09\uff0c\u4e26\u4e14\u5728\u74b0\u5883\u4e2d\u7684 <code>workspace</code> \u5e95\u4e0b</li> <li>\u4e0b\u8f09\u52a9\u6559\u63d0\u4f9b\u7684 Sample Code <p><code>git clone https://gitlab.course.aislab.ee.ncku.edu.tw/113-1/lab-3.git</code></p> </li> <li>\u9032\u5165\u8cc7\u6599\u593e <p><code>cd lab-3</code></p> </li> </ul> </li> <li>Create a private repo<ul> <li>\u5982\u540c Lab 1 \u6240\u8ff0\uff0c\u5728 Gitlab \u4e0a\u9762\u5275\u5efa\u500b\u4eba Repo\uff0c\u4e26\u4e14\u547d\u540d\u70ba <code>Lab 3</code>\uff0c\u8acb\u4e0d\u8981\u52fe\u9078 Initialize the repository with README</li> <li>\u78ba\u8a8d branch \u7684\u540d\u7a31\u70ba main \u800c\u975e master <p><code>git branch -M main</code></p> </li> <li>\u65b0\u589e\u81ea\u5df1\u7684 Private Gitlab Repo \u70ba Remote Source <p><code>git remote add private &lt;HTTPS URL of your private repo&gt;</code></p> </li> </ul> </li> <li>\u5c07\u7a0b\u5f0f\u78bc Push \u4f60\u7684 Private Repository<ul> <li>\u8acb\u8a18\u5f97\u662f\u63a8\u5230 <code>private</code> \u800c\u975e <code>origin</code> <p><code>git push -u private main</code></p> </li> </ul> </li> <li>Notes<ul> <li>\u56e0\u70ba\u5728\u9810\u8a2d\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u8981 Gitlab Repo \u4e2d\u5305\u542b <code>.gitlab-ci.yml</code> \u6a94\u6848\u5c31\u6703\u89f8\u767c CI/CD Pipeline\uff0c\u5982\u679c\u4f60\u5728\u524d\u671f\u5c1a\u672a\u5b8c\u6210\u4f5c\u696d\u7684\u6642\u5019\u4e0d\u60f3\u89f8\u767c Pipeline\uff0c\u53ef\u4ee5\u5148\u5728 Gitlab \u4f60\u7684 Private Repo \u4e2d\u7684\u8a2d\u5b9a\u5c07 CI/CD \u529f\u80fd\u95dc\u9589\uff0c\u5f85\u5b8c\u6210\u4f5c\u696d\u4e4b\u5f8c\u518d\u6253\u958b</li> </ul> </li> <li>\u8acb\u8a18\u5f97\u4f9d\u64da Assignment Report Template \u64b0\u5beb\u672c\u6b21\u4f5c\u696d\u7684\u5831\u544a\uff0c\u4e26\u4e14\u7e73\u4ea4\u5831\u544a\u9023\u7d50\u5230\u6210\u5927 Moodle \u4f5c\u696d\u7e73\u4ea4\u5340\u4e0a</li> </ol> <ol> <li> <p>\u9019\u88e1\u7684\u8ab2\u672c\u6307\u7684\u662f\uff1aComputer Organization and Design RISC-V Edition: The Hardware/Software Interface \u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"labs/lab4/","title":"Lab 4 - RTL Programming Review using SystemVerilog","text":"<p>Info</p> <ul> <li>Contributors\uff1aTA \u6c4e\u7a4e\u3001TA \u5b9c\u84c1\u3001TA \u5349\u84c1\u3001TA \u5cfb\u8c6a</li> <li>Deadline : 2024/XX/XX</li> <li>Last updated : 2024/XX/XX</li> </ul>"},{"location":"labs/lab4/#chapter-1-combinational-circuit-radix-4-booth-multiplier-with-wallace-tree","title":"Chapter 1. Combinational Circuit - Radix-4 Booth Multiplier with Wallace Tree","text":"<p>Success</p> <p>\u95dc\u65bc Two's Complement \u7684\u539f\u7406\uff0c\u5f37\u70c8\u63a8\u85a6\u95b1\u8b80\u9019\u4e9b\u8cc7\u6599</p> <ol> <li>\u89e3\u8b80\u8a08\u7b97\u6a5f\u7de8\u78bc</li> <li>\u6a21\u7b97\u8853</li> <li>CS:APP3e Chapter 2. Representing and Manipulating Information</li> </ol>"},{"location":"labs/lab4/#twos-complement-binary-to-decimal-number","title":"Two's Complement Binary to Decimal Number","text":"<p>\u901a\u5e38\u5728\u6578\u4f4d\u96fb\u8def\u4e0a\u5be6\u4f5c\u6709\u865f\u6578\u6574\u6578\u904b\u7b97\u7684\u6642\u5019\uff0c\u6211\u5011\u6703\u4f7f\u7528 Two's Complement \u4f86\u8868\u793a\u4e00\u500b\u6709\u865f\u6578\uff0c\u4f46\u4f60\u6709\u6c92\u6709\u60f3\u904e\u4e00\u500b n-bits \u7684\u6709\u865f\u6578\u5982\u4f55\u88ab\u7cfb\u7d71\u6027\u5730\u8f49\u63db\u6210\u5341\u9032\u4f4d\uff08Decimal\uff09\uff1f</p> <p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b n-bits \u7684\u4e8c\u9032\u4f4d\u6578 \\(X_{\\text{two}} = a_{n-1}a_{n-2}...a_0\\)\uff0c\u4e26\u4e14 \\(X_{\\text{two}}\\) \u4ee5\u4e8c\u88dc\u6578\u8868\u793a\uff0c\u5247\u6211\u5011\u53ef\u4ee5\u5c07\u5176\u900f\u904e\u4e0b\u9762\u7684\u516c\u5f0f\u8f49\u63db\u6210\u5341\u9032\u4f4d\u3002</p> \\[ \\begin{equation} X_{\\text{ten}} = -a_{n-1} \\times 2^{n-1} + \\sum_{i=0}^{n-2}a_{i} \\times 2^i \\end{equation} \\] <p>\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u57fa\u65bc\u9019\u500b\u516c\u5f0f\u4f86\u63a8\u5c0e\u6709\u865f\u6578\u4e58\u6cd5\uff08Signed Multiplication\uff09\u3002</p>"},{"location":"labs/lab4/#signed-multiplication-with-baugh-wooley-algorithm-and-array-multiplier","title":"Signed Multiplication with Baugh-Wooley Algorithm and Array Multiplier","text":"<p>Note</p> <p>\u5728 Binary Operation \u4e2d\uff0c\u4e58\u4ee5 \\(2^{n}\\) \u4ee3\u8868\u5de6\u79fb n bits\uff08LSB\u88dc\u96f6\uff09\u3002\u81f3\u65bc\u53f3\u79fb\u64cd\u4f5c\uff0c\u5247\u5fc5\u9808\u8981\u5148\u5340\u5206\u662f Arithmetic Right-Shift \u6216\u662f Logical Right-Shift \u4f86\u6c7a\u5b9a MSB \u8981\u88dc Sign-Bit \u9084\u662f\u7121\u689d\u4ef6\u88dc 0\u3002 \u5982\u679c\u662f\u5c0d\u4e00\u500b Signed Number \u9664\u4ee5 \\(2^n\\) \u7684\u8a71\uff0c\u5247\u9700\u8981\u9032\u884c Arithmetically Right-Shift\uff0c\u4e5f\u5c31\u662f\u5fc5\u9808\u8981\u5728 MSB \u7684\u90e8\u5206\u88dc\u4e0a Sign-Bit\u3002 \u5982\u679c\u662f\u5c0d Unsigned Number \u9664\u4ee5 \\(2^n\\) \u7684\u8a71\uff0c\u5247\u8981\u5728 MSB \u88dc\u96f6\uff0c\u4e5f\u5c31\u662f Logically Right-Shfit\u3002</p> <p>Info</p> <p>\u63d0\u51fa Baugh-Wooley Algorithm \u7684\u8ad6\u6587\uff1aC. R. Baugh and B. A. Wooley, \"A Two's Complement Parallel Array Multiplication Algorithm,\" in IEEE Transactions on Computers, vol. C-22, no. 12, pp. 1045-1047, Dec. 1973</p> <p>\u5047\u8a2d\u6211\u5011\u6709\u5169\u500b n-bits \u7684\u6709\u865f\u6578\uff08Signed NUmber\uff09\\(X[n-1 : 0]\\) \u548c \\(Y[n-1:0]\\)\uff0c\u5982\u679c\u6211\u5011\u60f3\u8981\u5c07\u4ed6\u5011\u76f8\u4e58\uff0c\u5247\u53ef\u4ee5\u8868\u793a\u70ba\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> \\[ \\begin{equation} X \\times \\{\\textcolor{red}{-}(Y_{n-1} \\times 2^{n-1}) + (Y_{n-2} \\times 2^{n-2}) + (Y_{n-3} \\times 2^{n-3}) + ... + (Y_1 \\times 2^1) + (Y_0 \\times 2^0)\\} \\end{equation} \\] <p>\u5c07 \\(X\\) \u4e58\u5165\u4e4b\u5f8c\uff0c\u518d\u5c07 n \u500b\u90e8\u5206\u7a4d\uff08Partial Product\uff09\u52a0\u8d77\u4f86\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u7d42\u7684\u7d50\u679c\u3002</p> <p>\u6ce8\u610f\u5230\uff0c\u5728\u6709\u865f\u6578\u4e58\u6cd5\u7576\u4e2d\uff0c\u6211\u5011\u672c\u4f86\u61c9\u8a72\u8981\u5c0d Partial Product \u9032\u884c Sign-Extension \u4e4b\u5f8c\u624d\u80fd\u52a0\u7e3d\uff0c\u5426\u5247\u6703\u51fa\u932f\u3002 \u4f46\u662f\uff0c\u8655\u7406 Sign-Extension \u7684\u90e8\u5206\u6703\u589e\u52a0\u96fb\u8def\u8907\u96dc\u5ea6\u3002\u56e0\u6b64\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528 Baugh-Wooley Algorithm \u4f86\u7c21\u5316\u904b\u7b97\u904e\u7a0b\uff0c\u900f\u904e\u7279\u6b8a\u7684\u6280\u5de7\u4f7f\u6211\u5011\u53ef\u4ee5\u4e0d\u7528\u8655\u7406 Sign-Extension \u7684\u90e8\u5206\u3002 \u5047\u8a2d\u6211\u5011\u6709\u5169\u500b\u6578 \\(X[n-1:0]\\) \u548c \\(Y[m-1:0]\\) \u8981\u76f8\u4e58\uff0c\u5247\u61c9\u8868\u793a\u70ba\uff1a</p> \\[ \\begin{equation} X \\times Y = (-x_{n-1} \\times 2^{n-1} + \\sum_{i=0}^{n-2} x_i \\times 2^i) \\times (-y_{m-1} \\times 2^{m-1} + \\sum_{i=0}^{m-2} y_i \\times 2^i) = (x_{n-1}y_{m-1} \\times 2^{n+m-2} + \\sum_{i=0}^{n-2} \\sum_{j=0}^{m-2} x_i y_j \\times 2^{i+j}) - (2^{n-1} \\times \\sum_{i=0}^{m-2} x_{n-1}y_i \\times 2^{i} + 2^{m-1} \\times \\sum_{i=0}^{n-2} y_{m-1}x_i \\times 2^{i}) \\end{equation} \\] <p>\u6211\u5011\u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u7b97\u5f0f\u5c0d\u61c9\u5230\u4e0b\u9762\u7684\u76f4\u5f0f\u904b\u7b97\uff0c\u7279\u5225\u6ce8\u610f\u5230\u6700\u5f8c\u5169\u500b row \u662f\u6e1b\u6cd5\u904b\u7b97\uff0c\u800c\u975e\u52a0\u6cd5\u904b\u7b97\u3002</p> <p></p> <p>\u6709\u6c92\u6709\u4ec0\u9ebc\u65b9\u5f0f\u53ef\u4ee5\u5c07\u7b97\u5f0f\u8b8a\u5f62\uff1f\u5229\u7528\u4e8c\u88dc\u6578\u7684\u539f\u7406\uff0c\u6bd4\u8d77\u6e1b\u53bb\u4e00\u500b\u6578\uff0c\u6211\u5011\u53ef\u4ee5\u52a0\u4e0a\u9019\u500b\u6578\u7684\u4e8c\u88dc\u6578\uff0c\u5c0d\u65bc\u4e00\u500b\u6578 \\(Z = z_{n-1}z_{n-2}...z_0\\)\uff0c\u5176\u4e8c\u88dc\u6578\u53ef\u4ee5\u8868\u793a\u70ba\uff1a</p> \\[ -Z = -\\overline{z_{i-1}} \\times 2^{n} + \\sum_{i=0}^{n-1} \\bar{z_i} \\times 2^i + 1 \\] <p>\u65bc\u662f\u5c0d\u65bc</p> \\[ \\begin{equation} \\textcolor{red}{-}2^{n-1} \\times (-0 \\times 2^m + 0 \\times  2^{m-1} + \\sum_{i=0}^{m-2} x_{n-1}y_i \\times 2^i) \\end{equation} \\] <p>\u53ef\u4ee5\u6539\u5beb\u6210</p> \\[ \\begin{equation} \\textcolor{red}{+}2^{n-1} \\times (-1 \\times 2^m + 1 \\times  2^{m-1} + \\sum_{i=0}^{m-2} \\overline{x_{n-1}y_i} \\times 2^i + 1) \\end{equation} \\] <p>\u65bc\u662f\uff0c\u6211\u5011\u5c07 \\(X \\times Y\\) \u6539\u5beb\u6210</p> \\[ \\begin{equation} X \\times Y = x_{n-1}y_{m-1} \\times 2^{n+m-2} + \\sum_{i=0}^{n-2} \\sum_{j=0}^{m-2} x_iy_j \\times 2^{i+j} + 2^{n-1} \\times (-2^m + 2^{m-1} + \\sum_{i=0}^{m-2}\\overline{x_{n-1}y_i} \\times 2^i) +\\\\ 2^{m-1} \\times (-2^n + 2^{n-1} + \\sum_{i=0}^{n-2}\\overline{y_{m-1}x_i} \\times 2^i) \\end{equation} \\] <p>\u91dd\u5c0d \\(-2^m + 2^{m-1} + \\sum_{i=0}^{m-2}\\overline{x_{n-1}y_i} \\times 2^i\\)\uff0c\u6211\u5011\u9032\u4e00\u6b65\u8b8a\u5f62</p> <p>Ps\uff1a\u5927\u5bb6\u53ef\u4ee5\u628a \\(x_{n-1}\\) \u7b49\u65bc 0 \u548c 1 \u5206\u5225\u4ee3\u5165\u5373\u53ef\u78ba\u8a8d\u5169\u8005\u662f\u7b49\u50f9\u7684</p> \\[ \\begin{equation} -2^m + 2^{m-1} + \\sum_{i=0}^{m-2}\\overline{x_{n-1}y_i} \\times 2^i = -2^m + 2^{m-1} + \\overline{x_{n-1}} \\times 2^{m-1} + \\overline{x_{n-1}} + \\sum_{i=0}^{m-2} x_{n-1}\\bar{y_{i}} \\times 2^i \\end{equation} \\] <p>\u505a\u9019\u6b65\u9a5f\u7684\u662f\u56e0\u70ba\uff0c\u6211\u5011\u628a\u539f\u672c\u7684 \\(\\overline{x_{n-1}y_i}\\) \u8b8a\u6210\u4e86 \\(x_{n-1}\\bar{y}_{i}\\)\uff0c\u5c31\u53ef\u4ee5\u628a\u96fb\u8def\u4e2d\u672c\u4f86\u9700\u8981\u7684 NAND Gate \u8b8a\u6210 NOT Gate\u3002\u6700\u7d42\uff0c\u6211\u5011\u518d\u6b21\u5c07\u7b97\u5f0f\u5c0d\u61c9\u5230\u4e0b\u9762\u7684\u76f4\u5f0f\u904b\u7b97</p> <p></p> <p>\u4e0a\u8ff0\u662f\u6700\u539f\u59cb\u7684 Baugh-Wooley Algorithm\uff0c\u597d\u8655\u662f\u53ea\u8981\u628a\u67d0\u4e9b term \u505a NOT \u904b\u7b97\u4e4b\u5f8c\uff0c\u5373\u53ef\u628a\u6240\u6709\u7684 Partial Products \u90fd\u8996\u70ba Posotive\uff0c\u4e0d\u7528\u7279\u5225\u7684\u6e1b\u6cd5\u96fb\u8def\u4f86\u9032\u884c\u904b\u7b97\u3002\u4f46\u6211\u5011\u76ee\u524d\u63a1\u7528\u7684\u901a\u5e38\u90fd\u662f Modified Baugh-Wooley Algorithm\uff0c\u4ee5 4-bits \u4e58\u6cd5\u70ba\u4f8b\uff1a</p> <p></p> <p>\u6211\u5011\u5c07\u4e0a\u5716\u7684\u904b\u7b97\u904e\u7a0b\u5c0d\u61c9\uff08Mapping\uff09\u5230\u96fb\u8def\uff0c\u5f97\u5230\u5982\u4e0b\u5716\u7684\u96fb\u8def\uff0c\u7a31\u70ba\u9663\u5217\u4e58\u6cd5\u5668\uff08Array Multiplier\uff09\uff1a</p> <p></p> <p>\u5716\u7247\u4f86\u6e90\uff1alink</p> <p>\u6b64\u5916\uff0c\u6709\u5e7e\u500b\u91cd\u9ede\u6211\u5011\u8981\u6ce8\u610f</p> <ol> <li>\u6bcf\u4e00\u5217\u90fd\u662f Ripple-Carry Adder\uff08RCA\uff09\u7684\u67b6\u69cb\uff0c\u540c\u4e00\u5217\u4e2d\u7b2c n+1 \u500b bit \u7684\u52a0\u6cd5\u9700\u7b49\u5f85\u7b2c n \u500b bit \u7684\u9032\u4f4d\uff08carry\uff09\u7b97\u5b8c\u624d\u80fd\u9032\u884c</li> <li>\u7b2c\u4e00\u500b\u90e8\u5206\u7a4d\u8207\u7b2c\u4e8c\u500b\u90e8\u5206\u7a4d\u76f8\u52a0\u6c42\u5f97\u548c\u5f8c\uff0c\u518d\u8207\u7b2c\u4e09\u500b\u90e8\u5206\u7a4d\u76f8\u52a0\uff0c\u6bcf\u4e00\u5217\u7684\u52a0\u6cd5\u90fd\u8981\u7b49\u4e0a\u4e00\u5217\u52a0\u6cd5\u90e8\u5206\u5b8c\u6210\u5f8c\u624d\u80fd\u9032\u884c</li> <li>Critical Path \u5171\u9700\u8981\u7d93\u904e 9 \u500b Adder\uff082 \u500b Half-Adder \u518d\u52a0\u4e0a 7 \u500b Full-Adder\uff09\uff0c\u6703\u9020\u6210\u4e58\u6cd5\u5668\u6709\u5f88\u9577\u7684 Logic Delay\uff0c\u5c24\u5176\u7576 Operand \u7684 bit \u6578\u589e\u52a0\u6642\uff0cCritical path \u8207 Delay \u4e5f\u6703\u96a8\u4e4b\u5feb\u901f\u589e\u9577\uff0c\u9019\u5c0d\u6548\u80fd\u6703\u6709\u5f88\u5927\u7684\u5f71\u97ff</li> <li>\u548c\u8ab2\u5802\u4e0a\u6559\u7684\u4e58\u6cd5\u5668\u6709\u4e00\u500b\u672c\u8cea\u7684\u4e0d\u540c\u662f\uff0c\u9019\u500b Array Multiplier \u53ea\u9700\u8981\u4e00\u500b Clock Cycle \u5373\u53ef\u5b8c\u6210\u904b\u7b97\uff0c\u800c\u8ab2\u5802\u4e0a\u6240\u8ff0\u7684\u662f Multi-Cycle Binary Multiplier\u3002\u901a\u5e38\u5728 CPU \u5167\u90e8\uff0c\u4e58\u6cd5\u5668\u6703\u7531 Single-Cycle \u7684\u8a2d\u8a08\u52a0\u4e0a\u9069\u7576\u7684 Pipeline \u4f86\u4f7f\u5176 Critical Path \u4e0d\u6703\u592a\u9577\uff0c\u540c\u6642\u53c8\u53ef\u4ee5\u5728\u6578\u500b cycle \u5167\u5373\u53ef\u5b8c\u6210\u6574\u6578\u4e58\u6cd5\u904b\u7b97</li> </ol> <p>Warning</p> <p>\u8acb\u7279\u5225\u6ce8\u610f\u5716\u7247\u4e0a\u67d0\u4e9b AND Gate \u7684 Output \u5176\u5be6\u6709\u4e00\u500b\u5c0f\u5713\u9ede\uff0c\u6240\u4ee5\u662f NAND Gate</p> <p>\u70ba\u4e86\u63d0\u5347\u4e58\u6cd5\u5668\u7684\u6548\u80fd\uff0c\u6211\u5011\u63a5\u4e0b\u4f86\u8981\u63a2\u8a0e\u5169\u7a2e\u512a\u5316\u4e58\u6cd5\u5668\u96fb\u8def\u7684\u6f14\u7b97\u6cd5\uff0c\u5206\u5225\u662f Booth Algorithm \u548c Wallace Tree Adder\u3002Booth Algorithm \u7684\u76ee\u7684\u5728\u65bc\u6e1b\u5c11\u90e8\u5206\u7a4d\u7684\u6578\u91cf\uff0c\u800c Wallace Tree \u7684\u76ee\u7684\u5728\u65bc\u5c07\u591a\u500b\u52a0\u6cd5\u5e73\u884c\u5316\u3002</p>"},{"location":"labs/lab4/#radix-4-booth-algorithm","title":"Radix-4 Booth Algorithm","text":"<p>Info</p> <p>\u7576\u5e74\u63d0\u51fa Booth Algorithm \u7684\u8ad6\u6587\uff1aBooth, Andrew Donald. \u201cA SIGNED BINARY MULTIPLICATION TECHNIQUE.\u201d Quarterly Journal of Mechanics and Applied Mathematics 4 (1951): 236-240.</p> <p>Note</p> <p>\u5927\u5bb6\u5728\u8ab2\u5802\u4e0a\u5b78\u5230\u7684  Booth Algorithm \u662f Radix-2 Booth Algorithm\uff0c\u9019\u88e1\u7684 Radix-4 \u53ea\u662f Radix-2 \u7684\u63a8\u5ee3\u800c\u5df2\uff0c\u53ef\u4ee5\u8b93 Partial Product \u7684\u6578\u91cf\u66f4\u5c11\uff0c\u4f46\u4ee3\u50f9\u5c31\u662f Encoding \u96fb\u8def\u66f4\u8907\u96dc\uff0c\u56e0\u70ba Sliding Window \u6703\u66f4\u5927\uff0c\u4e26\u4e14\u4e5f\u6703\u6709\u66f4\u591a\u7a2e Encoding \u7684\u7d50\u679c\u3002</p> <p>\u5c07\u7b97\u5f0f (1) \u9032\u4e00\u6b65\u8b8a\u5f62\uff0c\u6211\u5011\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5f62\u5f0f\uff1a</p> \\[ \\begin{equation} X \\times \\{(-2 \\times Y_{n-1} + Y_{n-2} + \\times Y_{n-3})\\times 2^{n-2} + (-2 \\times Y_{n-3} + Y_{n-4} + Y_{n-5})\\times 2^{n-4} +\\\\ (-2 \\times Y_{n-5} + Y_{n-6} + Y_{n-7})\\times 2^{n-6} + ... + (-2 \\times Y_3 + Y_2 + Y_1) \\times 2^2 + (-2 \\times Y_1 + Y_0 + \\times \\textcolor{red}{Y_{-1}})\\times 2^0 \\}  \\end{equation} \\] <p>\u7279\u5225\u6ce8\u610f\u7684\u662f\uff0c\u5be6\u969b\u4e0a \\(Y_{-1}\\) \u9019\u9805\u4e26\u4e0d\u5b58\u5728\uff0c\u56e0\u70ba \\(Y\\) \u662f\u5f9e \\(Y_0\\) \u958b\u59cb\u7684\uff0c\u6703\u591a\u51fa \\(Y_{-1}\\) \u9019\u9805\u53ea\u662f\u56e0\u70ba\u6211\u5011\u60f3\u8981\u8b93\u6bcf\u5c0d\u5c0f\u62ec\u865f\u4e2d\u90fd\u6709\u4e09\u500b term \u800c\u5df2\u3002\u6240\u4ee5 \\(Y_{-1}\\) \u8996\u70ba 0\uff0c\u9019\u6a23\u5c31\u4e0d\u6703\u6539\u8b8a\u539f\u672c\u7b97\u5f0f\u7684\u7d50\u679c\u3002</p> <p>\u4e0a\u9762\u7684\u7b97\u5f0f\u5176\u5be6\u6697\u793a\u4e86\u6211\u5011\u4e00\u500b\u6280\u5de7\uff0c\u5c31\u662f\u6211\u5011\u53ef\u4ee5\u4ee5 3-bits \u70ba\u4e00\u7d44\u4f86\u6aa2\u8a2d \\(Y[n-1:0]\\) \u4e2d\u7684\u6bcf\u500b bits\uff0c\u6240\u4ee5\u6211\u5011\u6703\u770b\u5230\uff1a</p> \\[ \\begin{equation} -2 \\times Y_{i+1} + Y_i + Y_{i-1} \\end{equation} \\] <p>\u4e0a\u9762\u7684\u7b97\u5f0f\u7e3d\u5171\u6703\u6709\u4e94\u7a2e\u53ef\u80fd\uff0c\u5206\u5225\u662f \\(-2\\)\u3001\\(-1\\)\u3001\\(0\\)\u3001\\(1\\) \u548c \\(2\\)\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u9019\u7a2e\u5f62\u5f0f\u5c0d\u61c9\u5230\u4e0b\u9762\u7684 Booth \u7de8\u78bc\uff0c\u9019\u7a2e\u7de8\u78bc\u7a31\u70ba Radix-4 Booth Encoding\u3002</p> <p>\u57fa\u65bc Booth Encoding \u7684\u601d\u60f3\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5efa\u69cb\u51fa\u4e00\u500b Booth Encoder \u96fb\u8def\uff0c\u9019\u500b\u96fb\u8def\u6703\u6709\u5169\u500b\u8f38\u5165\uff0c\u5206\u5225\u662f \\(X\\) \u548c \\(Y[i+1:i-1]\\)\uff0c\u6839\u64da \\(Y[n+1:n-1]\\) \u7684\u6578\u503c\uff0c\u914d\u5408 Radix-4 Booth Encoding \u4e58\u4e0a \\(X\\) \u4e4b\u5f8c\u5f97\u5230\u4e00\u500b Partial Product\u3002\u5c0d\u65bc n-bits \u4e58\u4ee5 n-bits \u7684\u4e58\u6cd5\u5668\u70ba\u4f8b\uff0c\u6211\u5011\u53ea\u8981\u5efa\u69cb\u51fa \\(\\frac{n}{2}\\) \u500b Booth Encoder\uff0c\u518d\u914d\u5408\u4e0a\u9069\u7576\u5730 Left-Shift\uff08\u56e0\u70ba\u9084\u8981\u4e58\u4ee5 \\(2^n\\)\uff09\u5373\u53ef\u5f97\u5230\u6240\u6709\u7684 Partial Products\u3002</p> \\(Y_{i+1}\\) \\(Y_i\\) \\(Y_{i-1}\\) \u7de8\u78bc\uff08\\(X \\times (-2 \\times Y_{i+1} + Y_i~ + Y_{i-1})\\)\uff09 0 0 0 \\(0\\) 0 0 1 \\(X\\) 0 1 0 \\(X\\) 0 1 1 \\(2X\\) 1 0 0 \\(-2X\\) 1 0 1 \\(-X\\) 1 1 0 \\(-X\\) 1 1 1 \\(0\\) <p>\u6700\u5f8c\uff0c\u6211\u5011\u53ea\u8981\u5c07 \\(\\frac{n}{2}\\) \u500b Partial Products \u52a0\u7e3d\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 \\(X[n-1:0] \\times Y[n-1:0]\\) \u7684\u7d50\u679c\u3002</p> <p>\u5982\u679c\u4ee5 n \u7b49\u65bc 64 \u70ba\u4f8b\uff0c\u4f7f\u7528 Array Multiplier \u9032\u884c 64-bits \u7684\u6574\u6578\u4e58\u6cd5\uff0c\u6703\u9700\u8981\u52a0\u7e3d 64 \u500b Partial Product\u3002\u4f46\u662f\uff0c\u7576\u6211\u5011\u4f7f\u7528 Radix-4 Booth Algorithm \u5148\u5c07\u4e58\u6578\u9032\u884c\u9069\u7576\u7de8\u78bc\u4e4b\u5f8c\uff0c\u53ea\u8981\u52a0\u7e3d \\(64 \\div 2 = 32\\) \u500b Partial Products\uff0c\u6578\u91cf\u6574\u6574\u5c11\u4e86\u4e00\u534a\uff01</p> <p>\u4f46\u662f\u8981\u628a 32 \u500b\u6578\u5b57\u4f9d\u5e8f\u76f8\u52a0\u4f9d\u7136\u975e\u5e38\u8017\u8cbb\u6642\u9593\uff0c\u6211\u5011\u53ef\u4ee5\u518d\u85c9\u7531 Wallace Tree \u7684\u6280\u5de7\u5c07\u591a\u6578\u76f8\u52a0\u7684\u904e\u7a0b\u5e73\u884c\u5316\uff08Parallelize\uff09\uff0c\u85c9\u6b64\u52a0\u901f\u904b\u7b97\u3002</p>"},{"location":"labs/lab4/#wallace-tree","title":"Wallace Tree","text":"<p>Info</p> <p>\u7576\u5e74\u63d0\u51fa Wallace Tree \u7684\u8ad6\u6587\uff1aC. S. Wallace, \"A Suggestion for a Fast Multiplier,\" in IEEE Transactions on Electronic Computers, vol. EC-13, no. 1, pp. 14-17</p> <p>\u5982\u679c\u8981\u4ecb\u7d39 Wallace Tree \u7684\u8a71\uff0c\u6211\u5011\u5fc5\u9808\u5148\u77e5\u9053\u4ec0\u9ebc\u662f Carry-Save Adder\uff08CSA\uff09\u3002\u7576\u6211\u5011\u5728\u505a\u4e09\u500b\u6578\u5b57\u7684\u76f8\u52a0\u7684\u6642\u5019\uff0cCSA \u5c31\u6703\u7279\u5225\u6709\u512a\u52e2\uff0c\u6211\u5011\u7528\u4e0b\u9762\u7684\u96fb\u8def\u4f86\u89e3\u91cb\u3002</p> <p></p> <p>\u9019\u662f\u6211\u5011\u53ea\u4f7f\u7528 RCA \u4f86\u9032\u884c\u4e09\u500b\u6578\u5b57\u7684\u76f8\u52a0\u6642\uff0c\u6240\u4f7f\u7528\u7684\u96fb\u8def\u67b6\u69cb\uff0c\u5982\u679c\u5206\u6790\u5176 Critical Path \u7684\u8a71\uff0c\u6211\u5011\u53ef\u4ee5\u8a08\u7b97\u51fa\u5176\u70ba\u4e94\u500b FA Delay \u52a0\u4e0a\u4e00\u500b HA Delay\u3002\u4f46\u662f\u7576\u6211\u5011\u6539\u6210\u4f7f\u7528\u4e00\u7d1a CSA \u52a0\u4e0a\u4e00\u7d1a RCA \u7684\u6642\u5019\uff0c\u5176 Critical Path \u5c31\u6703\u8b8a\u6210\u4e94\u500b FA Delay\u3002\u53ef\u4ee5\u770b\u5230\u4f7f\u7528 CSA + RCA \u7684\u6df7\u5408\u52a0\u6cd5\u5668\u67b6\u69cb\u5c0d\u65bc\u4e09\u500b\u4ee5\u4e0a\u7684\u6574\u6578\u76f8\u52a0\u7684\u6642\u5019\uff0c\u6703\u66f4\u6709\u901f\u5ea6\u4e0a\u7684\u512a\u52e2\u3002\u96d6\u7136\u4ee5\u4e09\u500b\u6578\u76f8\u52a0\u4f86\u770b\uff0c\u597d\u50cf\u53ea\u9032\u6b65\u4e00\u9ede\u9ede\uff0c\u4e0d\u904e\u5728\u591a\u500b\u6578\u76f8\u52a0\u7684\u6642\u5019\uff0cCSA + RCA \u7684\u512a\u52e2\u5c31\u6703\u8d8a\u4f86\u8d8a\u660e\u986f\uff0c\u800c\u9019\u6b63\u662f\u6211\u5011\u63a5\u4e0b\u4f86\u8981\u4ecb\u7d39\u7684 Wallace Tree\u3002</p> <p></p> <p>Wallace Tree \u7684\u6838\u5fc3\u7cbe\u795e\u5c31\u662f\u5229\u7528 Carry-Save Adder \u7684 3-to-2 Compression \u7279\u6027\uff0c\u9010\u6b65\u5c07 summands \u6e1b\u5c11\uff0c\u4e00\u76f4\u5230\u5269\u4e0b\u5169\u500b summands \u7684\u6642\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 Ripple-Carry Adder\uff0c\u6216\u751a\u81f3\u4f7f\u7528 Carry-Lookahead Adder \u5c07\u5169\u500b summands \u76f8\u52a0\uff0c\u5f97\u5230\u6700\u7d42\u4e58\u6cd5\u7684\u7d50\u679c\u3002Wallace Tree \u4e4b\u6240\u4ee5\u53ef\u4ee5\u52a0\u901f\u591a\u500b\u6578\u5b57\u7684\u52a0\u6cd5\u904b\u7b97\u5728\u65bc\u5176\u5c07\u591a\u500b summands \u7684\u52a0\u6cd5\u5e73\u884c\u5316\u3002</p> <p>\u5927\u5bb6\u5728\u4e0a\u9762\u7684 Adder Tree \u67b6\u69cb\u4e2d\uff0c\u770b\u5230\u7684\u6bcf\u500b\u5c0f\u9577\u65b9\u5f62\u7684 Adder \u5c31\u662f Carry-Save Adder\u3002\u55ae\u4e00\u4e00\u500b CSA \u7684\u67b6\u69cb\u662f\u5c07\u591a\u500b Full-Adder \u5e73\u884c\u6392\u5217\uff0c\u4e26\u4e14\u4e0d\u5c07 FA \u4e4b\u9593\u7684 Carry-in\u3001Carry-Out \u9023\u63a5\u8d77\u4f86\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f FA \u7684 Sum \u548c Carry-Out \u90fd\u6703\u8b8a\u6210\u7368\u7acb\u7684\u8f38\u51fa\u3002</p> <p></p> <p>\u4e0a\u5716\u662f\u7d93\u5178\u7684 Ripple-Carry Adder \u7d50\u69cb\uff0c\u6bcf\u500b FA \u4e4b\u9593\u7684 Cin \u548c Cout \u6703\u4e92\u76f8\u9023\u63a5\u3002\u4f46\u662f\u4e0b\u5716\u5247\u4f7f\u7528\u4e86\u5169\u7d1a\u7684 CSA \u548c\u4e00\u7d1a\u7684 RCA \u4f86\u9032\u884c\u6c42\u548c\u904b\u7b97\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u5230\u5728\u4e0a\u9762\u5169\u7d1a\u7684 CSA \u4e2d\uff0c\u6bcf\u500b FA \u7684 Cout \u53cd\u800c\u662f\u63a5\u5230\u4e0b\u4e00\u7d1a CSA \u4e2d\u7684 FA \u7684\u8f38\u5165\uff0c\u800c\u975e\u63a5\u5230\u540c\u4e00\u7d1a\u7684 FA \u7684 Cin\u3002\uff08Ps\uff1a\u540c\u4e00\u500b\u6c34\u5e73\u4e0a\u7684 FA \u8996\u70ba\u540c\u4e00\u7d1a\uff0csame stage\uff09</p> <p></p>"},{"location":"labs/lab4/#assignment-part-1-fast-single-cycle-multiplier-design","title":"Assignment Part 1 - Fast Single-Cycle Multiplier Design","text":"<p>\u5728 Assignment Part 1 \u7684\u90e8\u5206\uff0c\u5927\u5bb6\u9700\u8981\u5be6\u4f5c\u4e00\u500b\u55ae\u9031\u671f\u3001\u652f\u63f4\u5169\u500b 64-bits \u6709\u865f\u6578\u76f8\u4e58\u7684\u4e58\u6cd5\u5668\uff0c\u4e26\u4e14\u4f7f\u7528 Radix-4 Booth Algorithm \u52a0\u4e0a Wallace Tree\u3002 \u5927\u5bb6\u53ef\u4ee5\u53c3\u8003\u4ee5\u4e0b\u67b6\u69cb\u53bb\u5be6\u4f5c\uff1a</p> <p></p> <ol> <li>Booth     <pre><code>module Booth(\n    input [127:0] x,                //multiplicand\n    input [2:0] y_3,        //multiplier\n\n    output reg [127:0] p        //partial product\n);\n//your code here\n\nendmodule\n</code></pre>     \u505aRadix-4 Booth Encoding, \u7522\u751fPartial Product</li> <li>Partial_prod     <pre><code>module Partial_prod(\n    input [127:0] x, y,\n    output reg [127:0] p_out[31:0]\n);\n//your code here\n\nendmodule\n</code></pre>     \u5c0732\u500bBooth\u5c01\u88dd\u6210\u4e00\u500bmodule\u3002     hint\uff1a\u8981\u6ce8\u610f\u5404Partial product\u7684\u4f4d\u6578, \u4e5f\u5c31\u662f\uff08\u5f0f2\uff09 \u4e2d\u5404\u9805\u76842^\u6b21\u65b9^</li> <li>Switch     <pre><code>module Switch(\n    input [127:0] p_in [31:0],\n    output reg [31:0] p_out [127:0]//p0~ p127\n);\n//your code here\n\nendmodule\n</code></pre>     \u7d14\u63a5\u7dda, \u5c0732\u500b128bits\u7684Partial product\u8f49\u6210128\u500b32bits\u7684\u8f38\u51fa</li> <li> <p>Wallace32     <pre><code>module Wallace32(\n    input [31:0] in,\n    input [28:0] cin,\n    output s,cout,\n    output [28:0] cout_group\n);\n//your code here\n\nendmodule\n</code></pre>     Wallace tree, \u5c07\u540c\u4e00\u4e58\u7a4d\u4f4d\u768432bits\u3001\u4e0a\u4e00\u500b\u4e58\u7a4d\u4f4d\u50b3\u5165\u7684cin\u76f8\u52a0, \u4ee5\u4e0b\u662f\u53c3\u8003\u67b6\u69cb</p> <p> 5. Wtree <pre><code>module Wtree(\n    input [31:0] in [127:0],\n    output [127:0] s, c\n);\n    //your code here\n\nendmodule\n</code></pre> \u5c01\u88dd128\u500b\u4e0d\u540c\u4e58\u7a4d\u4f4d\u7684Wallace Tree 6. Adder    \u5c07Wtree\u7684c\u3001s\u76f8\u52a0\uff08\u76f4\u63a5\u7528\u52a0\u865f\u5373\u53ef, \u4e0d\u7528\u81ea\u5df1\u64b0\u5beb128'\u7684\u52a0\u6cd5\u5668\uff09  7. Top <pre><code>module Top(\n    input [63:0]x, y,\n    output [127:0] out\n);\n    //your code here\n\nendmodule\n</code></pre> \u9023\u63a5\u6bcf\u500bmodule top module\u8acb\u52d9\u5fc5\u9075\u5b88\u4ee5\u4e0b\u898f\u7bc4(\u6ce8\u610f\u5927\u5c0f\u5beb)\uff1a - \u6a94\u540d\uff1aTop.sv - module \u540d\u7a31\uff1a Top - I/O ports\u540d\u7a31\u53ca\u4f4d\u5bec\u7686\u4e0d\u80fd\u66f4\u52d5</p> </li> </ol>"},{"location":"labs/lab4/#chapter-2-universal-asynchronous-receivertransmitter-uart","title":"Chapter 2. Universal Asynchronous Receiver/Transmitter (UART)","text":""},{"location":"labs/lab4/#uart-hardware-architecture","title":"UART Hardware Architecture","text":"<p>UART \u662f\u4e00\u7a2e\u50b3\u8f38\u4ecb\u9762\uff0c\u4ed6\u7684\u7279\u8272\u5c31\u662f\u53ea\u8981\u900f\u904e\u4e00\u8ddf\u5c0e\u7dda\uff0c\u5373\u628a Transmitter \u7684 TX \u548c Receiver \u7684 RX \u9023\u63a5\uff0c\u5373\u53ef\u5b8c\u6210\u8cc7\u6599\u7684\u50b3\u8f38\uff0c\u6210\u672c\u6975\u4f4e\uff0c\u4e26\u4e14\u4e0d\u9700\u8981 Clock \u7684\u540c\u6b65\u8a0a\u865f\u3002 \u4e26\u4e14\uff0c\u5728\u50b3\u8f38\u65b9\u5f0f\u4e0a\uff0c\u9084\u53ef\u4ee5\u5206\u70ba\u55ae\u5de5\uff08Simplex\uff09\u3001\u534a\u96d9\u5de5\uff08Half-Duplex\uff09 \u548c\u5168\u96d9\u5de5\uff08Full-Duplex\uff09\u3002</p> <p>\u7531\u65bc Transmitter \u548c Receiver \u4e4b\u9593\u6c92\u6709 Clock \u8a0a\u865f\u4f86\u9032\u884c\u540c\u6b65\uff0c\u56e0\u6b64\uff0c\u6536\u767c\u96d9\u65b9\u4e4b\u9593\u5fc5\u9808\u7d04\u5b9a\u597d\u4ee5\u4e00\u500b\u56fa\u5b9a\u7684\u983b\u7387\uff08Buad Rate\uff09\u4f86\u9032\u884c\u50b3\u8f38\u3002 \u5982\u679c\u96d9\u65b9\u7684 Buad Rate \u4e0d\u540c\uff0c\u5247 Receiver \u5728\u63a1\u6a23\uff08Sampling\uff09\u4e0a\u5c31\u6703\u51fa\u73fe\u554f\u984c\uff0c\u800c\u7121\u6cd5\u63a5\u6536\u5230\u6b63\u78ba\u7684\u8cc7\u6599\u3002</p> <p>\u5982\u4e0a\u5716\u6240\u793a\uff0c\u5169\u500b UART \u6a21\u7d44\u7684 TX-RX \u4ea4\u932f\u76f8\u63a5\uff0c\u53ef\u4ee5\u5be6\u73fe\u534a\u96d9\u5de5\u7684\u50b3\u8f38\u65b9\u5f0f\uff0c\u5373\u5728\u55ae\u4e00\u6642\u9593\u5167\uff0cDevice 1 \u53ef\u4ee5\u5411 Device 2 \u50b3\u9001\u8cc7\u6599\uff0c\u6216\u662f Device 2 \u5411 Device 1 \u50b3\u9001\u8cc7\u6599\u3002 \u4f46\u662f\u5728\u9019\u6b21 Lab \u7684\u5be6\u4f5c\u4e2d\uff0c\u6211\u5011\u53ea\u5be6\u4f5c\u55ae\u4e00\u7684 Transmitter \u548c\u55ae\u4e00\u7684 Receiver\uff0c\u6240\u4ee5\u5728 Transmitter Module \u4e0a\u53ea\u6703\u6709\u4e00\u500b TX Output Port \u548c Receiver \u9023\u63a5\uff0c\u800c\u5728 Receiver Module \u4e0a\u53ea\u6703\u6709\u4e00\u500b RX Input Port \u548c Transmitter \u9023\u63a5\uff0c\u5176\u4ed6\u7684 Input/Output \u90fd\u662f\u63d0\u4f9b\u7d66 test-bench \u4f7f\u7528\u3002</p> <p>\u4e0a\u9762\u6211\u5011\u53ea\u4ecb\u7d39\u7684 UART \u7684\u786c\u9ad4\u50b3\u8f38\u4ecb\u9762\uff0c\u4f46\u662f\u50b3\u8f38\u8cc7\u6599\u4e0d\u4f46\u9700\u8981\u6536\u767c\u5668\u786c\u9ad4\u672c\u8eab\uff0c\u4e5f\u9700\u8981\u898f\u7bc4\u6240\u8b02\u7684\u50b3\u8f38\u5354\u8b70\u3002</p>"},{"location":"labs/lab4/#serial-communication-protocol","title":"Serial Communication Protocol","text":"<p>UART \u5728 Idel \u72c0\u614b\u7684\u6642\u5019\uff0cTransmitter \u6703\u628a TX \u8a0a\u865f\u4fdd\u6301\u5728 1\uff08Logical High\uff09\uff0c\u7576 Transmitter \u6c7a\u5b9a\u958b\u59cb\u50b3\u8f38\u8cc7\u6599\u7684\u6642\u5019\uff0c\u5c31\u6703\u628a TX \u5f80\u4e0b\u62c9\u8b8a\u6210 0\uff08Logic-Low\uff09\uff0c\u7a31\u70ba Start Bit\u3002Start Bit \u5f8c\u9762\u6703\u7dca\u63a5\u8457\u4e00\u500b Data Packet\uff0c\u7531 8-bits \u7d44\u6210\uff08\u4e5f\u5c31\u662f\u4e00\u500b byte\uff09\uff0cData Packet \u7531 LSB \u958b\u59cb\u50b3\u9001\uff0c\u4e00\u76f4\u5230\u628a MSB \u50b3\u9001\u5b8c\u7562\u4e4b\u5f8c\uff0c\u6700\u5f8c\u518d\u63a5\u8457 Stop Bit\u3002</p> <p>Danger</p> <p>\u8acb\u7279\u5225\u6ce8\u610f\uff0cStart Bit \u70ba Logic-Low\uff0c\u800c Stop Bit \u70ba Logic High\u3002</p>"},{"location":"labs/lab4/#assignment-part-2-uart-module-design","title":"Assignment Part 2 - UART Module Design","text":"<p>\u9019\u500b\u90e8\u5206\u7684\u5be6\u4f5c\u6703\u7531\u4e09\u500b\u90e8\u5206\u7d44\u6210\uff0c\u5206\u5225\u662f <code>transmitter.sv</code>\u3001<code>receiver.sv</code> \u9084\u6709 tset-bench\u3002\u9700\u8981\u5b8c\u6210\u7684\u662f\u524d\u5169\u500b SystemVerilog Code\uff0c\u800c test-bench \u6703\u5c07\u5169\u4efd Transmitter \u548c Receiver \u62ff\u4f86\u63a5\u7dda\u4f7f\u7528\uff0c\u7d66\u4e88 &amp; \u6aa2\u67e5\u56de\u50b3 message\u3002</p> <p>\u62b1\u6b49\u7a0b\u5f0f\u53ef\u80fd\u5beb\u7684\u4e0d\u662f\u975e\u5e38\u6f02\u4eae\uff0c\u6b61\u8fce\u5404\u4f4d\u591a\u591a\u6307\u6559!\u7576\u7136\uff0c\u9019\u53ea\u662f\u4e00\u500b\u53c3\u8003\u6a21\u677f\uff0c\u7528\u5176\u4ed6\u67b6\u69cb\u53bb\u5beb\u51faUART\u4e5f\u53ef\u4ee5\u7684! \u53e6\u5916code\u4e2d\u6703\u76e1\u91cf\u628a\u6bcf\u500bbrench\u90fd\u586b\u6eff\uff0c\u4f46\u5728\u9019\u5802\u8ab2\u7684\u9a57\u8b49\u4e2d\u4e0d\u586b\u6eff\u61c9\u8a72\u4e5f\u4e0d\u6703\u51fa\u554f\u984c(?</p> <ol> <li> <p><code>transmitter.sv</code>      \u5728\u7a0b\u5f0f\u78bc\u4e2d\u7d66\u4e86\u5169\u500balways block\u3002\u5176\u4e2d\u4e00\u500b\u662f\u63a7\u5236tx(\u8f38\u51fa\u8a0a\u865f)\uff0c\u53e6\u4e00\u500b\u662f\u63a7\u5236state&amp;bit_counter(FSM\u7684state\u8df3\u8f49)\u8207shift_reg(\u5132\u5b58\u4e86tx\u8981\u8f38\u51fa\u7684\u5167\u5bb9)\u3002 start_tx\u662ftestbench\u7d66\u7684\uff0ctx_done\u5247\u662f\u7d66testbench\u7684\u5c0f\u5c0f\u5916\u90e8\u8a0a\u865f</p> <pre><code>always @(posedge clk or posedge reset) begin\n    if(reset) begin\n        ...\n        tx_done &lt;= 1'b0;\n    end else begin\n        case (state)\n            IDLE: begin\n                ...\n                tx_done &lt;= 1'b0;\n            end\n            START: begin\n                ...\n                tx_done &lt;= 1'b0;\n            end\n            DATA: begin //bit_counter 0~5\n                ...\n                tx_done &lt;= 1'b0;\n            end\n            STOP: begin\n                ...\n                tx_done &lt;= 1'b1;\n            end\n        endcase\n    end\nend\n</code></pre> <p><pre><code>always @(posedge clk or posedge reset) begin\n    if(reset) begin\n        ...\n    end else begin\n        case (state)\n            IDLE: begin\n                if(start_tx) begin\n                    ...\n                end else begin\n                    state &lt;= state;\n                    shift_reg &lt;= 6'b0;\n                end\n                bit_counter &lt;= 3'b000;\n            end\n            START: begin\n                ...\n            end\n            DATA: begin //bit_counter 0~5\n                ...\n                if(bit_counter == 3'b101) begin\n                    ...\n                end else begin\n                    state &lt;= state;\n                    bit_counter &lt;= bit_counter + 1'b1;\n                end\n            end\n            STOP: begin\n                ...\n            end\n        endcase\n    end\nend\n</code></pre> 2. <code>receiver.sv</code> </p> <p>\u5728\u7a0b\u5f0f\u78bc\u4e2d\u7d66\u4e86\u5169\u500balways block\u3002\u5176\u4e2d\u4e00\u500b\u662f\u63a7\u5236rx_done(\u8f38\u51famessage)\u8207shift_reg(\u63a5\u6536\u4e26\u5132\u5b58\u5f9etransmitter\u4f86\u76840/1\u8a0a\u865f)\uff0c\u53e6\u4e00\u500b\u662f\u63a7\u5236state&amp;bit_counter(FSM\u7684state\u8df3\u8f49)\u3002 rx_done\u662f\u7d66testbench\u7684\u5c0f\u5c0f\u5916\u90e8\u8a0a\u865f</p> <pre><code>always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        ...\n        rx_done &lt;= 1'b0;\n    end else begin\n        case (state)\n            IDLE: begin\n                ...\n                rx_done &lt;= 1'b0;\n            end\n            DATA: begin\n                ...\n                rx_done &lt;= 1'b0;\n            end\n            STOP: begin\n                if (rx == 1'b1) begin//stop bit\n                    ...\n                    rx_done &lt;= 1'b1;\n                end else begin\n                    data_out &lt;= 6'b0;\n                    rx_done &lt;= 1'b0;\n                    shift_reg &lt;= 6'b0;\n                end\n            end\n        endcase\n    end\nend\n</code></pre> <pre><code>always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        ...\n    end else begin\n        case (state)\n            IDLE: begin\n                if(rx==1'b0) begin\n                    ...\n                end else begin\n                    ...\n                end\n                bit_counter &lt;= 3'b000;\n            end\n            DATA: begin\n                if(bit_counter == 3'b101) begin\n                    ...\n                end else begin\n                    state &lt;= state;\n                    bit_counter &lt;= bit_counter + 1'b1;\n                end\n            end\n            STOP: begin\n                ...\n            end\n        endcase\n    end\nend\n</code></pre> <p>\u6700\u96e3\u7684\u90e8\u5206\u61c9\u8a72\u5269\u4e0bshift_reg\u7684\u5beb\u6cd5\u3002\u53ef\u4ee5\u60f3\u50cf\u4e00\u4e0btransmitter\u767c\u51fa\u8a0a\u865f\u548creceiver\u63a5\u6536\u8a0a\u865f\u7684\u9806\u5e8f\uff0c\u6703\u50cf\u662f...\u6c92\u932f!FIFO(\u5148\u9032\u5148\u51fa)\u7684queue\u3002\u53ef\u4ee5\u6efe\u52d5\u8abf\u6574shift_reg\u4e2d\u7684\u8cc7\u6599\uff0c\u6bcf\u6b21\u56fa\u5b9a\u53d6\u6700\u4f4e\u4f4d\u7684\u8cc7\u6599\u51fa\u4f86\u5230tx/rx\u5c31\u884c\u4e86\u3002</p> </li> </ol>"},{"location":"labs/lab4/#chapter-3-how-to-run-simulation-and-test-benches","title":"Chapter 3. How to run simulation and test-benches","text":"<p>\u5728\u9019\u6b21\u4f5c\u696d\u4e2d\uff0c\u52a9\u6559\u4e00\u6a23\u63d0\u4f9b\u4e86 Makefile \u8b93\u5927\u5bb6\u4f7f\u7528\u3002\u9019\u6b21\u7684\u4f5c\u696d\u4e3b\u8981\u5206\u6210\u5169\u984c\uff0c\u5169\u984c\u5404\u81ea\u6703\u6709\u81ea\u5df1\u7684 test-bench\u3002</p> <pre><code>.\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 Top.sv\n\u251c\u2500\u2500 common.mk\n\u251c\u2500\u2500 mul\n\u2502   \u251c\u2500\u2500 Top.sv\n\u2502   \u251c\u2500\u2500 other .sv files\n\u2502   \u251c\u2500\u2500 mul.mk\n\u2502   \u2514\u2500\u2500 sim_main.cpp\n\u2514\u2500\u2500 uart\n    \u251c\u2500\u2500 Top.sv\n    \u251c\u2500\u2500 other .sv files\n    \u251c\u2500\u2500 sim_main.cpp\n    \u2514\u2500\u2500 uart.mk\n</code></pre> <p>\u9019\u6b21\u52a9\u6559\u63d0\u4f9b\u7684 Sample code \u7684\u6a94\u6848\u7d50\u69cb\u5982\u4e0a\u6240\u793a\uff0c\u5982\u540c Lab 1\uff0c\u540c\u5b78\u5982\u679c\u8981\u7de8\u8b6f\u4f60\u5df2\u7d93\u5b8c\u6210\u7684 Code\uff0c\u53ea\u8981\u5728 <code>lab-2</code> \u8cc7\u6599\u593e\u5e95\u4e0b\uff0c\u8f38\u5165 <code>make</code>\uff08\u540c\u6642\u7de8\u8b6f Multiplier \u548c UART\uff09\u3001<code>make mul</code>\uff08\u53ea\u7de8\u8b6f Multiplier\uff09\u6216\u662f <code>make uart</code>\uff08\u53ea\u7de8\u8b6f UART\uff09\uff0c\u4e0d\u9700\u8981\u9032\u5165\u5230\u5b50\u8cc7\u6599\u593e\u7576\u4e2d\u3002</p> <p>\u800c\u5982\u679c\u8981\u57f7\u884c simulation \u7684\u8a71\uff0c\u4e00\u6a23\u505c\u7559\u5728 <code>lab-2</code> \u8cc7\u6599\u593e\u5e95\u4e0b\uff0c\u8f38\u5165 <code>./mul/obj_dir/VTop</code> \u5373\u53ef\u57f7\u884c Multiplier \u7684 test-bench\u3002\u800c\u8f38\u5165 <code>./uart/obj_dir/VTop</code> \u5373\u53ef\u57f7\u884c UART \u7684 test-bench\u3002</p>"},{"location":"labs/lab4/#start-to-do-the-assignment","title":"Start to do the assignment","text":"<ol> <li>Clone the sample code<ul> <li>\u5148\u78ba\u5b9a\u81ea\u5df1\u5df2\u7d93\u6253\u958b\u8ab2\u7a0b\u958b\u767c\u74b0\u5883\uff08Container\uff09\uff0c\u4e26\u4e14\u5728\u74b0\u5883\u4e2d\u7684 <code>workspace</code> \u5e95\u4e0b</li> <li>\u4e0b\u8f09\u52a9\u6559\u63d0\u4f9b\u7684 Sample Code  <code>git clone https://gitlab.course.aislab.ee.ncku.edu.tw/113-1/lab-2.git</code></li> <li>\u9032\u5165\u8cc7\u6599\u593e  <code>cd lab-2</code></li> </ul> </li> <li>Create a private repo<ul> <li>\u5982\u540c Lab 1 \u6240\u8ff0\uff0c\u5728 Gitlab \u4e0a\u9762\u5275\u5efa\u500b\u4eba Repo\uff0c\u4e26\u4e14\u547d\u540d\u70ba <code>Lab 2</code>\uff0c\u8acb\u4e0d\u8981\u52fe\u9078 Initialize the repository with READNE</li> <li>\u78ba\u8a8d branch \u7684\u540d\u7a31\u70ba main \u800c\u975e master  <code>git branch -M main</code></li> <li>\u65b0\u589e\u81ea\u5df1\u7684 Private Gitlab Repo \u70ba Remote Source  <code>git remote add private &lt;HTTPS URL of your private repo&gt;</code></li> </ul> </li> <li>Push codes to your private repo<ul> <li><code>git push -u private main</code></li> </ul> </li> <li>Notes<ul> <li>\u56e0\u70ba\u5728\u9810\u8a2d\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u8981 Gitlab Repo \u4e2d\u5305\u542b <code>.gitlab-ci.yml</code> \u6a94\u6848\u5c31\u6703\u89f8\u767c CI/CD Pipeline\uff0c\u5982\u679c\u4f60\u5728\u524d\u671f\u5c1a\u672a\u5b8c\u6210\u4f5c\u696d\u7684\u6642\u5019\u4e0d\u60f3\u89f8\u767c Pipeline\uff0c\u53ef\u4ee5\u5148\u5728 Gitlab \u4f60\u7684 Private Repo \u4e2d\u7684\u8a2d\u5b9a\u5c07 CI/CD \u529f\u80fd\u95dc\u9589\uff0c\u5f85\u5b8c\u6210\u4f5c\u696d\u4e4b\u5f8c\u518d\u6253\u958b</li> </ul> </li> </ol>"},{"location":"labs/lab5/","title":"Lab 5 - Single-Cycle CPU Design and Differential Testing","text":"<p>Update information</p> <ul> <li>Contributor\uff1aTA \u5cfb\u8c6a</li> <li>Last update\uff1a2024/12/13</li> </ul>"},{"location":"labs/lab5/#from-isa-simulator-to-read-hardware","title":"From ISA Simulator to Read Hardware","text":"<p>\u5728 Lab 2 \u4e2d\uff0c\u6211\u5011\u900f\u904e C \u8a9e\u8a00\u5be6\u4f5c\u4e86\u4e00\u500b ISA Simulator\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u900f\u904e\u8edf\u984c\u4f86\u6a21\u64ec\u6307\u4ee4\u96c6\u7684\u5c64\u7d1a\u7684\u884c\u70ba\uff0c\u5c6c\u65bc Architecture Level \u7684\u63a2\u7d22\u3002 \u4f46\u662f\uff0c\u5728\u9019\u500b Lab \u4e2d\uff0c\u6211\u5011\u7684\u76ee\u6a19\u662f\u5be6\u4f5c\u51fa\u4e00\u500b\u5be6\u969b\u7684\u96fb\u8def\uff0c\u800c\u9019\u500b\u96fb\u8def\u7684\u529f\u80fd\u662f\u53ef\u4ee5\u89e3\u6790 RV64I \u7684\u6307\u4ee4\u4e26\u4e14\u57f7\u884c\u5c0d\u61c9\u7684\u529f\u80fd\uff0c\u56e0\u6b64\u6211\u5011\u5fc5\u9808\u601d\u8003\u600e\u9ebc\u6a23\u7684\u96fb\u8def\u624d\u80fd\u9054\u6210\u9019\u500b\u4efb\u52d9\u3002</p> <p>\u6211\u5011\u5fc5\u9808\u8f49\u63db\u6211\u5011\u7684\u601d\u7dad\uff0c\u5728\u8a2d\u8a08 ISS \u7684\u6642\u5019\uff0c\u6211\u5011\u7684 design granularity \u662f instruction-accurate\uff0c\u4f46\u662f\u5728\u5be6\u969b\u7684\u6578\u4f4d\u96fb\u8def\u4e2d\uff0c\u96fb\u8def\u662f\u7531\u6642\u9418\u8a0a\u865f\uff08clock\uff09\u9a45\u52d5\uff0c\u56e0\u6b64\u6211\u5011\u7684\u96fb\u8def\u7684 design granularity \u6703\u662f clock-accurate\u3002 \u800c\u5728 Lab 5 \u4e2d\uff0c\u6211\u5011\u7684\u76ee\u6a19\u662f\u5be6\u4f5c Single-Cycle CPU\uff0cSingle-Cycle \u610f\u6307\u6211\u5011\u5fc5\u9808\u8981\u4e00\u500b\u9031\u671f\u5167\u5b8c\u6210\u53d6\u6307\uff08Instruction Fetch\uff09\u3001\u89e3\u78bc\uff08Instruction Decode\uff09\u3001\u57f7\u884c\uff08Execute\uff09\u548c\u5beb\u56de\uff08Write-back\uff09\u3002</p> <p>Single-Cycle \u7684\u4fb7\u9650\u6027</p> <p>\u5927\u5bb6\u4ed4\u7d30\u601d\u8003\u5f8c\u61c9\u8a72\u53ef\u4ee5\u767c\u73fe\uff0c\u53ea\u8981\u4eca\u5929\u6211\u5011\u6240\u5be6\u4f5c\u7684 CPU \u8b80\u53d6\u7684\u8a18\u61b6\u9ad4\uff0c\u4e0d\u8ad6\u662f Instruction Memory \u9084\u662f Data Memory\uff0c\u5982\u679c\u5b83\u5011\u7121\u6cd5\u5728\u4e00\u500b Cycle \u5b8c\u6210 Data Access\uff0c\u90a3\u9ebc\u6211\u5011\u7684 Single-Cycle CPU \u5c31\u6703\u5931\u6548\u3002 \u5982\u679c\u6211\u5011\u4eca\u5929\u6240\u9700\u7684\u8a18\u61b6\u9ad4\u5927\u5c0f\u4e0d\u5927\uff0c\u6211\u5011\u6216\u8a31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e00\u500b\u5c0f\u578b\u7684 Register Array \u6216\u662f FPGA \u7248\u4e0a\u7684 DUTRAM\uff0c\u90a3\u9ebc\u5c31\u53ef\u4ee5\u652f\u63f4 Asynchronous Read\u3002 \u4f46\u662f\uff0c\u5047\u8a2d\u4eca\u5929\u6211\u5011\u9700\u8981\u5927\u4e00\u9ede\u7684\u8a18\u61b6\u9ad4\u7a7a\u9593\uff0c\u53ef\u80fd\u5c31\u6703\u9700\u8981\u7528\u5230\u771f\u6b63\u5c08\u9580\u7684 Memory Element\uff0c\u8b6c\u5982 FPGA \u7248\u4e0a\u7684 Block RAM (BRAM) \u6216\u751a\u81f3\u662f\u5916\u63a5 SD Card (Flash Memory)\uff0c\u9019\u7a2e\u8a18\u61b6\u9ad4\u5c31\u6703\u662f Synchronous Read\uff0c \u81f3\u5c11\u9700\u8981\u5169\u500b clock cycle \u624d\u80fd\u62ff\u5230 read data\uff08\u7576\u524d cycle \u50b3\u5165 address\uff0c\u4e0b\u500b cycle \u62ff\u5230\u8cc7\u6599\uff09\u3002</p> <p>\u9047\u5230\u9019\u7a2e\u72c0\u6cc1\u7684\u6642\u5019\uff0c\u6211\u5011\u53ef\u80fd\u5c31\u6703\u9700\u8981\u5c07 Single-Cycle CPU \u8f49\u8b8a\u70ba Multi-Cycle CPU\uff0c\u624d\u80fd\u5920\u61c9\u5c0d memory system \u7684 read/write latency\uff0c\u6cc1\u4e14\u6709\u6642\u5019 latency \u751a\u81f3\u662f\u4e0d\u56fa\u5b9a\u7684\uff01</p>"},{"location":"labs/lab5/#cpu-micro-architecture","title":"CPU Micro-architecture","text":"<p>Architecture vs. Micro-architecture</p> <p>\u4e00\u500b Architecture (ISA) \u53ef\u80fd\u6703\u5c0d\u61c9\u5230\u591a\u7a2e\u53ef\u80fd\u7684 Micro-architecture implementation</p> <p>\u5c0d\u65bc\u8edf\u9ad4\u5de5\u7a0b\u5e2b\u4f86\u8aaa\uff0c\u901a\u5e38\u4ed6\u5011\u6240\u80fd\u63a5\u89f8\u5230\u95dc\u65bc\u6574\u500b\u8a08\u7b97\u6a5f\u7684\u7d30\u7bc0\u7684\u6700\u5e95\u5c64\u5c31\u6703\u662f ISA\uff08\u66ab\u6642\u4e0d\u8a0e\u8ad6\u95dc\u65bc Performance Optimization\uff09\uff0c\u5c0d\u65bc\u8edf\u9ad4\u5de5\u7a0b\u5e2b\u4f86\u8aaa\uff0c\u4ed6\u5011\u53ea\u9700\u8981\u77e5\u9053 CPU \u652f\u63f4\u54ea\u4e9b\u6307\u4ee4\uff0c\u4ed6\u5011\u5c31\u53ef\u4ee5\u5728\u9019\u500b\u5e73\u53f0\u4e4b\u4e0a\u53bb\u5efa\u69cb\u5404\u5f0f\u5404\u6a23\u7684\u8edf\u9ad4\u3002 \u800c\u5c0d\u65bc\u8a2d\u8a08 CPU \u7684\u5de5\u7a0b\u5e2b\u4f86\u8aaa\uff0c\u4ed6\u5011\u5927\u591a\u6642\u5019\u80fd\u5920\u63a5\u89f8\u5230\u7684\u95dc\u65bc\u7cfb\u7d71\u4e2d\u6700\u4e0a\u5c64\u7684\u7d30\u7bc0\u4e5f\u6703\u662f ISA\uff08\u4e00\u6a23\u4e0d\u8a0e\u8ad6 Performance Optimization\uff09\uff0c\u4ed6\u5011\u4e0d\u5fc5\u9808\u8981\u77e5\u9053\u9019\u500b CPU \u672a\u4f86\u53ef\u80fd\u6703\u88ab\u62ff\u4f86\u57f7\u884c\u54ea\u4e9b\u7a0b\u5f0f\uff0c\u4ed6\u5011\u53ea\u9700\u8981\u6839\u64da ISA \u624b\u518a\u7684\u898f\u7bc4\u5c07\u529f\u80fd\u5b8c\u6574\u5730\u5be6\u73fe\u5c31\u597d\u3002</p> <p>\u70ba\u4ec0\u9ebc\u8aaa\u66ab\u6642\u4e0d\u8a0e\u8ad6 Performance Optimization\uff1f</p> <p>\u901a\u5e38\u73fe\u5be6\u7cfb\u7d71\u7684\u958b\u767c\u5f80\u5f80\u6703\u8907\u96dc\u5f88\u591a\uff0c\u5c0d\u65bc\u8edf\u9ad4\u5de5\u7a0b\u5e2b\u4f86\u8aaa\uff0c\u5982\u679c\u8981\u91dd\u5c0d\u8edf\u9ad4\u6548\u80fd\u505a\u6fc0\u9032\u5730\u512a\u5316\uff0c\u901a\u5e38\u4ed6\u5011\u6703\u9700\u8981\u77e5\u9053 CPU \u7684 micro-architecture \u7d30\u7bc0\uff0c\u5982 Cache Size\uff0c\u5982\u6b64\u4e00\u4f86\u624d\u53ef\u4ee5\u8a2d\u8a08\u51fa\u66f4\u4f73 cache-friendly \u7684\u8edf\u9ad4\uff0c\u4f7f\u6548\u80fd\u66f4\u597d\u3002 \u800c\u5c0d\u65bc CPU Architect \u4f86\u8aaa\uff0c\u4ed6\u5011\u5f80\u5f80\u4e0d\u6703\u88ab\u4fb7\u9650\u5728 ISA-Level \u5e95\u4e0b\uff0c\u4ed6\u5011\u4e5f\u6703\u9700\u8981\u77e5\u9053\u9019\u500b CPU \u672a\u4f86\u53ef\u80fd\u6703\u88ab\u62ff\u4f86\u57f7\u884c\u54ea\u4e9b\u7a0b\u5f0f\uff08\u53c8\u7a31\u70ba workload\uff09\uff0c\u4ed6\u5011\u9700\u8981\u505a workload analysis\uff0c\u4e26\u4e14\u6839\u64da\u5206\u6790\u5f8c\u7684\u7d50\u679c\uff0c\u53bb\u8abf\u6574 micro-architecture\uff0c\u76ee\u6a19\u4e5f\u662f\u70ba\u4e86\u8b93 workload \u5728 CPU \u4e0a\u57f7\u884c\u7684\u6548\u80fd\u66f4\u597d\u3002</p> <p>\u5927\u5bb6\u5c0d\u9019\u65b9\u9762\u7684\u8b70\u984c\u611f\u8208\u8da3\u7684\u8a71\uff0c\u53ef\u4ee5\u95b1\u8b80\u9019\u7bc7\u6587\u7ae0\uff1a\u6211\u5728 SiFive \u8655\u7406\u5668\u67b6\u69cb\u90e8\u9580\u56db\u5e74\u7684\u7d93\u6b77 by Zen\u3002</p> <p>\u6211\u5011\u5be6\u4f5c\u7684 CPU \u7684\u5fae\u67b6\u69cb\uff08micro-architecture\uff09\u5982\u4e0b\u5716\u6240\u793a\uff08\u53ef\u4ee5\u53f3\u9375\u9ede \u7528\u65b0\u5206\u9801\u958b\u555f\u5716\u7247 \u770b\u66f4\u5927\u5f35\u7684\u5716\uff09</p> <p>\u6211\u5011\u5206\u5225\u63a2\u8a0e Single-Cycle CPU \u4e2d\u7684\u6bcf\u500b Module \u7684\u529f\u80fd\u662f\u4ec0\u9ebc</p>"},{"location":"labs/lab5/#package-def","title":"Package - DEF","text":"<p>\u9996\u5148\uff0c\u501f\u52a9 SystemVerilog \u76f8\u5c0d\u65bc Verilog \u66f4\u5f37\u5927\u7684\u62bd\u8c61\u80fd\u529b\uff0c\u6211\u5011\u5b9a\u7fa9\u4e86\u4e00\u500b package <code>DEF</code>\uff0c\u88e1\u9762\u5305\u542b\u4e86\u6211\u5011\u9700\u8981\u7528\u5230\u7684\u4e00\u4e9b data types\u3002</p> DEF.sv<pre><code>package DEF;\n    /* define width of double-word */\n    typedef logic [63:0] dw;\n\n    // ...\n\n    typedef enum logic [1:0] {\n        SEL_PC_PLUS_4,\n        SEL_LOAD_DATA,\n        SEL_ALU_OUT\n    } wb_sel_t;\n\n    /* RISC-V RV64I instruction formats (equivalent to 32-bit logic type) */\n    typedef union packed {\n        // R-type\n        struct packed {\n            logic [6:0] opcode;\n            logic [4:0] rd;\n            logic [2:0] func3;\n            logic [4:0] rs1;\n            logic [4:0] rs2;\n            logic [6:0] func7;\n        } R_TYPE;\n        // I-type\n        struct packed {\n            logic [6:0]  opcode;\n            logic [4:0]  rd;\n            logic [2:0]  func3;\n            logic [4:0]  rs1;\n            logic [11:0] imm_11_0;\n        } I_TYPE;\n        // S-type\n        struct packed {\n            logic [6:0] opcode;\n            logic [4:0] imm_4_0;\n            logic [2:0] func3;\n            logic [4:0] rs1;\n            logic [4:0] rs2;\n            logic [6:0] imm_11_5;\n        } S_TYPE;\n        // U-type\n        struct packed {\n            logic [6:0]  opcode;\n            logic [4:0]  rd;\n            logic [19:0] imm_31_12;\n        } U_TYPE;\n        // B-type\n        struct packed {\n            logic [6:0] opcode;\n            logic imm_11;\n            logic [3:0] imm_4_1;\n            logic [2:0] func3;\n            logic [4:0] rs1;\n            logic [4:0] rs2;\n            logic [5:0] imm_10_5;\n            logic imm_12;\n        } B_TYPE;\n        // J-type\n        struct packed {\n            logic [6:0] opcode;\n            logic [4:0] rd;\n            logic [7:0] imm_19_12;\n            logic imm_11;\n            logic [9:0] imm_10_1;\n            logic imm_20;\n        } J_TYPE;\n        logic [31:0] raw;\n    } inst_t;\n\n    /* instruction opcode map */\n    typedef enum logic [6:0] {\n        OP = 7'b0110011,\n        OP_32 = 7'b0111011,\n        OP_IMM = 7'b0010011,\n        OP_IMM_32 = 7'b0011011,\n        LOAD = 7'b0000011,\n        STORE = 7'b0100011,\n        BRANCH = 7'b1100011,\n        JAL = 7'b1101111,\n        JALR = 7'b1100111,\n        AUIPC = 7'b0010111,\n        LUI = 7'b0110111,\n        SYSTEM = 7'b1110011\n    } INST_OPCODE;\n\n    /* arithmetic func3 map */\n    typedef enum logic [2:0] {\n        ADD_SUB_FUNC3 = 3'b000,\n        SLL_FUNC3 = 3'b001,\n        SLT_FUNC3 = 3'b010,\n        SLTU_FUNC3 = 3'b011,\n        XOR_FUNC3 = 3'b100,\n        SRL_SRA_FUNC3 = 3'b101,\n        OR_FUNC3 = 3'b110,\n        AND_FUNC3 = 3'b111\n    } ARITHMETIC_FUNC3;\n\n    /* branch inst. func3 map */\n    typedef enum logic [2:0] {\n        BEQ_FUNC3  = 3'b000,\n        BNE_FUNC3  = 3'b001,\n        BLT_FUNC3  = 3'b100,\n        BGE_FUNC3  = 3'b101,\n        BLTU_FUNC3 = 3'b110,\n        BGEU_FUNC3 = 3'b111\n    } BRANCH_FUNC3;\n\n    typedef enum logic [2:0] {\n        SB_FUNC3 = 3'b000,\n        SH_FUNC3 = 3'b001,\n        SW_FUNC3 = 3'b010,\n        SD_FUNC3 = 3'b011\n    } STORE_FUNC3;\n\n    typedef enum logic [2:0] {\n        LB_FUNC3  = 3'b000,\n        LH_FUNC3  = 3'b001,\n        LW_FUNC3  = 3'b010,\n        LD_FUNC3  = 3'b011,\n        LBU_FUNC3 = 3'b100,\n        LHU_FUNC3 = 3'b101,\n        LWU_FUNC3 = 3'b110\n    } LOAD_FUNC3;\n\n    typedef enum logic [11:0] {\n        ECALL_FUNC12  = 12'b000000000000,\n        EBREAK_FUNC12 = 12'b000000000001\n    } SYSTEM_FUNC12;\nendpackage : DEF\n</code></pre>"},{"location":"labs/lab5/#module-pc","title":"Module - PC","text":"PC.sv<pre><code>module PC\n    import DEF::*;\n(\n    input logic clk,\n    input logic rst,\n    input dw next_pc,\n    output dw current_pc\n);\n    always_ff @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            current_pc &lt;= 64'd0;\n        end else begin\n            current_pc &lt;= next_pc;\n        end\n    end\nendmodule : PC\n</code></pre> <p>PC \u9019\u500b module \u7684\u529f\u80fd\u53ea\u6709\u4e00\u500b\uff0c\u5c31\u662f\u8a18\u9304\u8457\u76ee\u524d\u6b63\u5728\u57f7\u884c\u7684\u6307\u4ee4\u7684 memory address\uff0c\u4e5f\u5c31\u662f Program Counter\uff0c\u4e26\u4e14\u5728\u6bcf\u500b Positive Edge \u7684\u6642\u5019\u66f4\u65b0 PC\uff0c\u5c07 <code>current_pc</code> \u7684\u503c\u66f4\u65b0\u70ba\u8f38\u5165\u8a0a\u865f <code>next_pc</code>\u3002</p> <p>\u5728\u6a21\u64ec\u7684\u6700\u4e00\u958b\u59cb\uff0cTestbench \u6703\u6253\u5165\u4e00\u500b asynchronous reset \u8a0a\u865f\uff0c\u4e26\u4e14\u6211\u5011\u7684 PC \u70ba asynchronous active-low reset\uff0c\u800c PC \u5247\u6703\u5728\u9019\u500b\u6642\u5019\u88ab\u521d\u59cb\u5316\u6210 0\u3002</p> <p>Synchronous vs. Asynchronous Reset \u4e4b\u722d</p> <p>\u5927\u5bb6\u5c0d\u9019\u500b\u8b70\u984c\u6709\u8208\u8da3\u7684\u8a71\u53ef\u4ee5\u95b1\u8b80\u9019\u5169\u7bc7\u8ad6\u6587\uff0c\u4e26\u4e14\u641c\u5c0b Reset Synchronizer</p> <ol> <li>Synchronous Resets? Asynchronous Resets? I am so confused! How will I ever know which to use?</li> <li>Asynchronous &amp; Synchronous Reset Design Techniques - Part Deux</li> </ol>"},{"location":"labs/lab5/#module-regfile","title":"Module - RegFile","text":"RegFile.sv<pre><code>module RegFile\n    import DEF::*;\n(\n    input logic clk,\n    input logic rst,\n    input logic [4:0] rs1_index,\n    input logic [4:0] rs2_index,\n    input logic w_en,\n    input logic [4:0] rd_index,\n    input dw rd_data,\n    output dw rs1_data,\n    output dw rs2_data\n);\n    dw mem[32];  // register file\n    always_ff @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            for (int i = 0; i &lt; 32; i++) begin\n                mem[i] &lt;= 64'd0;\n            end\n        end else begin\n            if (rd_index != 5'd0 &amp;&amp; w_en == 1'b1) begin\n                mem[rd_index] &lt;= rd_data;\n            end\n        end\n    end\n    /* assign output read data */\n    assign rs1_data = mem[rs1_index];\n    assign rs2_data = mem[rs2_index];\nendmodule\n</code></pre> <p>RegFile \u9019\u500b module \u6700\u4e3b\u8981\u7684\u529f\u80fd\u5c31\u662f\u4f5c\u70ba RISC-V CPU \u4e2d\u7684 32 \u500b General Purpose Register (GPR)\uff0c</p>"},{"location":"labs/lab5/#module-immext","title":"Module - ImmExt","text":"<p>\u56e0\u70ba\u5728\u8a08\u7b97\u7684\u904e\u7a0b\u4e2d\uff0c\u6211\u5011\u6709\u53ef\u80fd\u6703\u7528\u5230 Immediate \u4f5c\u70ba\u5176\u4e2d\u4e00\u500b\u904b\u7b97\u5143\uff08operand\uff09\uff0c\u56e0\u6b64\uff0c\u6211\u5011\u9700\u8981\u6709\u4e00\u500b\u5c08\u9580\u7684\u786c\u9ad4\u6a21\u7d44\u4f86\u7522\u751f\u76ee\u524d\u6307\u4ee4\u6240\u76f8\u5c0d\u61c9\u7684 Immediate\uff0c\u800c\u5728\u6211\u5011\u7684\u8a2d\u8a08\u4e2d\u8a72\u6a21\u7d44\u7a31\u70ba <code>ImmExt</code>\uff08Immediate Extender\uff09\u3002</p> ImmExt.sv<pre><code>module ImmExt\n    import DEF::*;\n(\n    input inst_t inst,\n    output dw imm_ext_out\n);\n    logic [6:0] opcode;\n    dw tmp_imm_ext_out;\n\n    assign opcode = inst.R_TYPE.opcode;\n\n    always_comb begin : main_block\n        unique if (opcode == OP || opcode == OP_32 || opcode == SYSTEM) begin : noimm\n            /* R-type and SYSTEM type */\n            tmp_imm_ext_out = 64'd0;\n        end : noimm\n        else if (opcode == JAL) begin : jal\n            /* J-type */\n            tmp_imm_ext_out = {\n                {44{inst.J_TYPE.imm_20}},\n                inst.J_TYPE.imm_19_12,\n                inst.J_TYPE.imm_11,\n                inst.J_TYPE.imm_10_1,\n                1'b0\n            };\n        end : jal\n        else if (opcode == STORE) begin : store\n            /* S-type */\n            tmp_imm_ext_out = {\n                {52{inst.S_TYPE.imm_11_5[6]}}, inst.S_TYPE.imm_11_5, inst.S_TYPE.imm_4_0\n            };\n        end : store\n        else if (opcode == BRANCH) begin : branch\n            /* B-type */\n            tmp_imm_ext_out = {\n                {52{inst.B_TYPE.imm_12}},\n                inst.B_TYPE.imm_11,\n                inst.B_TYPE.imm_10_5,\n                inst.B_TYPE.imm_4_1,\n                1'b0\n            };\n        end : branch\n        else if (opcode == LUI || opcode == AUIPC) begin : u_type\n            /* U-type */\n            tmp_imm_ext_out = {{32{inst.U_TYPE.imm_31_12[19]}}, inst.U_TYPE.imm_31_12, 12'b0};\n        end : u_type\n        else begin : i_type\n            /* I-type */\n            /* includes OP_IMM, OP_IMM_32, LOAD, JALR*/\n            tmp_imm_ext_out = {{52{inst.I_TYPE.imm_11_0[11]}}, inst.I_TYPE.imm_11_0};\n        end : i_type\n    end : main_block\n\n    assign imm_ext_out = tmp_imm_ext_out;\nendmodule\n</code></pre> <p>ImmExt \u9019\u500b\u6a21\u7d44\u7684\u4e3b\u8981\u529f\u80fd\u5c31\u662f\u6839\u64da\u76ee\u524d\u6307\u4ee4\u7684 format type \u4f86\u7522\u751f\u5c0d\u61c9\u7684 sign-extended immediate\uff0c\u4ee5\u4fbf\u5f8c\u9762 ALU \u505a\u904b\u7b97\u7684\u6642\u5019\u53ef\u4ee5\u4f7f\u7528\u3002 \u5927\u5bb6\u53ef\u4ee5\u767c\u73fe\u7576\u6211\u5011\u4e8b\u5148\u5728 <code>DEF.sv</code> \u4e2d\u5229\u7528 <code>union packed</code> \u914d\u5408 <code>struct packed</code> \u53bb\u5b9a\u7fa9\u597d\u516d\u7a2e\u4e0d\u540c\u7684\u6307\u4ee4\u683c\u5f0f\u7684 Bit-Field \u4e4b\u5f8c\uff0c\u6211\u5011\u5728 ImmExt \u7684\u5be6\u4f5c\u4e2d\u5c31\u53ef\u4ee5\u5229\u7528 Bit-Field \u4f86\u8b93\u7a0b\u5f0f\u78bc\u7684\u53ef\u8b80\u6027\u66f4\u9ad8\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u6240\u6709\u548c\u6307\u4ee4\u683c\u5f0f\u76f8\u95dc\u7684\u7a0b\u5f0f\u78bc\uff0c\u53ea\u8981\u6211\u5011\u90fd\u53ef\u4ee5\u78ba\u5be6\u5229\u7528\u5df2\u7d93\u5728 <code>DEF.sv</code> \u4e2d\u5b9a\u7fa9\u597d\u7684 Bit-Field \u7684\u8a71\uff0c\u5373\u4f7f\u6211\u5011\u5728\u4e4b\u5f8c\u767c\u73fe\u6211\u5011\u7684 Bit-Field \u5b9a\u7fa9\u6709\u8aa4\uff0c \u6216\u751a\u81f3\u662f Spec \u6709\u66f4\u52d5\uff08\u7576\u7136\u6a5f\u7387\u6975\u4f4e\uff09\uff0c\u5c31\u53ea\u9700\u8981\u66f4\u6539 <code>DEF.sv</code> \u4e2d\u7684\u7a0b\u5f0f\u78bc\u5373\u53ef\uff0c\u4e0d\u7528\u628a\u6240\u6709\u76f8\u95dc\u7684\u7a0b\u5f0f\u78bc\u90fd\u4fee\u6539\u4e00\u904d\uff0c\u53ef\u4ee5\u5927\u5e45\u63d0\u9ad8\u53ef\u7dad\u8b77\u6027\u3002</p>"},{"location":"labs/lab5/#module-alu","title":"Module - ALU","text":"<p>\u56e0\u70ba\u6211\u5011\u5be6\u4f5c\u7684\u6307\u4ee4\u96c6 RV64I \u4e2d\u5305\u542b\u4e86\u4e00\u822c\u64cd\u4f5c\u5728 64-bit operand \u4e0a\u7684\u6307\u4ee4\uff0c\u9084\u6709\u4ee5 W \u70ba\u5f8c\u7db4\uff08suffix\uff09\uff0c\u53ea\u64cd\u4f5c\u5728 64-bit operand \u7684 lower 32-bit \u7684\u6307\u4ee4\u3002 \u56e0\u6b64\u6211\u5011\u7684 ALU \u9700\u8981\u540c\u6642\u652f\u63f4\u9019\u5169\u7a2e\u904b\u7b97\u3002\u6211\u5011\u91dd\u5c0d ALU \u7684\u63a7\u5236\u8a0a\u865f\u505a\u4e86\u9ad8\u5ea6\u7684\u62bd\u8c61\uff0c\u8b93\u6211\u5011\u7684\u7a0b\u5f0f\u78bc\u53ef\u8b80\u6027\u66f4\u9ad8\u3002</p> Part of DEF.sv<pre><code>/* opcode enumeration of ALU */\ntypedef enum logic [3:0] {\n    ALU_OP_ADD,\n    ALU_OP_SLL,\n    ALU_OP_SLT,\n    ALU_OP_SLTU,\n    ALU_OP_XOR,\n    ALU_OP_SRL,\n    ALU_OP_OR,\n    ALU_OP_AND,\n    ALU_OP_SUB,\n    ALU_OP_SRA\n} alu_opcode_t;\n\ntypedef enum logic {\n    ALU_OP_32,\n    ALU_OP_64\n} alu_op_width_t;\n\ntypedef struct packed {\n    alu_opcode_t   alu_op;\n    alu_op_width_t alu_width;\n} alu_control_packet_t;\n</code></pre> <p>\u6211\u5011\u5229\u7528 enum \u4f86\u679a\u8209 ALU \u5fc5\u9808\u652f\u63f4\u7684\u904b\u7b97\u985e\u578b\u9084\u6709\u5bec\u5ea6\uff08Data Width\uff09\uff0c\u7136\u5f8c\u518d\u5229\u7528 struct \u628a <code>alu_opcode_t</code> \u548c <code>alu_op_width_t</code> \u5305\u88dd\u8d77\u4f86\u8b8a\u6210 <code>alu_control_packet_t</code>\u3002</p> ALU.sv<pre><code>module ALU\n    import DEF::*;  // import package DEF in module header\n(\n    input alu_control_packet_t alu_control,\n    input logic [63:0] operand_1,\n    input logic [63:0] operand_2,\n    output logic [63:0] alu_out\n);\n    // TODO\nendmodule : ALU\n</code></pre> <p>\u5728 <code>ALU.sv</code> \u4e2d\uff0c\u6211\u5011\u8981\u5b8c\u6210 ALU \u5be6\u4f5c\u3002\u8209\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u5fc5\u9808\u6839\u64da\u7531 Controller \u7522\u751f\u7684\u63a7\u5236\u8a0a\u865f <code>alu_control</code> \u4f86\u6c7a\u5b9a\u8a72\u57f7\u884c\u54ea\u7a2e\u985e\u578b\u7684\u904b\u7b97\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u7528\u4ee5\u4e0b\u7684\u5f62\u5f0f\u4f86\u63cf\u8ff0 ALU \u7684\u884c\u70ba\uff08behhavior modeling\uff09\u3002</p> Example of implementing ALU addition<pre><code>function dw twos_complement(dw input);\n    return (~input + 64'd1);\nendfunction : twos_complement\n\ndw pre_calaulate;\n\nalways_comb begin\n    unique case (alu_control.alu_op)\n        ALU_OP_ADD: begin\n            pre_calculate = operand_1 + operand_2;\n        end\n        ALU_OP_SUB: begin\n            pre_calculate = operand_1 + twos_complement(operand_2); \n        end\n        // TODO: add more branches for this case statement to make the ALU complete\n    endcase\nend\n\nassign alu_out = (alu_control.alu_width == ALU_OP_64) ? pre_calculate : {{32{pre_calculate[31]}}, pre_calculate};\n</code></pre>"},{"location":"labs/lab5/#module-branchcomp","title":"Module - BranchComp","text":"<p>\u7576\u6211\u5011\u57f7\u884c\u5230 BRANCH \u6307\u4ee4\u7684\u6642\u5019\uff08e.g., BEQ, BLT, ...\uff09\uff0c\u6211\u5011\u6703\u9700\u8981\u540c\u6642\u8655\u7406\u5169\u500b\u904b\u7b97\u554f\u984c</p> <ol> <li>\u6bd4\u8f03 rs1 \u548c rs2<ul> <li>BEQ <p>\\(\\text{rs1} = \\text{rs2}\\) (sign is not important)</p> </li> <li>BNE <p>\\(\\text{rs1} \\neq \\text{rs2}\\) (sign is not important)</p> </li> <li>BLT <p>\\(\\text{rs1}_{\\text{signed}} &lt; \\text{rs2}_{\\text{signed}}\\)</p> </li> <li>BLTU <p>\\(\\text{rs1}_{\\text{signed}} \\ge \\text{rs2}_{\\text{signed}}\\)</p> </li> <li>BGE <p>\\(\\text{rs1}_{\\text{unsigned}} &lt; \\text{rs2}_{\\text{unsigned}}\\)</p> </li> <li>BGEU <p>\\(\\text{rs1}_{\\text{unsigned}} \\ge \\text{rs2}_{\\text{unsigned}}\\)</p> </li> </ul> </li> <li>\u8a08\u7b97 Branch Target Address<ul> <li>\\(\\text{PC} + \\text{offset}\\)</li> </ul> </li> </ol> <p>\u5982\u679c\u4ee5\u6211\u5011\u76ee\u524d\u7684 ALU \u8a2d\u8a08\uff0c\u53ea\u80fd\u540c\u6642\u8f38\u5165\u5169\u500b operands \u4e26\u4e14\u57f7\u884c\u4e00\u7a2e\u904b\u7b97\uff0c\u5982\u6b64\u4e00\u4f86\u7576\u6211\u5011\u8981\u8655\u7406 BRANCH \u6307\u4ee4\u7684\u6642\u5019\u5c31\u6703\u767c\u751f structural Hazard\u3002 \u6240\u4ee5\u9664\u4e86\u6709 ALU \u4ee5\u5916\uff0c\u6211\u5011\u5fc5\u9808\u5f15\u5165\u4e00\u500b\u65b0\u7684 module \u53eb\u505a Branch Comparator (BranchComp)\uff0c\u9019\u500b module \u7528\u4f86\u8655\u7406 BRANCH \u76f8\u95dc\u7684\u6bd4\u8f03\u904b\u7b97\uff0c\u4e26\u4e14\u7d66\u51fa Branch Result\u3002</p> <p>BranchComp \u548c Controller \u4e4b\u9593\u6703\u6709\u4e09\u500b\u63a7\u5236\u8a0a\u865f\uff0c<code>BrUn</code> \u7531 Controller \u7522\u751f\uff0c\u7528\u4f86\u6307\u793a BranchComp \u61c9\u8a72\u8981\u628a rs1 \u548c rs2 \u8996\u70ba signed \u9084\u662f unsigned\uff0c\u800c <code>BrEq</code> \u548c <code>BrLt</code> \u5247\u7531 BranchComp \u7522\u751f\uff0c \u7528\u4f86\u544a\u8a34 Controller \u6bd4\u8f03\u904b\u7b97\u7684\u7d50\u679c\uff0c\u8b93 Controller \u53ef\u4ee5\u7531 <code>BrEq</code> \u548c <code>BrLt</code> \u914d\u5408\u76ee\u524d\u7684 BRANCH \u6307\u4ee4\u985e\u578b\u4f86\u5224\u65b7 Branch \u662f Taken \u9084\u662f Not-taken\u3002</p> <p>Example Case</p> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u5047\u8a2d\u76ee\u524d\u57f7\u884c\u7684\u6307\u4ee4\u662f BGEU\uff0c\u5247 Controller \u61c9\u7522\u751f <code>BrUn</code> \u70ba <code>1'b1</code>\uff0c\u800c BranchComp \u5247\u56e0\u6b64\u57f7\u884c unsigned comparasion\u3002 \u5047\u8a2d rs1 \u70ba <code>64'FFFFFFFFFFFFFF12</code>\uff0c\u800c rs2 \u70ba <code>64'h0000000000000022</code>\uff0c\u5247\u61c9\u7522\u751f <code>BrEq</code> \u70ba <code>1'b0</code> \u4e14 <code>BrLt</code> \u70ba <code>1'b0</code>\u3002 Controller \u5247\u6839\u64da\u76ee\u524d\u6307\u4ee4\u70ba BGEU \u4e14 <code>BrLt</code> \u70ba <code>1'b0</code> \u5f97\u77e5\u76ee\u524d\u7684 Branch Result \u70ba Taken\uff0c\u6240\u4ee5\u4e0b\u4e00\u500b\u9031\u671f\u61c9\u8a72\u8df3\u8f49\u5230 \\(\\text{PC} + \\text{Offset}\\)\u3002</p> intf.sv<pre><code>interface BranchCompControlIntf;\n    /* signal bundle */\n    logic BrUn, BrEq, BrLt;\n    /* modports */\n    modport ControllerSide(output BrUn, input BrEq, input BrLt);\n    modport BranchCompSide(input BrUn, output BrEq, output BrLt);\nendinterface : BranchCompControlIntf\n</code></pre> <p>\u6211\u5011\u5229\u7528 SystemVerilog \u4e2d\u7684 interface \u8a9e\u6cd5\uff0c\u5c07 Controller \u548c BranchComp \u4e4b\u9593\u7684\u8a0a\u865f\u9023\u63a5\u5c01\u88dd\u8d77\u4f86\uff0c\u4e26\u4e14\u5229\u7528 modport \u8a9e\u6cd5\u4f86\u6307\u4ee4\u8a0a\u865f\u7684\u65b9\u5411\u3002</p> BranchComp.sv<pre><code>module BranchComp\n    import DEF::*;\n(\n    input dw operand_1,\n    input dw operand_2,\n    BranchCompControlIntf.BranchCompSide control\n);\n    assign control.BrEq = (operand_1 == operand_2) ? 1'b1 : 1'b0;\n    always_comb begin\n        if (control.BrUn == 1'b0) begin\n            control.BrLt = ($signed(operand_1) &lt; $signed(operand_2)) ? 1'b1 : 1'b0;\n        end else begin\n            control.BrLt = (operand_1 &lt; operand_2) ? 1'b1 : 1'b0;\n        end\n    end\nendmodule\n</code></pre> <p>\u5229\u7528 interface \u5c01\u88dd\u8a0a\u865f\u4e4b\u5f8c\uff0c\u6211\u5011\u5728\u5b9a\u7fa9 <code>BranchComp</code> module \u7684\u6642\u5019\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528 <code>BranchCompControlIntf.BranchCompSide</code> \u4f86\u5ba3\u544a Controller \u548c BranchComp \u4e4b\u9593\u7684\u63a7\u5236\u8a0a\u865f\u3002</p>"},{"location":"labs/lab5/#module-ldfilte","title":"Module - LDFilte","text":"<p>\u6211\u5011\u7684 CPU \u652f\u63f4\u7684 LOAD \u6307\u4ee4\u985e\u578b\u7e3d\u5171\u6709\u4e03\u7a2e\uff0c\u5206\u5225\u662f LB\u3001LH\u3001LW\u3001LD\u3001LBU\u3001LHU \u548c LWU\uff0c\u4f46\u662f\u5728\u6211\u5011\u7684 Datapath \u4e2d\uff0c\u6211\u5011\u4e00\u6b21\u6703\u76f4\u63a5\u5f9e Data Memory \u4e2d\u8b80\u51fa 64-bit (double-word) \u7684\u6578\u64da\uff0c \u56e0\u6b64\uff0c\u6211\u5011\u6703\u9700\u8981\u4e00\u500b\u7279\u6b8a\u7684 module \u4f86\u5c0d\u5f9e Data Memory \u8b80\u51fa\u7684\u6578\u64da\u9032\u884c\u4fee\u6539\uff0c\u4ee5\u652f\u63f4\u5168\u90e8\u4e03\u7a2e\u7684 LOAD \u6307\u4ee4\u985e\u578b\uff0c\u5728\u9019\u88e1\u6211\u5011\u7a31\u9019\u500b module \u70ba LOAD Filter (LDFilter)\u3002</p> LDFilter.sv<pre><code>module LDFilter\n    import DEF::*;\n(\n    input logic [2:0] func3,\n    input dw in_data,\n    output dw out_data\n);\n    always_comb begin\n        unique case (func3)\n            LB_FUNC3:  out_data = {{56{in_data[7]}}, in_data[7:0]};\n            LH_FUNC3:  out_data = {{48{in_data[15]}}, in_data[15:0]};\n            LW_FUNC3:  out_data = {{32{in_data[31]}}, in_data[31:0]};\n            LD_FUNC3:  out_data = in_data;\n            LBU_FUNC3: out_data = {56'd0, in_data[7:0]};\n            LHU_FUNC3: out_data = {48'd0, in_data[15:0]};\n            LWU_FUNC3: out_data = {32'd0, in_data[31:0]};\n            default:   out_data = 64'd0;\n        endcase\n    end\nendmodule\n</code></pre> <p>The unique keyword</p> <p>\u8acb\u601d\u8003\u70ba\u4ec0\u9ebc\u5728\u9019\u88e1\u6211\u5011\u6703\u5728 case statement \u524d\u9762\u52a0\u4e0a <code>unique</code> \u9019\u500b keyword\uff0c\u5c0d\u65bc logic synthesis \u6709\u5e6b\u52a9\u55ce\uff1f \u5982\u679c\u628a <code>unique</code> \u6539\u6210 <code>priority</code> \u7684\u8a71\u4f60\u89ba\u5f97\u5408\u9069\u55ce\uff1f</p>"},{"location":"labs/lab5/#module-controller","title":"Module - Controller","text":"Controller.sv<pre><code>module Controller\n    import DEF::*;\n(\n    /* inst information */\n    input inst_t inst,\n    /* a0 and a1 for ECALL handle */\n    input dw reg_a0,\n    input dw reg_a1,\n    /* next PC select */\n    output next_pc_sel_t next_pc_sel,\n    /* IM write control */\n    output logic [7:0] im_w_mask,\n    /* Register File Control */\n    output logic reg_w_en,\n    /* ALU control */\n    output alu_op1_sel_t alu_op1_sel,\n    output alu_op2_sel_t alu_op2_sel,\n    output logic is_lui,\n    output alu_control_packet_t alu_control,\n    /* Branch Comparator control */\n    BranchCompControlIntf.ControllerSide bc_control,\n    /* DM write control */\n    output logic [7:0] dm_w_mask,\n    /* write-back select */\n    output wb_sel_t wb_sel,\n    /* halt signal (for testbench to monitor) */\n    output logic halt\n);\n    // TODO: please implement Controller module\n\n    /* ECALL handling */\n    always_latch begin\n        if (inst.I_TYPE.opcode == SYSTEM &amp;&amp; inst.I_TYPE.imm_11_0 == ECALL_FUNC12) begin\n            if (reg_a0 == 64'd0) begin : ECALL_to_halt\n                halt = 1'b1;\n            end : ECALL_to_halt\n            else if (reg_a0 == 64'd1) begin : ECALL_to_putchar\n                $display(\"%c\", reg_a1[7:0]);\n            end : ECALL_to_putchar\n            else begin : ECALL_not_support\n                $display(\"Not supported ECALL service request type!\\n\");\n                $finish;\n            end : ECALL_not_support\n        end\n    end\nendmodule\n</code></pre> <p>Controller \u5e7e\u4e4e\u53ef\u4ee5\u8aaa\u662f\u6574\u500b Single-Cycle CPU \u4e2d\u6700\u91cd\u8981\u7684\u90e8\u5206\u4e86\uff0c\u56e0\u70ba Controller \u8ca0\u8cac\u7522\u751f\u5404\u500b Module \u548c Mux \u7684\u63a7\u5236\u8a0a\u865f\uff0c\u5982\u679c Controller \u7121\u6cd5\u6b63\u78ba\u5730\u986b\u8072\u63a7\u5236\u8a0a\u865f\u7684\u8a71\uff0c\u5373\u4f7f Datapath \u7684\u8a2d\u8a08\u6c92\u554f\u984c\uff0c\u53ef\u80fd\u4e5f\u6703\u767c\u751f\u932f\u8aa4\u3002</p> op\\signals <code>next_pc_sel</code> <code>im_w_mask</code> <code>reg_w_en</code> <code>alu_op1_sel</code> <code>alu_op2_sel</code> <code>is_lui</code> <code>bc_control</code> <code>dm_w_mask</code> <code>wb_sel</code> OP PC+4 0 True rs1 rs2 0 X 0 alu_out OP_32 PC+4 0 True rs1 rs2 0 X 0 alu_out OP_IMM PC+4 0 True rs1 imm 0 X 0 alu_out OP_IMM_32 PC+4 0 True rs1 imm 0 X 0 alu_out LOAD PC+4 0 True rs1 imm 0 X 0 Load data STORE PC+4 0 False rs1 imm 0 X Depends on STORE func3 X BRANCH Branch Target 0 False PC imm 0 Depends on BRANCH func3 0 X JAL Branch Target 0 True PC imm 0 X 0 PC+4 JALR Branch Target 0 True rs1 imm 0 X 0 PC+4 AUIPC PC+4 0 True PC imm 0 X 0 alu_out LUI PC+4 0 True 0 imm 1 X 0 alu_out SYSTEM PC+4 0 False X X X X 0 X <p>\u81f3\u65bc <code>clu_control</code> \u7684\u90e8\u5206\u56e0\u70ba\u6bd4\u8f03\u8907\u96dc\uff0c\u6211\u5011\u7368\u7acb\u51fa\u4f86\u5206\u6790</p> op-type\\signals <code>alu_op</code> <code>alu_width</code> OP ? <code>ALU_OP_64</code> OP_32 ? <code>ALU_OP_32</code> OP_IMM ? <code>ALU_OP_64</code> OP_IMM_32 ? <code>ALU_OP_32</code> LOAD <code>ALU_OP_ADD</code> <code>ALU_OP_64</code> STORE <code>ALU_OP_ADD</code> <code>ALU_OP_64</code> BRANCH <code>ALU_OP_ADD</code> <code>ALU_OP_64</code> JAL <code>ALU_OP_ADD</code> <code>ALU_OP_64</code> JALR <code>ALU_OP_ADD</code> <code>ALU_OP_64</code> AUIPC <code>ALU_OP_ADD</code> <code>ALU_OP_64</code> LUI <code>ALU_OP_ADD</code> <code>ALU_OP_64</code> SYSTEM X X"},{"location":"labs/lab5/#module-memory","title":"Module - Memory","text":"Memory.sv<pre><code>module Memory\n    import DEF::dw;\n(\n    input logic clk,\n    input logic [7:0] w_mask,\n    input logic [15:0] address,\n    input dw write_data,\n    output dw read_data\n);\n    reg [7:0] mem[65536];  // register array to mimic DRAM\n\n    /* main memory logic */\n    always_ff @(posedge clk) begin\n        unique0 if (w_mask == 8'b11111111) begin\n            for (logic [15:0] i = 0; i &lt; 8; i++) begin\n                mem[address+i] &lt;= write_data[8*i+:8];\n            end\n        end else if (w_mask == 8'b00001111) begin\n            for (logic [15:0] i = 0; i &lt; 4; i++) begin\n                mem[address+i] &lt;= write_data[8*i+:8];\n            end\n        end else if (w_mask == 8'b00000011) begin\n            mem[address]   &lt;= write_data[0+:8];\n            mem[address+1] &lt;= write_data[8+:8];\n        end else if (w_mask == 8'b00000001) begin\n            mem[address] &lt;= write_data[0+:8];\n        end\n    end\n    /* assign output read data */\n    assign read_data = {\n        mem[address+7],\n        mem[address+6],\n        mem[address+5],\n        mem[address+4],\n        mem[address+3],\n        mem[address+2],\n        mem[address+1],\n        mem[address]\n    };\nendmodule\n</code></pre>"},{"location":"labs/lab5/#module-core","title":"Module - Core","text":"Core.sv<pre><code>module Core\n    import DEF::*;\n(\n    input  logic clk,\n    input  logic rst,\n    output logic halt\n);\n    // module instantiate and wire connect...\nendmodule : Core\n</code></pre> <p>\u57fa\u672c\u4e0a Core \u9019\u500b module \u5c31\u662f\u5c07 Datapath \u4e2d\u5404\u500b components\uff08\u5305\u542b Controller\uff09\u5be6\u4f8b\u5316\uff0c\u7136\u5f8c\u5c07\u5c07\u4ed6\u5011\u9023\u63a5\u8d77\u4f86\u3002 \u6709\u4e00\u9ede\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f\uff0c\u5728 CPU Block Diagram \u4e2d\uff0c\u6709\u4e9b\u591a\u5de5\u5668\uff08Mux\uff09\u6211\u5011\u662f\u5728 Core module \u4e2d\u624d\u5be6\u4f5c\u3002</p>"},{"location":"labs/lab5/#instruction-flow-beq","title":"Instruction Flow - \u4ee5 BEQ \u6307\u4ee4\u70ba\u4f8b","text":"<p>TBD</p>"},{"location":"labs/lab5/#topics-about-functional-verification-ie-before-synthesis","title":"Topics about Functional Verification (i.e., before synthesis)","text":""},{"location":"labs/lab5/#introduction-to-verilator","title":"Introduction to Verilator","text":"<p>\u76f8\u8f03\u65bc Verilator\uff0c\u5927\u5bb6\u61c9\u8a72\u66f4\u5e38\u807d\u5230 Synopsys VCS \u6216\u662f Cadence XCELIUM \u9019\u5169\u500b\u5546\u696d\u7528\u7684 Simulator\uff0c\u4ed6\u5011\u90fd\u53ef\u4ee5\u7528\u4f86\u6a21\u64ec\u4e26\u4e14\u9a57\u8b49\u6211\u5011\u8a2d\u8a08\u7684\u96fb\u8def\u3002 \u4f46\u662f\u9019\u5169\u500b\u5de5\u5177\u7684\u7f3a\u9ede\u5c31\u662f\u975e\u5e38\u6602\u8cb4\u554a\uff01\u662f\u56e0\u70ba\u6211\u5011\u5728\u53f0\u7063\u6709 TSRI \u7684\u5e6b\u5fd9\uff0c\u5728\u5b78\u6821\u88e1\u9762\u624d\u53ef\u4ee5\u514d\u8cbb\u4f7f\u7528\u9019\u5169\u500b\u5de5\u5177\uff0c\u4e0d\u7136\u4e00\u822c\u4eba\u6839\u672c\u6c92\u6709\u6a5f\u6703\u7528\u5230\u3002 \u6240\u4ee5\u70ba\u4e86\u4e0d\u4f9d\u8cf4\u5546\u696d\u5de5\u5177\uff0c\u4f7f\u9019\u4efd\u6559\u6750\u53ef\u4ee5\u63a8\u5ee3\u51fa\u53bb\uff0c\u6211\u5011\u6539\u6210\u4f7f\u7528 Verilator\uff0c\u4e00\u500b\u5b8c\u5168\u958b\u6e90\uff08Open-Source\uff09\u7684 Verilog/SystemVerilog Simulator\u3002</p> <p>\u76f8\u8f03\u65bc Icarus Verilog\uff08a.k.a. iverilog\uff09\uff0cVerilator \u6700\u5927\u7684\u7279\u9ede\u5c31\u662f\u6a21\u64ec\u901f\u5ea6\u5f88\u5feb\uff0c\u975e\u5e38\u5feb\uff08\u751a\u81f3\u6bd4\u4ed8\u8cbb\u7684 Simulator \u9084\u5feb\uff09\uff0c\u4e26\u4e14\u76f8\u5c0d\u65bc iverilog\uff0cVerilator \u5c0d\u65bc SystemVerilog \u6709\u826f\u597d\u7684\u652f\u63f4\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5728\u5de5\u696d\u4e0a\u8a31\u591a\u5de5\u6642\u5176\u5be6\u4e5f\u6703\u4f7f\u7528 Verilator \u6700\u7232\u65e9\u671f\u7684\u9a57\u8b49\u5de5\u5177\uff08\u6642\u9593\u5c31\u662f\u91d1\u9322\uff01\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u77e5\u9053 Verilator \u4e26\u4e0d\u662f\u53ea\u662f\u4e00\u500b toy project \u800c\u5df2\u3002</p>"},{"location":"labs/lab5/#how-verilator-works","title":"How Verilator Works","text":"<p>The verilator executable is invoked with parameters similar to GCC or other simulators such as Cadence Verilog-XL/NC-Verilog, or Synopsys VCS. Verilator reads the specified SystemVerilog code, lints it, optionally adds coverage and waveform tracing support, and compiles the design into a source-level multithreaded C++ or SystemC \u201cmodel\u201d. The resulting model\u2019s C++ or SystemC code is output as .cpp and .h files. This is referred to as \u201cVerilating\u201d, andrthe process is \u201cto Verilate\u201d; the output is a \u201cVerilated\u201d model.</p>"},{"location":"labs/lab5/#systemverilog-dpi-c-mechanism","title":"SystemVerilog DPI-C Mechanism","text":"<p>TBD</p>"},{"location":"labs/lab5/#softwarehardware-co-simulation-differential-testing","title":"Software/Hardware Co-Simulation - Differential Testing","text":"<p>\u9084\u8a18\u5f97\u6211\u5011\u5728 Lab 2 \u7684\u6642\u5019\u8a2d\u8a08\u4e86\u4e00\u500b instruction-driven \u7684 ISA Simulator (ISS) \u55ce\uff1f\u4e4b\u6240\u4ee5\u6703\u53eb\u5927\u5bb6\u5728\u5be6\u969b\u4f7f\u7528 HDL \u64b0\u5beb RTL-Level CPU \u4e4b\u524d\u5148\u7528 C \u8a9e\u8a00\u523b\u51fa\u4e00\u500b ISS \u662f\u6709\u539f\u56e0\u7684\u3002 \u57fa\u672c\u4e0a\uff0c\u6211\u5011\u5df2\u7d93\u5229\u7528\u8a31\u591a\u6e2c\u8a66\u7a0b\u5f0f\u5c0d\u6211\u5011\u7684 ISS \u505a\u521d\u6b65\u7684\u9a57\u8b49\u4e86\uff0c\u5047\u8a2d\u4f60\u7684 ISS \u6709\u901a\u904e\u52a9\u6559\u63d0\u4f9b\u7684\u6240\u6709\u6e2c\u8cc7\u7684\u8a71\uff0c\u5047\u8a2d\u52a9\u6559\u63d0\u4f9b\u7684\u6e2c\u8cc7\u96c6\u5408\u70ba \\(S\\)\uff0c\u6211\u5011\u53ef\u4ee5\u5047\u5b9a\uff0c\u5728\u6211\u5011\u53ea\u4f7f\u7528 \\(S\\) \u4f86\u9032\u884c\u6e2c\u8a66\u7684\u524d\u63d0\u4e0b\uff0c\u6211\u5011\u6240\u5be6\u4f5c\u7684 ISS \u53ef\u4ee5\u4f5c\u70ba Reference Model (Golden Model)\u3002</p> <p>\u5927\u5bb6\u61c9\u8a72\u90fd\u591a\u5c11\u9ad4\u9a57\u904e\u770b\u6ce2\u5f62\u5730\u7344\u5427XD\uff0c\u4f46\u6709\u4e86 ISS \u4e4b\u5f8c\uff0c\u5728\u6211\u5011\u8a2d\u8a08 CPU \u7684\u6642\u5019\uff0c\u5c31\u53ef\u4ee5\u505a Co-Simulation\u3002 \u5177\u9ad4\u4f86\u8aaa\uff0cCo-Simulation \u6307\u7684\u662f\u628a\u6211\u5011\u7684 ISS \u548c Single-Cycle CPU \u505a Co-sim\uff0c\u628a ISS \u7576\u4f5c Golden Model\uff0c\u7136\u5f8c\u53bb\u5617\u8a66\u6355\u6349 CPU \u7684\u932f\u8aa4\u3002 \u4f46\u6709\u4e00\u500b\u554f\u984c\u662f\uff0cISS \u662f\u7528 C \u8a9e\u8a00\u5be6\u4f5c\u7684\uff0c\u800c CPU \u5247\u662f\u7528 SystemVerilog \u5be6\u4f5c\u7684\uff0c\u800c\u6211\u5011\u7684 Testbench \u5247\u662f\u6df7\u5408\u4e86 SystemVerilog \u9084\u6709 C++ \u9019\u5169\u7a2e\u8a9e\u8a00\uff0c\u9019\u6a23\u4e0d\u540c\u8a9e\u8a00\u4e4b\u9593\u8981\u600e\u9ebc\u6a23\u624d\u80fd\u505a co-sim \u5462\uff1f \u9019\u5c31\u6703\u9700\u8981\u4f7f\u7528\u5230 SystemVerilog \u7684 DPI-C \u6a5f\u5236\u3002DPI-C \u6a5f\u5236\u8b93\u6211\u5011\u53ef\u4ee5\u5728 SystemVerilog \u548c C \u8a9e\u8a00\u4e4b\u9593\u50b3\u905e\u8cc7\u8a0a\uff0c\u9084\u6709\u8b93 SystemVerilog \u547c\u53eb C Function\uff0c\u6216\u662f\u8b93 C Program \u547c\u53eb SystemVerilog Function/Task\u3002</p> <p>DiffTest</p> <p>\u5176\u5be6\u9019\u7a2e Co-Simulation \u7684\u65b9\u5f0f\u4e26\u4e0d\u5c11\u898b\uff0c\u5728\u696d\u754c\u5df2\u7d93\u662f\u5f88\u5e38\u898b\u7684\u65b9\u6cd5\uff0c\u800c\u6211\u5011\u6240\u7528\u7684\u9019\u5957 Differential Testing \u6846\u67b6\u5176\u5be6\u662f\u53c3\u8003\u4e2d\u570b\u90a3\u908a\u5e7e\u500b\u5f88\u6709\u540d\u7684\u5c08\u6848\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c3\u8003\u4ee5\u4e0b\u8cc7\u8a0a</p> <ol> <li>\u4e00\u751f\u4e00\u82af\u8a08\u756b</li> <li>\u534f\u540c\u4eff\u771f\u6846\u67b6 (DiffTest)</li> </ol> <p>Differential Tstgin \u9019\u5957\u6846\u67b6\u672c\u8eab\u6709\u5f88\u591a\u53ef\u4ee5\u767c\u5c55\u548c\u512a\u5316\u7684\u7a7a\u9593\uff0c\u4f46\u5728\u9019\u88e1\u6211\u5011\u50c5\u50c5\u8a0e\u8ad6 DiffTest \u6700\u6838\u5fc3\u7684\u6982\u5ff5\uff0c\u4ee5\u53ca\u5b83\u8a72\u5982\u4f55\u5e6b\u52a9\u6211\u5011\u66f4\u6709\u6548\u7387\u5730\u9032\u884c Design Verification\u3002 \u4e00\u822c\u5728\u6211\u5011\u76f4\u63a5\u770b\u6ce2\u5f62\uff08Waveform\uff09\u9032\u884c\u9664\u932f\u7684\u904e\u7a0b\u4e2d\uff0c\u6211\u5011\u5e38\u5e38\u9700\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5b9a\u4f4d\u7b2c\u4e00\u500b\u932f\u8aa4\u767c\u751f\u7684\u6642\u6a5f\u3002\u76f4\u63a5\u4f7f\u7528\u6ce2\u5f62\u9664\u932f\u7684\u597d\u8655\u5c31\u662f\u9700\u8981\u7684\u524d\u7f6e\u8655\u7406\u5de5\u4f5c\u5f88\u5c11\uff0c\u5728\u6a21\u64ec\u7d50\u675f\u5f8c\u628a\u6ce2\u5f62 dump \u51fa\u4f86\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528\u5de5\u5177\u4f86\u770b\u6ce2\u5f62\u3002 \u9019\u6a23\u5b50\u7684\u65b9\u5f0f\u6216\u8a31\u5728\u6211\u5011\u7684 Test Program \u9084\u5f88\u5c0f\u7684\u6642\u5019\u4e0d\u6703\u9047\u5230\u592a\u5927\u7684\u56f0\u96e3\uff0c\u4f46\u5047\u5982\u4eca\u5929\u5927\u5bb6\u8981\u8dd1\u7684\u6a21\u64ec\u7a0b\u5f0f\u662f\u4e00\u500b\u4f5c\u696d\u7cfb\u7d71\uff0c\u52d5\u4e0d\u52d5\u6a21\u64ec\u5c31\u662f\u4e0a\u5104\u500b Cycle \u8d77\u8df3\u7684\u8a71\uff0c\u9019\u6642\u5019\u53ea\u4f9d\u8cf4\u6ce2\u5f62\u5c31\u6703\u8b8a\u6210\u4e00\u4ef6\u4e0d\u5207\u5be6\u969b\u7684\u4e8b\u60c5\u3002</p> <p>DiffTest \u7684\u6982\u5ff5\u662f\u6211\u5011\u9700\u8981\u4e00\u500b Golden Model \u4f5c\u70ba\u53c3\u8003\u7b54\u6848\uff0c\u4e26\u4e14\u5728\u6bcf\u689d\u6307\u4ee4\u57f7\u884c\u5b8c\u4e4b\u5f8c\u90fd\u57f7\u884c\u4e00\u6b21\u6bd4\u5c0d\uff0c\u5982\u6b64\u4e00\u4f86\u6211\u5011\u5c31\u53ef\u4ee5\u5728\u7b2c\u4e00\u500b\u51fa\u932f\u7684\u77ac\u9593\u6355\u6349\u5230\u932f\u8aa4\u3002 \u4f46\u6709\u4e00\u500b\u5f88\u91cd\u8981\u7684\u554f\u984c\u662f\uff0c\u6211\u5011\u61c9\u8a72\u8981\u6bd4\u5c0d Gloden Model \u548c DUT \u4e4b\u9593\u7684\u4ec0\u9ebc\u6771\u897f\uff1f \u5927\u5bb6\u61c9\u8a72\u9084\u8a18\u5f97\u6211\u5011\u5728 Lab 2 \u88e1\u9762\u6700\u4e00\u958b\u59cb\u8aaa\u7684\uff0cCPU \u672c\u8cea\u4e0a\u5c31\u662f Combitional Logic \u52a0\u4e0a Sequantial Logic\uff0c\u53ef\u4ee5\u88ab\u8996\u70ba\u4e00\u500b\u5de8\u5927\u7684\u6709\u9650\u72c0\u614b\u6a5f\uff08FSM\uff09\uff0c\u5c0d\u65bc\u6307\u4ee4\u7684\u57f7\u884c\u4f86\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u6bd4\u5c0d\u7684\u5c31\u662f CPU \u7684\u72c0\u614b\uff01\u800c CPU \u7684\u72c0\u614b\u5247\u7531 PC\u3001Register \u548c Memory \u6240\u7d44\u6210\u3002</p> <p>\u70ba\u4e86\u5be6\u73fe DiffTest\uff0c\u5177\u9ad4\u4f86\u8aaa\u6211\u5011\u9700\u8981\u5e6b\u6211\u5011\u7684 Golden Model\uff08\u4e5f\u5c31\u662f Lab 2 \u5be6\u4f5c\u7684 ISS\uff09\u52a0\u4e0a\u5e7e\u500b API\uff1a</p> <ol> <li><code>void difftest_init(void)</code></li> <li><code>viud difftest_get_current_pc(void *buf)</code></li> <li><code>void difftset_get_regs(void *buf)</code></li> <li><code>void difftest_set_regs(cosnt void* regs_from_dut)</code></li> <li><code>void difftest_memcpy_from_dut(uint64_t addr, const void* buf, size_t mem_size)</code></li> <li><code>void difftest_step(void)</code></li> <li><code>void difftest_fini(void)</code></li> </ol> <p>\u518d\u4f86\uff0c\u6211\u5011\u5206\u6790 <code>testbench.sv</code> \u4e2d\u95dc\u65bc DiffTest \u7684\u90e8\u5206\uff08\u5728 <code>testbench.sv</code> \u4e2d\u7684 DPI-C function \u7684\u5b9a\u7fa9\u90fd\u5728 <code>difftest.cpp</code> \u4e2d\uff09</p> Part of testbench.sv<pre><code>// defines\n`define CYCLE 10\n`define MAX_CLOCK_CYCLE 1000000\n`define SO_FILE_NAME \"iss/build/libiss.so\"\n`define IM core.im.mem\n`define DM core.dm.mem\n`define REGFILE core.regfile.mem\n`define PC core.pc.current_pc\n\n// DPI-C function declaration (8 functions in total)\nimport \"DPI-C\" function void difftest_init(input string so_file_name);\nimport \"DPI-C\" function void difftest_memcpy_from_dut(input logic [7:0] MEM[65536]);\nimport \"DPI-C\" function void difftest_get_current_pc(input logic [63:0] current_pc);\nimport \"DPI-C\" function void difftest_get_regs(input logic [63:0] regFile[32]);\nimport \"DPI-C\" function void difftest_set_regs();\nimport \"DPI-C\" function void difftest_check(inout bit success_flag);\nimport \"DPI-C\" function void difftest_step();\nimport \"DPI-C\" function void difftest_fini();\n\nmodule testbench;\n    // ...\n    initial begin\n        // ...\n        // initialize difftest framework\n        difftest_init(`SO_FILE_NAME);\n        // copy register contents from dut to ref\n        difftest_get_regs(`REGFILE);\n        difftest_set_regs();\n        // copy memory contents from dut to ref\n        difftest_memcpy_from_dut(`DM);\n\n        // difftest main loop\n        do begin\n            /* call difftest_step() */\n            difftest_get_regs(`REGFILE);  // get register file of dut\n            difftest_get_current_pc(`PC);  // get current PC of dut\n            difftest_check(difftest_success_flag);\n            difftest_step();  // make ref step one clock cycle\n            #(`CYCLE);  // dut step one clock cycle\n        end while (difftest_success_flag == 1'b1);\n        // ...\n    end\n    // ...\nendmodule\n</code></pre> <p>\u5982\u679c\u6211\u5011\u5617\u8a66\u5c07 DiffTest \u7684\u904b\u4f5c\u6d41\u7a0b\u8996\u89ba\u5316\uff0c\u53ef\u4ee5\u756b\u51fa\u4e0b\u9762\u9019\u5f35\u5716\uff08\u4f7f\u7528 mermaid \u7e6a\u88fd\uff09</p> <p> <pre><code>sequenceDiagram\n    autonumber\n    participant ISS\n    participant Testbench\n    participant Single-Cycle CPU\n    Single-Cycle CPU-&gt;&gt;Single-Cycle CPU: reset PC and GPR\n    Single-Cycle CPU-&gt;&gt;Single-Cycle CPU: $readmemh to set MEM\n    rect\n    note right of ISS: DiffTest Initialization\n    Testbench-&gt;&gt;ISS: Initialize ISS\n    Single-Cycle CPU-&gt;&gt;Testbench: Sends GPR\n    Testbench-&gt;&gt;ISS: Sets GPR\n    Single-Cycle CPU-&gt;&gt;Testbench: Sends MEM\n    Testbench-&gt;&gt;ISS: Sets MEM\n    end\n    rect\n        note right of Single-Cycle CPU: DiffTest main-loop\n        loop Each step\n            ISS-&gt;&gt;ISS: difftest_step()\n            ISS-&gt;&gt;Testbench: Sends PC and GPR\n            Single-Cycle CPU-&gt;Testbench: Step one clock cycle\n            Single-Cycle CPU-&gt;&gt;Testbench: Sends PC and GPR\n            Testbench-&gt;&gt;Testbench: Check architectural states\n        end\n    end</code></pre> </p> <p>\u53ef\u4ee5\u770b\u5230\u4e00\u958b\u59cb CPU \u672c\u8eab\u6703\u5148\u9032\u884c\u521d\u59cb\u5316\uff0c\u5c07\u81ea\u8eab\u7684 GPR \u548c PC \u90fd\u91cd\u7f6e\uff0c\u4e26\u4e14\u4f7f\u7528 SystemVerilog \u4e2d\u7684 <code>$readmemh()</code> \u7cfb\u7d71\u51fd\u5f0f\u4f86\u5c07 Data Memopry (DM) \u548c Instruction Memory (IM) \u521d\u59cb\u5316\u3002 \u5f85 CPU \u672c\u8eab\u521d\u59cb\u5316\u5b8c\u7562\u4e4b\u5f8c\uff0c\u5c31\u6703\u9032\u5165 DiffTest \u7684 workdlow\u3002\u6700\u4e00\u958b\u59cb\uff0c\u9664\u4e86\u8abf\u7528 <code>difftest_init()</code> \u5c07 ISS \u521d\u59cb\u5316\u4e4b\u5916\uff0cDiffTest \u4e5f\u8981\u5c07 CPU \u548c ISS \u7684 Architectural States \u9032\u884c\u540c\u6b65 (PC and GPR)\uff0c\u5c0d\u61c9\u5230\u4e0a\u65b9\u5716\u4e2d\u7684 DiffTest Initialization\u3002 \u63a5\u4e0b\u4f86\u5c31\u6703\u9032\u5165 Difftest main-loop\uff0c\u5728 main-loop \u4e2d DiffTest \u6703\u9996\u5148\u547c\u53eb <code>ref_difftest_step()</code> \u4f7f ISS \u57f7\u884c\u4e00\u689d\u6307\u4ee4\uff0c\u4e4b\u5f8c\u5728 <code>testbench.sv</code> \u4e2d\u7684 <code>#(CYCLE)</code> \u6703\u4f7f simulation time \u5f80\u5f8c\u63a8\u9032\u4e00\u500b\u9031\u671f\u7684\u6642\u9593\uff0c\u56e0\u6b64 CPU \u4e5f\u6703\u57f7\u884c\u4e00\u689d\u6307\u4ee4\u3002 \u4e4b\u5f8c\u5c31\u6703\u5f97\u5230 ISS \u548c CPU \u5404\u81ea\u7684 Architectural States \u4e26\u4e14\u9032\u884c\u6bd4\u8f03\uff0c\u6aa2\u67e5\u5169\u8005\u72c0\u614b\u662f\u5426\u76f8\u540c\u3002</p>"},{"location":"labs/lab5/#chapter-4-start-to-do-the-assignment","title":"Chapter 4. Start to Do The Assignment","text":""},{"location":"labs/lab5/#41-assignment-requirement","title":"4.1 Assignment Requirement","text":"<ol> <li>\u8acb\u5b8c\u6210 Single-Cycle CPU \u7684\u5be6\u4f5c</li> <li>\u901a\u904e\u6240\u6709\u7684 <code>inst-tests</code> \u548c <code>test-prog</code><ul> <li>\u78ba\u4fdd\u7a0b\u5f0f\u57f7\u884c\u7d50\u679c\u6b63\u78ba</li> <li>\u78ba\u4fdd\u57f7\u884c\u5b8c\u7562\u5f8c\u901a\u904e Differential Testing</li> </ul> </li> </ol>"},{"location":"labs/lab5/#42-notes","title":"4.2 Notes","text":"<ol> <li>Fork the repository the TA provide<ul> <li>\u8acb\u5148\u6253\u958b\u9023\u7d50 Lab 5</li> <li>\u9ede\u9078\u53f3\u4e0a\u89d2\u7684 Fork </li> <li>\u9032\u5230\u4e0b\u4e00\u500b\u9801\u9762\u5f8c\uff0c\u628a Project URL \u7684 namespace \u6539\u6210\u81ea\u5df1\u7684\u5b78\u865f\uff0c\u4e26\u4e14\u5c07 Visibility Level \u6539\u6210 Private </li> <li>\u6309\u4e0b\u6700\u4e0b\u9762\u7684 Fork project \u5373\u53ef\u5f97\u5230\u4e00\u4efd\u5c6c\u65bc\u81ea\u5df1\u79c1\u6709\u7684 Sample Code Repo</li> </ul> </li> <li>Clone your private repo<ul> <li>\u5148\u78ba\u5b9a\u81ea\u5df1\u5df2\u7d93\u6253\u958b\u8ab2\u7a0b\u958b\u767c\u74b0\u5883\uff08Container\uff09\uff0c\u4e26\u4e14\u5728\u74b0\u5883\u4e2d\u7684 <code>workspace</code> \u5e95\u4e0b</li> <li>\u4e0b\u8f09\u81ea\u5df1\u7684 Private Repo\uff08\u8a18\u5f97\u66ff\u63db &lt;Your Student ID&gt;\uff09 <p><code>git clone https://gitlab.course.aislab.ee.ncku.edu.tw/&lt;Your Student ID&gt;/lab-5.git</code></p> </li> <li>\u9032\u5165\u8cc7\u6599\u593e <p><code>cd lab-5</code></p> </li> <li>\u5c0d Git Submodule \u9032\u884c\u521d\u59cb\u5316 <p><code>git submodule init &amp;&amp; git submodule update --recursive</code></p> </li> </ul> </li> <li>Notes<ul> <li>\u56e0\u70ba\u5728\u9810\u8a2d\u60c5\u6cc1\u4e4b\u4e0b\uff0c\u53ea\u8981 Gitlab Repo \u4e2d\u5305\u542b <code>.gitlab-ci.yml</code> \u6a94\u6848\u5c31\u6703\u89f8\u767c CI/CD Pipeline\uff0c\u5982\u679c\u4f60\u5728\u524d\u671f\u5c1a\u672a\u5b8c\u6210\u4f5c\u696d\u7684\u6642\u5019\u4e0d\u60f3\u89f8\u767c Pipeline\uff0c\u53ef\u4ee5\u5148\u5728 Gitlab \u4f60\u7684 Private Repo \u4e2d\u7684\u8a2d\u5b9a\u5c07 CI/CD \u529f\u80fd\u95dc\u9589\uff0c\u5f85\u5b8c\u6210\u4f5c\u696d\u4e4b\u5f8c\u518d\u6253\u958b</li> </ul> </li> <li>\u8acb\u8a18\u5f97\u4f9d\u64da Assignment 5 Report Template \u64b0\u5beb\u672c\u6b21\u4f5c\u696d\u7684\u5831\u544a\uff0c\u4e26\u4e14\u7e73\u4ea4\u5831\u544a\u9023\u7d50\u5230\u6210\u5927 Moodle \u4f5c\u696d\u7e73\u4ea4\u5340\u4e0a</li> </ol>"},{"location":"labs/lab_overview/","title":"Tools for CO2024","text":"<p>\u672c\u5b78\u671f\u8ab2\u7a0b\u6211\u5011\u6703\u4f7f\u7528\u5230\u4e00\u4e9b\u5de5\u5177\u6216\u662f Apps</p> <p>Tools</p> <ul> <li> Docker - \u900f\u904eDocker\u5bb9\u5668\u505a\u70baLab\u7684\u958b\u767c\u74b0\u5883</li> <li> Gitlab - \u8ab2\u7a0b\u5c08\u7528\u7684\u5c08\u6848\u7ba1\u7406\u7a0b\u5f0f</li> <li>Mattermost - \u8ab2\u7a0b\u5c08\u7528\u7684\u901a\u8a0a\u8edf\u9ad4 (\u7d81\u5b9aGitlab\u5e33\u865f)</li> <li>Hedgedoc - \u53ef\u4ee5\u4f7f\u7528Markdown\u8a9e\u6cd5\u7de8\u5beb\u6587\u4ef6 (\u7d81\u5b9aGitlab\u5e33\u865f)</li> </ul>"},{"location":"labs/lab_overview/#labs-overview","title":"Labs Overview","text":"<p>Video Playlist for Labs:  links</p> <ul> <li>Lab 0 - How To Ask Questions The Smart Way</li> <li>Lab 1 - C Programming and Compilation Flow</li> <li>Lab 2 - Simple RISC-V ISA Simulator with RV64I</li> <li>Lab 3 - Bare-metal Runtime Environment and RISC-V Assembly Programming</li> <li>Lab 4 - RTL Programming Review using SystemVerilog (Optional)</li> <li>Lab 5 - Single-Cycle CPU and Differential Testing</li> <li>Lab 6 - Bus Protocol and Arbitration (Optional)</li> <li>Lab 7 - Pipeline CPU with Cache Design</li> <li>Lab 8 - SIMD Accelerator with Memory-mapped I/O Control</li> </ul>"},{"location":"rtl/chisel/","title":"Chisel HDL","text":"<p>Info</p> <ul> <li>Contributor\uff1aTA \u5cfb\u8c6a</li> <li>Last Update\uff1a2024/09/26</li> </ul> <p>Success</p> <ul> <li>\u53c3\u8003<ul> <li>chipsalliance/chisel - A Modern Hardware Design Language</li> </ul> </li> </ul>"},{"location":"rtl/chisel/#preamble","title":"Preamble","text":"<p>Chisel \u662f\u7531 UC Berkeley \u57fa\u65bc Scala \u8a9e\u8a00\u767c\u5c55\u7684\u4e00\u500b Domain-Specific Language\uff08DSL\uff09\uff0c\u5c08\u9580\u7528\u65bc\u786c\u9ad4\u63cf\u8ff0\uff08Hardware Description\uff09\uff0c\u4e5f\u5c31\u662f\u7528\u4f86\u63cf\u8ff0\u6578\u4f4d\u96fb\u8def\u7684\u67b6\u69cb\u3002 \u56e0\u70ba Chisel \u662f\u57fa\u65bc Scala \u958b\u767c\u7684\uff0c\u6240\u4ee5 Chisel \u6709\u8a31\u591a\u975e\u5e38 High-Level \u7684\u8a9e\u6cd5\u53ef\u4ee5\u4f7f\u7528\uff0c\u53ef\u4ee5\u4f7f\u96fb\u8def\u7684\u958b\u767c\u8b8a\u5f97\u66f4\u654f\u6377\uff08Agile\uff09\u3001\u5feb\u901f\u3002</p> <p>\u9019\u7bc7\u6587\u7ae0\u4e0d\u6703\u6559\u5927\u5bb6\u95dc\u65bc Chisel \u592a\u9032\u968e\u7684\u5167\u5bb9\uff0c\u53ea\u662f\u6559\u5927\u5bb6\u4e00\u4e9b\u57fa\u672c\u7684 Chisel \u5beb\u6cd5\u548c\u6982\u5ff5\u3002\u5927\u5bb6\u6709\u8208\u8da3\u7684\u8a71\u6b61\u8fce\u81ea\u5df1\u518d\u6df1\u5165\u7814\u7a76\uff0c\u6216\u662f\u627e\u52a9\u6559\u5011\u8a0e\u8ad6\u3002</p> <p>Success</p> <p>\u5927\u5bb6\u53ef\u4ee5\u53c3\u8003\u9019\u7bc7\u6587\u7ae0\uff1a\u82af\u7247\u5f00\u53d1\u8bed\u8a00\uff1aVerilog\u5728\u5de6\uff0cChisel\u5728\u53f3</p>"},{"location":"rtl/chisel/#chisel-basics","title":"Chisel Basics","text":"<p>TBD</p>"},{"location":"rtl/sv/","title":"From Verilog to SystemVerilog for Hardware Designing","text":"<p>Info</p> <ul> <li>Contributors: TA \u5cfb\u8c6a</li> <li>Last updated: 2024/11/30</li> </ul> <p>Recommend Reading List</p> <ol> <li>\u63a8\u85a6\u95b1\u8b80\u8ad6\u6587 Synthesiing SystemVerilog - Busting the Myth that SystemVerilog is only for Verification\uff0c\u8a72\u8ad6\u6587\u8a73\u7d30\u5730\u4ecb\u7d39\u4e86 SystemVerilog \u5c0d\u65bc\u96fb\u8def\u8a2d\u8a08\u7684\u597d\u7528\u4e4b\u8655\u3002</li> <li>\u5fc3\u6709\u9918\u529b\u7684\u8a71\uff0c\u80fd\u5920\u770b\u904e SystemVerilog \u7684\u898f\u683c\u66f8\u7576\u7136\u662f\u6700\u597d\u7684\uff1a1800-2023 - IEEE Standard for SystemVerilog--Unified Hardware Design, Specification, and Verification Language<ul> <li>Ps\uff1a\u900f\u904e\u6210\u5927\u6821\u5167\u7684\u7db2\u8def\u61c9\u8a72\u53ef\u4ee5\u67e5\u770b PDF \u6a94\u6848</li> </ul> </li> </ol>"},{"location":"rtl/sv/#what-is-systemverilog","title":"What is  SystemVerilog?","text":"<p>SystemVerilog \u662f\u4e00\u7a2e\u786c\u9ad4\u63cf\u8ff0\u548c\u9a57\u8b49\u8a9e\u8a00\uff0c\u662f Verilog \u7684\u64f4\u5c55\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u589e\u5f37\u8a2d\u8a08\u548c\u9a57\u8b49\u7684\u529f\u80fd\u3002 Verilog \u8d77\u521d\u5728 1980 \u5e74\u4ee3\u88ab\u8a2d\u8a08\u7528\u4f86\u63cf\u8ff0\u786c\u9ad4\uff0c\u63d0\u4f9b\u8a2d\u8a08\u8005\u80fd\u5920\u7528\u9ad8\u5c64\u6b21\u8a9e\u6cd5\u4f86\u63cf\u8ff0\u6578\u4f4d\u96fb\u8def\u7684\u884c\u70ba\u53ca\u7d50\u69cb\u3002 \u7531\u65bc\u5176\u7c21\u6f54\u7684\u8a9e\u6cd5\uff0cVerilog \u6210\u70ba\u4e86\u786c\u9ad4\u8a2d\u8a08\u7684\u91cd\u8981\u5de5\u5177\u3002\u7136\u800c\uff0c\u96a8\u8457\u786c\u9ad4\u8a2d\u8a08\u65e5\u76ca\u8907\u96dc\uff0cVerilog \u7684\u8868\u9054\u80fd\u529b\u548c\u6e2c\u8a66\u9a57\u8b49\u529f\u80fd\u986f\u5f97\u4e0d\u8db3\u3002 \u70ba\u4e86\u6eff\u8db3\u9019\u4e9b\u9700\u6c42\uff0cSystemVerilog \u5728 2005 \u5e74\u88ab\u5f15\u5165\u4e26\u6210\u70ba IEEE \u6a19\u6e96\uff08IEEE 1800\uff09\u3002</p> <p>SystemVerilog \u589e\u52a0\u4e86\u8a31\u591a\u73fe\u4ee3\u7a0b\u5f0f\u8a9e\u8a00\u7684\u7279\u6027\uff0c\u4f7f\u8a2d\u8a08\u8005\u80fd\u4ee5\u66f4\u9ad8\u5c64\u6b21\u7684\u65b9\u5f0f\u4f86\u63cf\u8ff0\u786c\u9ad4\u7d50\u69cb\u548c\u884c\u70ba\u3002 \u4f8b\u5982\uff0c\u5b83\u5f15\u5165\u4e86\u5f37\u578b\u5225\u7684\u8cc7\u6599\u7d50\u69cb\u548c\u591a\u7a2e\u63a7\u5236\u8a9e\u53e5\uff0c\u5141\u8a31\u66f4\u9748\u6d3b\u7684\u6d41\u7a0b\u63a7\u5236\u548c\u8cc7\u6599\u7ba1\u7406\uff0c\u5f9e\u800c\u66f4\u7cbe\u78ba\u5730\u63cf\u8ff0\u786c\u9ad4\u884c\u70ba\u3002 \u53e6\u5916\uff0cSystemVerilog \u63d0\u4f9b\u4e86\u7269\u4ef6\u5c0e\u5411\u76f8\u95dc\u7684\u7a0b\u5f0f\u8a9e\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528\u985e\u5225\uff08class\uff09\u4f86\u5efa\u6a21\u8907\u96dc\u7684\u786c\u9ad4\u6a21\u7d44\u8207\u5176\u4ea4\u4e92\u884c\u70ba\uff0c\u9019\u5728\u9a57\u8b49\u904e\u7a0b\u4e2d\u5c24\u70ba\u91cd\u8981\uff0c\u7279\u5225\u662f\u7576\u8a2d\u8a08\u8005\u9700\u8981\u6a21\u64ec\u6578\u64da\u50b3\u8f38\u6216\u72c0\u614b\u6539\u8b8a\u6642\u3002</p> <p>\u9664\u4e86\u8a2d\u8a08\uff0cSystemVerilog \u4e5f\u8457\u91cd\u5f37\u5316\u4e86\u9a57\u8b49\u529f\u80fd\u3002Verilog \u672c\u8eab\u4e3b\u8981\u7528\u65bc\u8a2d\u8a08\u786c\u9ad4\uff0c\u7f3a\u4e4f\u6709\u6548\u7684\u6e2c\u8a66\u8207\u9a57\u8b49\u5de5\u5177\uff0c\u800c SystemVerilog \u64f4\u5c55\u4e86\u9019\u65b9\u9762\u7684\u80fd\u529b\uff0c\u63d0\u4f9b\u4e86\u9ad8\u968e\u7684\u6e2c\u8a66\u5efa\u6a21\u8a9e\u6cd5\u5982 interfaces\u3001assertions \u548c coverage \u7b49\uff0c\u9069\u5408\u8907\u96dc\u7684\u9a57\u8b49\u5834\u666f\u3002 \u9019\u4e9b\u529f\u80fd\u8b93\u5de5\u7a0b\u5e2b\u80fd\u5920\u5b9a\u7fa9\u8a0a\u865f\u4e4b\u9593\u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u8a2d\u7f6e\u65b7\u8a00\uff08assertions\uff09\u4f86\u6aa2\u67e5\u7cfb\u7d71\u884c\u70ba\u7684\u6b63\u78ba\u6027\uff0c\u4e26\u85c9\u7531\u8986\u84cb\u7387\u5206\u6790\uff08coverage analysis\uff09\u78ba\u4fdd\u6e2c\u8a66\u5b8c\u6574\u6027\u3002\u9019\u4e9b\u589e\u5f37\u7684\u9a57\u8b49\u529f\u80fd\u8b93 SystemVerilog \u6210\u70ba\u4e86\u5ee3\u6cdb\u7528\u65bc\u786c\u9ad4\u9a57\u8b49\u7684\u8a9e\u8a00\u3002</p> <p>\u57fa\u672c\u4e0a\uff0cSystemVerilog \u662f\u5c0d Verilog \u7684\u5168\u9762\u5f37\u5316\u3002\u5b83\u4fdd\u7559\u4e86 Verilog \u4f5c\u70ba\u786c\u9ad4\u63cf\u8ff0\u8a9e\u8a00\u7684\u512a\u52e2\uff0c\u540c\u6642\u63d0\u4f9b\u4e86\u73fe\u4ee3\u5316\u7684\u7a0b\u5f0f\u5de5\u5177\u548c\u9a57\u8b49\u529f\u80fd\uff0c\u4f7f\u8a2d\u8a08\u8005\u53ef\u4ee5\u61c9\u5c0d\u7576\u4eca\u6578\u4f4d\u8a2d\u8a08\u4e2d\u7684\u8907\u96dc\u6311\u6230\u3002 \u4eca\u5929\uff0cSystemVerilog \u5df2\u88ab\u5ee3\u6cdb\u61c9\u7528\u65bc\u6578\u4f4d\u96fb\u8def\u8a2d\u8a08\u548c\u9a57\u8b49\u9818\u57df\uff0c\u5c24\u5176\u662f\u5728\u8a2d\u8a08\u8207\u6e2c\u8a66\u6d41\u7a0b\u9ad8\u5ea6\u7dca\u5bc6\u7d50\u5408\u7684\u60c5\u5883\u4e0b\u3002</p>"},{"location":"rtl/sv/#migrate-from-verilog-to-systemverilog","title":"Migrate from Verilog to SystemVerilog","text":"<p>\u57fa\u672c\u4e0a\uff0c\u55ae\u7d14\u4ee5\u96fb\u8def\u8a2d\u8a08\u4f86\u8aaa\uff08\u9019\u88e1\u4e0d\u8a0e\u8ad6\u95dc\u65bc\u9a57\u8b49\u7684\u90e8\u5206\uff09\uff0c\u8981\u5f9e Verilog \u9077\u79fb\u5230 SystemVerilog \u5176\u5be6\u4e26\u4e0d\u6703\u5f88\u56f0\u96e3\uff0c\u53ea\u9700\u8981\u591a\u5b78\u4e00\u4e9b\u597d\u7528\u7684\u8a9e\u6cd5\u548c\u89c0\u5ff5\u5373\u53ef\u3002 \u4f46\u662f\uff0c\u6b63\u662f\u56e0\u70ba\u9019\u4e9b\u65b0\u52a0\u5165\u7684\u8a9e\u6cd5\u7279\u6027\uff0c\u8b93 SystemVerilog \u8b8a\u5f97\u6bd4 Verilog \u9084\u8981\u5f37\u5927\u5f88\u591a\uff0c\u6709\u52a9\u65bc\u8b93\u7a0b\u5f0f\u78bc\u66f4\u7c21\u6f54\u3001\u597d\u8b80\u3002</p>"},{"location":"rtl/sv/#new-data-type-in-systemverilog","title":"New Data-Type in SystemVerilog","text":"<p>\u6211\u5011\u6700\u5e38\u5728 Verilog \u4e2d\u4f7f\u7528\u5230\u7684 Data Type \u61c9\u8a72\u5c31\u662f <code>wire</code> \u548c <code>reg</code>\uff0c\u4f46\u5728 SystemVerilog \u51fa\u73fe\u4e86\u4e00\u500b\u5f37\u5927\u4e14\u597d\u7528\u7684\u65b0\u8cc7\u6599\u578b\u614b\uff1a<code>logic</code>\u3002</p> <p>Net vs. Variable and Vector vs. Array</p> <p>\u5176\u5be6\u4e0d\u8ad6\u662f\u5728 Verilog \u6216\u662f SystemVerilog \u4e2d\uff0c\u90fd\u628a Data Type \u518d\u7d30\u5206\u6210\u5169\u985e\uff0c\u5206\u5225\u662f Net \u548c Variable\u3002</p>"},{"location":"rtl/sv/#enumeration","title":"Enumeration","text":"<p>Enumerated types allow variables and nets to be defined with a specific set of named values.</p> <p>Enumerated types have a base data type, which, by default, is int (a 2-state, 32-bit type). In the example above, State is an int type, and WAITE, LOAD and DONE will have 32-bit int values. The labels in the enumerated list are constants that have an associated logic value. By default, the first label in the list has a logic value of 0, and each subsequent label is incremented by one. Thus, in the example above, WAITE is 0, LOAD is 1, and DONE is 2.</p> <p>Designers can specify an explicit base type, allowing enumerated types to more specifically model hardware. Designers can specify explicit values for any or all labels in the enumerated list.</p> <p>\u9019\u500b\u8981\u7528\u4e2d\u6587\u6211\u89ba\u5f97\u5f88\u96e3\u89e3\u91cb\uff0c\u6240\u4ee5\u6211\u76f4\u63a5\u8cbc\u4e0a\u8ad6\u6587\u4e2d\u7684\u63cf\u8ff0\u4e86...\u6211\u89ba\u5f97\u53cd\u800c\u6bd4\u8f03\u597d\u61c2----- TA \u5cfb\u8c6a</p> <pre><code>enum {WAITE, LOAD, DONE} State; // a variable that has 3 legal values\nenum logic [2:0] {WAITE = 3\u2019b001, LOAD = 3\u2019b010, DONE = 3\u2019b100}\n    State, NextState; // Two 3-bit, 4-state enumerated variables with one-hot values\n</code></pre> <p>Enumerated types have stronger rule checking than built-in variables and nets. These rules include:</p> <ol> <li>The value of each label in the enumerated list must be unique</li> <li>The variable size and the size of the label values must be the same</li> <li>An enumerated variable can only be assigned:<ul> <li>A label from its enumerated list</li> <li>The value of another enumerated type from the same enumerated definition</li> </ul> </li> </ol> <p>\u6bd4\u8d77\u5728 Verilog \u4e2d\u6211\u5011\u5e38\u7528 <code>parameter</code> \u4f86\u9054\u6210 enumeration \u7684\u529f\u80fd\uff0c\u4f7f\u7528 SystemVerilog \u4e2d\u7684 <code>enum</code> \u6709\u5f88\u591a\u597d\u8655\uff0c\u8b93\u6211\u5011\u770b\u4e0b\u9762\u5169\u500b\u4f8b\u5b50\u3002</p> <pre><code>// Names for state machine states (one-hot encoding)\nparameter [2:0] WAITE=3'b001, LOAD=3'b010, DONE=3'b001; // FUNCTIONAL BUG\n\n// Names for mode_control output values\nparameter [1:0] READY=3'b101, SET=3'b010, GO=3'b110; // FUNCTIONAL BUG\n\n// State and next state variables\nreg [2:0] state, next_state, mode_control;\n\n// State Sequencer\nalways @(posedge clock or negedge resetN) begin\n    if (!resetN) state &lt;= 0; // FUNCTIONAL BUG\n    else state &lt;= next_state;\nend\n\n// Next State Decoder (sequentially cycle through the three states)\nalways @(state) begin\n    case (state)\n        WAITE: next_state = state + 1; // DANGEROUS CODE\n        LOAD : next_state = state + 1; // FUNCTIONAL BUG\n        DONE : next_state = state + 1; // FUNCTIONAL BUG\n    endcase\nend\n\n// Output Decoder\nalways @(state) begin\n    case (state)\n        WAITE: mode_control = READY;\n        LOAD : mode_control = SET;\n        DONE : mode_control = DONE; // FUNCTIONAL BUG\n    endcase\nend\n</code></pre> <p>\u8b93\u6211\u5011\u7528 <code>enum</code> \u6539\u5beb\u3002</p> <pre><code>enum logic [2:0] {WAITE=3'b001, LOAD=3'b010, DONE=3'b001} // SYNTAX ERROR\n    state, next_state;\nenum logic [1:0] {READY=3'b101, SET=3'b010, GO=3'b110} // SYNTAX ERROR\n    mode_control;\n\n\n// State Sequencer\nalways @(posedge clock or negedge resetN) begin\n    if (!resetN) state &lt;= 0; // SYNTAX ERROR\n    else state &lt;= next_state;\nend\n\n// Next State Decoder (sequentially cycle through the three states)\nalways @(state) begin\n    case (state)\n        WAITE: next_state = state + 1; // SYNTAX ERROR\n        LOAD : next_state = state + 1; // SYNTAX ERROR\n        DONE : next_state = state + 1; // SYNTAX ERROR\n    endcase\nend\n\n// Output Decoder\nalways @(state) begin\n    case (state)\n        WAITE: mode_control = READY;\n        LOAD : mode_control = SET;\n        DONE : mode_control = DONE; // SYNTAX ERROR\n    endcase\nend\n</code></pre> <p>\u672c\u4f86\u5728 Verilog \u4e2d\u4f7f\u7528 <code>parameter</code> \u7684\u5beb\u6cd5\u53ef\u80fd\u4e26\u4e0d\u6703\u5728\u7de8\u8b6f\u904e\u7a0b\u4e2d\u89f8\u767c\u7de8\u8b6f\u932f\u8aa4\uff0c\u4e0d\u904e\u7576\u6211\u5011\u6539\u6210\u4f7f\u7528 <code>enum</code> \u4f86\u5be6\u73fe\u76f8\u540c\u7684\u529f\u80fd\uff0c\u5c31\u53ef\u4ee5\u5728\u7de8\u8b6f\u968e\u6bb5\u5c31\u53ca\u65e9\u6293\u51fa\u8a31\u591a\u6dfa\u5728\u7684\u932f\u8aa4\u3002 \u56e0\u70ba syntax error \u6703\u76f4\u63a5\u89f8\u767c\u7de8\u8b6f\u932f\u8aa4\uff0c\u5982\u679c\u9023\u7de8\u8b6f\u90fd\u6c92\u8fa6\u6cd5\u901a\u904e\uff0c\u66f4\u4e0d\u7528\u8ac7\u5f8c\u9762\u7684\u6a21\u64ec\u3002</p>"},{"location":"rtl/sv/#structures","title":"Structures","text":"<p>\u5c31\u50cf\u662f C \u8a9e\u8a00\u4e2d\u7684 <code>struct</code> \u4e00\u6a23\uff0c\u5728 SystemVerilog \u4e2d\u6211\u5011\u4e5f\u53ef\u4ee5\u7528 struct \u4f86\u628a\u591a\u500b\u4e0d\u540c\u7684 data type elements \u5305\u88dd\u5728\u4e00\u8d77\u3002</p> <pre><code>struct {\n    logic [31:0] source_addr;\n    logic [31:0] dest_addr;\n    logic [31:0] data;\n    logic [31:0] ecc;\n} packet;\n</code></pre> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f7f\u7528\u4e0a\u7684\u8a9e\u6cd5\u7bc4\u4f8b\u3002</p> <pre><code>struct packet a_packet;\n\nalways_ff @(posedge clk or negedge rst) begin\n    if (!rst) begin\n        a_packet &lt;= '{default:0};\n        // also: a_packet.source_addr = 32'd0;\n    end\n    else begin\n        a_packet &lt;= '{old_addr, new_addr, data_in, ecc_func(data_in)};\n    end\nend\n</code></pre> <p>\u6211\u5011\u4e5f\u53ef\u4ee5\u5ba3\u544a structure \u70ba packed\uff0c\u6839\u64da IEEE-1800 \u898f\u683c\u66f8\u4e0a\u7684\u6558\u8ff0</p> <p>A packed structure is a mechanism for subdividing a vector into subfields, which can be conveniently accessed as members. Consequently, a packed structure consists of bit fields, which are packed together in memory without gaps. A packed structure differs from an unpacked structure in that, when a packed structure appears as a primary, it shall be treated as a single vector.</p> <p>A packed structure can also be used as a whole with arithmetic and logical operators, and its behavior is determined by its signedness, with unsigned being the default. The first member specified is the most significant and subsequent members follow in decreasing significance.</p> <p>\u7c21\u55ae\u4f86\u8aaa\uff0c\u57fa\u672c\u4e0a\u4e00\u500b packed struct \u5c31\u662f\u4e00\u500b vector\uff0c\u53ea\u662f\u56e0\u70ba\u6709\u6642\u5019\u6211\u5011\u6703\u5e0c\u671b\u628a\u4e00\u500b vector \u5206\u6210\u5f88\u591a\u500b subfields \u5404\u81ea\u9032\u884c\u64cd\u4f5c\uff0c\u9019\u6642\u5019\u5c31\u53ef\u4ee5\u5229\u7528 packed array\u3002 \u4e5f\u56e0\u6b64 packed array \u4e5f\u6709\u5206\u6210 signed \u6216\u662f unsigned\uff0c\u56e0\u70ba\u7576\u6211\u5011\u4f7f\u7528\u904b\u7b97\u7b26\u865f\u7684\u6642\u5019\uff0c\u5177\u9ad4\u7684\u884c\u70ba\u6703\u4f9d\u7167\u8b8a\u6578\u7684 signedness \u800c\u6709\u6240\u4e0d\u540c\uff0c\u8b6c\u5982\u7b97\u6578\u53f3\u79fb\uff08Arithemetic Right-Shift\uff09\u3002 \u5982\u679c\u6c92\u6709\u6307\u5b9a\u7684\u8a71\uff0c\u9810\u8a2d\u5c31\u662f unsigned\u3002</p> <p>\u800c\u5728 packed struct \u4e2d\u7b2c\u4e00\u500b\u5ba3\u544a\u7684 element \u6703\u7b49\u540c\u65bc\u55ae\u4e00\u4e00\u500b vector \u4e2d\u7684 most significant part\uff0c\u5f8c\u9762\u5ba3\u544a\u7684 elements \u5247\u4f9d\u5e8f\u4f54\u64da lower part\u3002</p> <pre><code>struct packed {\n    logic [1:0] parity;\n    logic [31:0] data;\n} data_word;\nstruct data_word a;\n\nalways_ff @(posedge) begin\n    a.parity = 2'd0;\n    a.data = 32'd1;\n    // the code above are equal to the code below\n    // a[33:32] = 2'd0;\n    // a[31:0] = 32'd1;\nend\n</code></pre> <p>\u5982\u679c\u8981\u5ba3\u544a signed packed array\uff0c\u53ef\u4ee5\u9019\u6a23\u505a</p> <pre><code>struct packed signed {\n    logic [1:0] parity;\n    logic [31:0] data;\n} data_word;\n</code></pre> <p>SystemVerilog Advantage By using structures to collect related variables together, the collection can be assigned and transferred to other modules as a group, reducing the lines of code and ensuring consistency. Only use packed structures when the structure will be used in a union. ----- Synthesiing SystemVerilog - Busting the Myth that SystemVerilog is only for Verification</p>"},{"location":"rtl/sv/#unions","title":"Unions","text":"<p>\u5728 SystemVerilog \u4e2d\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u50cf\u5728 C \u8a9e\u8a00\u4e2d\u4e00\u6a23\u4f7f\u7528 <code>union</code>\uff0c\u8b93\u6211\u5011\u53ef\u4ee5\u5c0d\u540c\u4e00\u7b46 Data \u6709\u4e0d\u540c\u7684\u89e3\u91cb\u65b9\u5f0f\u548c\u5b9a\u7fa9\u3002 \u4f46\u662f\u5728 SystemVerilog \u4e2d\uff0cunion \u5206\u6210\u4e09\u7a2e\uff0c\u5206\u5225\u662f\u666e\u901a\u7684 union\u3001tagged union \u548c packed union\u3002\u4f46\u5728\u9019\u88e1\u6211\u5011\u50c5\u4ecb\u7d39 packed union\u3002</p> <pre><code>union packed {\n    struct packed {\n        logic [31:0] data;\n        logic [31:0] address;\n    } data_packet;\n    struct packed {\n        logic [31:0] data;\n        logic [31:0] operation;\n    } instruction_packet;\n} packet_u;\n\nalways_ff @(posedge clock or negedge rstN) begin\n    if (!rstN) begin\n        packet_u &lt;= {\u20190, \u20190}; // reset\n    end\n    else if (op_type == DATA) begin\n        packet_u.data_packet &lt;= {d_in, addr};\n    end\n    else begin\n        packet_u.instruction_packet &lt;= {d_in, instr};\n    end\nend\n</code></pre> <p>\u5728 packed union \u4e2d\uff0c\u6240\u6709\u7684 member \u4e00\u5b9a\u90fd\u8981\u662f packed type\uff0c\u50cf\u662f packed struct\uff0c\u6216\u662f\u4e00\u822c\u7684 bit-vector \u9084\u6709 integer types\u3002  \u4f46\u57fa\u672c\u4e0a\u6211\u5011\u6700\u5e38\u7528\u5230\u7684\u5c31\u662f bit-vector \u6216\u662f packed struct\uff0c\u6240\u4ee5\u5927\u5bb6\u53ea\u8981\u8a18\u4f4f packed union \u88e1\u9762\u53ea\u80fd\u6709 bit-vector \u548c packed struct \u5c31\u597d\u3002</p> <p>RISC-V instruction example of using struct and union</p> <p>\u6211\u5011\u5229\u7528 RISC-V \u6307\u4ee4\u7684\u89e3\u78bc\u4f86\u793a\u7bc4\u7d50\u5408 <code>struct</code> \u548c <code>union</code> \u7684\u5f37\u5927\u4e4b\u8655 TBD</p>"},{"location":"rtl/sv/#type-definition-typedef","title":"Type Definition (typedef)","text":"<p>\u6211\u5011\u53ef\u4ee5\u7528 <code>typedef</code> \u95dc\u9375\u5b57\u4f86\u81ea\u5b9a\u7fa9\u65b0\u7684 data type\uff0c\u53c8\u7a31\u70ba Use-defined types\u3002TBD</p>"},{"location":"rtl/sv/#packages","title":"Packages","text":"<p>TBD</p>"},{"location":"rtl/sv/#the-change-of-always-block","title":"The Change of <code>always</code> Block","text":"<p>\u5728 Verilog \u4e2d\uff0c\u5982\u679c\u6211\u5011\u60f3\u8981\u5beb\u8907\u96dc\u7684\u7d44\u5408\u96fb\u8def\u7684\u8a71\uff0c\u901a\u5e38\u6703\u4f7f\u7528 <code>always @(*) ...</code> \u4f86\u5be6\u73fe\u96fb\u8def\uff0c\u800c\u5c0d\u65bc\u6642\u5e8f\u96fb\u8def\u7684\u8a71\uff0c\u5247\u6703\u4f7f\u7528 <code>always @(posedge clk) ...</code> \u9019\u6a23\u7684\u5beb\u6cd5\u3002 \u4f46\u662f\uff0c\u5f80\u5f80\u6709\u6642\u5019\u6703\u56e0\u70ba\u4e00\u4e9b\u4e0d\u826f\u7684 Coding Style \u7fd2\u6163\u6216\u662f\u5176\u4ed6\u56e0\u7d20\u5c0e\u81f4\u5728\u6211\u5011\u672c\u4f86\u9810\u671f\u6703\u662f pure combinational logic \u88e1\u9762\u51fa\u73fe register \u548c latch\uff0c\u6216\u662f\u5728\u6642\u5e8f\u96fb\u8def\u4e2d\u51fa\u73fe\u975e\u9810\u671f\u7684 latch\uff0c\u9032\u800c\u5c0e\u81f4\u96fb\u8def\u7684\u529f\u80fd\u932f\u8aa4\u3002</p> <p>\u56e0\u6b64\uff0c\u5728 SystemVerilog \u4e2d\u5f15\u5165\u4e86\u4e00\u4e9b\u65b0\u7684\u8a9e\u6cd5\uff0c\u5c0d\u6211\u5011\u4f86\u8aaa\u6700\u6709\u7528\u7684\u6709 <code>always_comb</code> \u548c <code>always_ff</code> \u9019\u5169\u500b\u8a9e\u6cd5\uff0c\u53ef\u4ee5\u8b93\u6211\u5011\u66f4\u7cbe\u78ba\u5730\u63cf\u8ff0\u7d44\u5408\u96fb\u8def\u548c\u6642\u5e8f\u96fb\u8def\u3002</p> <p>TBD</p>"},{"location":"rtl/sv/#task-and-function","title":"Task and Function","text":"<p>\u5148\u8aaa\u91cd\u9ede</p> <ul> <li>Task<ul> <li>...</li> </ul> </li> <li>Function<ul> <li>A function shall not contain any time-controlling statements. That is, any statements containing <code>#</code>, <code>##,</code> <code>@</code>, <code>fork-join</code>, <code>fork-join_any</code>, <code>wait</code>, <code>wait fork</code>, <code>wait_order</code>, or <code>expect</code>.</li> <li>A function shall not enable tasks regardless of whether those tasks contain time-controlling statements.</li> </ul> </li> </ul> <p>TBD</p>"},{"location":"rtl/sv/#decision-statements","title":"Decision Statements","text":"<p>\u7528\u65bc RTL \u5efa\u6a21\u7684\u4e3b\u8981\u8a9e\u6cd5\u7d50\u69cb\u662f if...else \u548c case\uff08\u5305\u62ec\u5176\u901a\u914d\u7b26\u8b8a\u9ad4\uff09\u3002\u9019\u4e9b\u6c7a\u7b56\u8a9e\u6cd5\u662f RTL \u5efa\u6a21\u7684\u6838\u5fc3\uff0c\u7528\u65bc\u5efa\u6a21 \u7d44\u5408\u908f\u8f2f\u3001\u9396\u5b58\u5668\uff08latches\uff09 \u548c \u89f8\u767c\u5668\uff08flip-flops\uff09\u3002 \u5728\u7de8\u5beb\u7a0b\u5f0f\u78bc\u6642\u5fc5\u9808\u5c0f\u5fc3\uff0c\u78ba\u4fdd if...else \u548c case \u80fd\u5920\u751f\u6210\u9810\u671f\u7684\u786c\u9ad4\u3002\u82e5\u672a\u9075\u5faa\u9069\u7576\u7684\u7de8\u78bc\u898f\u7bc4\uff0c\u53ef\u80fd\u5c0e\u81f4\u6a21\u64ec\u7d50\u679c\u8207\u5408\u6210\u7d50\u679c\u4e0d\u4e00\u81f4\uff08\u53ef\u53c3\u8003 Mills \u548c Cummings \u7684\u6587\u737b [11]\uff09\u3002 \u81ea\u5f9e\u9019\u7bc7\u6587\u7ae0\u65bc 1999 \u5e74\u9996\u6b21\u767c\u8868\u4ee5\u4f86\uff0cSystemVerilog \u5df2\u5c0d Verilog \u589e\u52a0\u4e86\u5927\u91cf\u8a9e\u8a00\u589e\u5f37\u529f\u80fd\uff0c\u4ee5\u5e6b\u52a9\u6e1b\u5c11\u6216\u6d88\u9664\u9019\u4e9b\u4e0d\u4e00\u81f4\u3002</p> <p>\u50b3\u7d71 Verilog \u4e2d\u6700\u68d8\u624b\u7684\u554f\u984c\u4e4b\u4e00\u662f casex/casez \u7684\u554f\u984c\u3002\u8a31\u591a\u6703\u8b70\u8ad6\u6587\u5c08\u6ce8\u65bc\u9019\u4e9b\u8a9e\u6cd5\u9020\u6210\u7684\u554f\u984c\uff0c\u4e26\u5efa\u8b70\u9650\u5236\u5176\u4f7f\u7528\u3002 \u800c SystemVerilog \u7684 case...inside \u8a9e\u6cd5\u53d6\u4ee3\u4e86 casex \u548c casez\u3002 \u6b64\u5916\uff0c\u53e6\u4e00\u500b\u91cd\u8981\u7684 SystemVerilog \u589e\u5f37\u529f\u80fd\u662f unique\u3001unique0 \u548c priority \u6c7a\u7b56\u4fee\u98fe\u8a5e\u3002</p>"},{"location":"rtl/sv/#set-membership-operator-inside","title":"Set Membership Operator (<code>inside</code>)","text":"<p>\u5728 SystemVerilog \u4e2d\uff0c<code>inside</code> \u662f\u4e00\u500b\u64cd\u4f5c\u7b26\uff0c\u7528\u65bc\u6aa2\u67e5\u4e00\u500b\u503c\u662f\u5426\u5c6c\u65bc\u67d0\u500b\u7bc4\u570d\u6216\u96c6\u5408\u3002\u9019\u500b\u64cd\u4f5c\u7b26\u5e38\u7528\u65bc assertion\u3001constraint \u6216 if-else \u5224\u65b7\uff0c\u4f7f\u8a9e\u6cd5\u66f4\u7c21\u6f54\u76f4\u89c0\u3002</p> <p>The inside set membership operator compares a value to a list of other values enclosed in { }. The list of values can be a range of values between [ ], or can be the values stored in an array. The inside set membership operator allows bits in the value list to be masked out of a comparison in the same way as the case equality operators.</p> Examples of inside operator<pre><code>if (data inside {[0:255]}) ... // if data is between 0 to 255, inclusive\nif (data insise {3'b1?1}) ... // if data is 3'b101, 3'b111, 3'b1x1, 3'b1z1\n</code></pre> <p>\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f\uff0c\u5927\u62ec\u865f <code>{...}</code> \u4e2d\u7684\u6578\u503c\u4e00\u5b9a\u8981\u662f\u5e38\u6578\uff0c\u624d\u53ef\u4ee5\u8b93 <code>inside</code> \u53ef\u4ee5\u88ab EDA \u5de5\u5177\u5408\u6210\u6210\u5be6\u969b\u7684\u96fb\u8def\u3002</p>"},{"location":"rtl/sv/#unique-and-priority-keywords-with-if-else-or-case","title":"Unique and Priority Keywords with <code>if-else</code> or <code>case</code>","text":"<p>unique\u3001unique0 \u548c priority \u5728 SystemVerilog \u901a\u5e38\u6703\u642d\u914d Conditional if-else statement \u6216\u662f Case statement \u4f86\u4f7f\u7528\uff0c\u5b83\u5011\u7684\u76ee\u7684\u662f\u4f5c\u70ba violation checkers\u3002</p> <p>\u7576\u6211\u5011\u4f7f\u7528 unique \u6216\u662f priority \u4f86\u4fee\u98fe if-else statement \u6216\u662f case statement \u7684\u6642\u5019\uff0c\u8868\u793a\u6211\u5011\u6240\u64b0\u5beb\u7684\u689d\u4ef6\u61c9\u8a72\u8981\u8986\u84cb\u5168\u90e8\u7684\u53ef\u80fd\u6027\uff0c\u5426\u5247\u5728\u96fb\u8def\u6a21\u64ec\u7684\u904e\u7a0b\u4e2d\uff0c\u6a21\u64ec\u5de5\u5177\u61c9\u8a72\u8981\u51fa\u73fe violation report\u3002</p> <pre><code>unique if ((a == 0) || (a == 1)) ...\nelse if (a == 2) ...\nelse if (a == 3) ... // values 3,5,6,7 cause a violation report\n\npriority if (a == 0) ...\nelse if (a == 1) ...\nelse ... // covers all other possible values,\n         // so no violation report\n</code></pre> <p>\u4f46\u662f\u67d0\u4e9b\u6642\u5019\u6216\u8a31\u662f\u8a2d\u8a08\u4e0a\u523b\u610f\u70ba\u4e4b\uff0c\u5c31\u6703\u5e0c\u671b\u4e0d\u8981\u51fa\u73fe violation report\uff0c\u9019\u6642\u5019\u5c31\u53ef\u4ee5\u7528 unique0\u3002</p> <pre><code>unique0 if ((a==0) || (a==1)) $display(\"0 or 1\");\nelse if (a == 2) $display(\"2\");\nelse if (a == 4) $display(\"4\"); // values 3,5,6,7 cause no violation report\n</code></pre> <p>\u4e0a\u9762\u6240\u8b1b\u7684\u662f\u5c6c\u65bc unique\u3001unique0 \u548c priority \u7684\u5171\u540c\u6027\u8cea\uff0c\u63a5\u4e0b\u4f86\u6211\u5011\u8981\u5340\u5206 unique \u548c priority \u5728\u96fb\u8def\u8a2d\u8a08\u4e0a\u7684\u4e3b\u8981\u5dee\u7570\u3002</p> <p>Unique-if and unique0-if assert that there is no overlap in a series of if\u2013else\u2013if conditions, i.e., they are mutually exclusive and hence it is safe for the conditions to be evaluated in parallel.</p> <p>In unique-if and unique0-if, the conditions may be evaluated and compared in any order. The implementation shall continue the evaluations and comparisons after finding a true condition. A unique-if or unique0-if is violated if more than one condition is found true.</p> <p>A priority-if indicates that a series of if\u2013else\u2013if conditions shall be evaluated in the order listed. In the preceding example, if the variable a had a value of 0, it would satisfy both the first and second conditions, requiring priority logic.  ----- IEEE 1800-2023</p> <p>\u7c21\u55ae\u4f86\u8aaa\uff0c\u4ee5 unique \u6216\u662f unique0 \u4fee\u98fe\u7684 if-else-if statement\uff0c\u53ef\u4ee5\u8b93\u96fb\u8def\u5408\u6210\u5de5\u5177\u77e5\u9053\uff0c\u9019\u500b\u96fb\u8def\u4e2d\u7684\u6bcf\u500b conditional branches \u5f7c\u6b64\u4e4b\u9593\u662f\u6c92\u6709\u512a\u5148\u9806\u5e8f\u7684\uff0c\u53ef\u4ee5\u88ab\u548c\u6210\u70ba\u5b8c\u5168\u5e73\u884c\u7684\u908f\u8f2f\u96fb\u8def\uff08parallel logic\uff09\u3002 \u800c\u5982\u679c\u662f\u4ee5 priority \u4fee\u98fe\u7684 if-else-if statement\uff0c\u5c31\u6703\u88ab\u96fb\u8def\u5408\u6210\u5de5\u5177\u8f49\u63db\u6210 priority logic\u3002</p>"},{"location":"rtl/sv/#reverse-case-statement-ie-constant-expression-in-case-statement","title":"Reverse Case Statement (i.e., Constant expression in case statement)","text":"<p>\u6709\u6642\u5019\u6211\u5011\u6703\u7528\u5230 One-hot Encoding \u9019\u7a2e\u7de8\u78bc\u65b9\u5f0f\u4f86\u8a2d\u8a08\u6211\u5011\u7684\u96fb\u8def\uff0c\u9019\u6642\u5019\u53ef\u4ee5\u5229\u7528\u4e00\u7a2e\u7279\u6b8a\u7684\u6280\u5de7\uff0c\u53eb\u505a Reverse Case Statement\u3002</p> Modeling a 3-bit priority encoder<pre><code>logic [2:0] encode;\npriority case (1'b1)\n    encode[0]: ...;\n    encode[1]: ...;\n    encode[2]: ...;\n    default: ...;\nendcase\n</code></pre> <p>\u900f\u904e\u9019\u6a23\u7684\u7bc4\u4f8b\u6211\u5011\u53ef\u4ee5\u77e5\u9053\uff0cCase Statement \u4e2d\u7684 case expression \u662f\u53ef\u4ee5\u4f7f\u7528\u5e38\u6578\uff08constant\uff09\u7684\uff0c\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\u53c8\u7a31\u70ba constant expression\u3002</p>"},{"location":"rtl/sv/#set-membership-case-statement","title":"Set Membership Case Statement","text":"<p><code>case</code> \u642d\u914d <code>inside</code> \u4f7f\u7528</p> <p>The SystemVerilog <code>case...inside</code> decision statement allows mask bits to be used in the case items The don\u2019t care bits are specified, using <code>X</code>, <code>Z</code> or <code>?</code>, as with <code>casex</code>. The important difference is that <code>case...inside</code> uses a one-way, asymmetric masking for the comparison, unlike <code>casex</code>, where any <code>X</code> or <code>Z</code> bits in the case expression are also masked out from the comparison. With <code>case...inside</code>, any <code>X</code> or <code>Z</code> bits in the case expression are not masked. In the following example, any <code>X</code> or <code>Z</code> bits in instruction will not be masked, and an invalid instruction will be trapped by the default condition:</p> Example of case...inside<pre><code>always_comb begin\n    case (instruction) inside \n        4'b0???: opcode = instruction[2:0]; // only test MSB\n        4'b1001: opcode = 3'b001;\n        ... // decode all other valid instructions\n    endcase\nend\n</code></pre> SystemVerilog Advantage <code>case...inside</code> can prevent subtle design problems, and ensure that simulation closely matches how the synthesized gate-level implementation will behave. Coding Style Recommendation Synthesizable RTL code should never use <code>casex</code> or <code>casez</code>. <p>Case statement with do-not-cares</p> <p>\u5176\u5be6\u5728 SystemVerilog \u4e2d\uff0c\u9664\u4e86\u4e00\u822c\u7684 <code>case</code> \u8a9e\u6cd5\u4ee5\u5916\uff0c\u9084\u6709 <code>casex</code> \u548c <code>casez</code> \u9019\u5169\u7a2e\u7279\u6b8a\u7684\u7528\u6cd5\uff0c\u5728 IEEE 1800-2023 \u4e2d\u88ab\u7a31\u70ba Case statement with do-not-cares\u3002 \u4f46\u57fa\u672c\u4e0a\uff0c\u5982\u679c\u6211\u5011\u6709 Wildcard Matching \u7684\u9700\u6c42\u7684\u8a71\uff0c\u4f7f\u7528 case...inside \u5c31\u597d\uff0c\u4e0d\u8981\u7528 casez \u6216\u662f casex\u3002</p> <p>Wildcard equality operators</p> <p>\u53c3\u8003\uff1aIEEE 1800-2023 Chapter 11.4.6</p> <p> </p> <p>The wildcard equality operator (<code>==?</code>) and inequality operator (<code>!=?</code>) treat x and z values in a given bit position of their right operand as a wildcard. x and z values in the left operand are not treated as wildcards. A wildcard bit matches any bit value (0, 1, z, or x) in the corresponding bit of the left operand being compared against it. Any other bits are compared as for the logical equality and logical inequality operators.</p> <p>\u5728 SystemVerilog \u4e2d\uff0c\u9084\u6709\u5169\u7a2e operator \u5206\u5225\u662f <code>==?</code> \u548c <code>!=?</code> \u88ab\u7a31\u70ba wildcard equality operator\u3002TBD</p>"},{"location":"rtl/sv/#parameterized-module","title":"Parameterized Module","text":"<p>Port declarations can be based on parameter declarations. Parameter types can be redefined for each instance of a module, providing a means of customizing the characteristics of each instance of a module.</p> <p>IEEE 1800-2023 Chapter 23.2.3</p> Define a module with non-local parameters<pre><code>For example:\nmodule generic_fifo\n    #(parameter MSB=3, parameter LSB=0, parameter DEPTH=4) // parameter port list parameters\n    (input wire [MSB:LSB] in,\n     input wire clk, read, write, reset,\n     output logic [MSB:LSB] out,\n     output logic full, empty);\n\n    parameter FIFO_MSB = DEPTH * MSB;\n    localparam FIFO_LSB = LSB;\n        // These constants are local, and cannot be overridden.\n        // They can be affected by altering the value parameters above.\n        // If a module has a parameter_port_list, then any additional parameter\n        // defined in a module_item is treated as a local parameter\n\n    logic [FIFO_MSB:FIFO_LSB] fifo;\n    logic [$clog2(DEPTH):0] depth;\n\n    always @(posedge clk or posedge reset) begin\n        case ({read,write,reset})\n            // implementation of fifo\n        endcase\n    end\nendmodule\n\nmodule top;\n    // module instance parameter value assignment\n    generic_fifo #(4, 0, 8) fifo_1(...); // parameter value assignment by order\n    generic_fifo #(.MSB(4), .LSB(0), .DEPTH(8)) fifo_2(...); // parameter value assignment by name\nendmodule\n</code></pre> <p>\u5728 praameter_declaration_list \u88e1\u9762\u4f7f\u7528 localparam \u4e5f\u662f\u5408\u6cd5\u7684\u8a9e\u6cd5\u4e4b\u4e00\u3002</p> With localparam<pre><code>module generic_decoder\n    #(parameter num_code_bits = 3, localparam num_out_bits = 1 &lt;&lt; num_code_bits)\n    (input [num_code_bits-1:0] A, output reg [num_out_bits-1:0] Y);\n</code></pre>"},{"location":"rtl/sv/#interface-and-modport","title":"Interface and Modport","text":"<p>The communication between blocks of a digital system is a critical area that can affect everything from ease of RTL coding to hardware-software partitioning to performance analysis to bus implementation choices and protocol checking. The interface construct in SystemVerilog was specifically created to encapsulate the communication between blocks, allowing a smooth migration from abstract system-level design through successive refinement down to lower level register-transfer and structural views of the design. By encapsulating the communication between blocks, the interface construct also facilitates design reuse. The inclusion of interface capabilities is an important advantage of SystemVerilog.</p> <p>At its lowest level, an interface is a named bundle of nets or variables. The interface is instantiated in a design and can be accessed through a port as a single item, and the component nets or variables referenced where needed. A significant proportion of a design often consists of port lists and port connection lists, which are just repetitions of names. The ability to replace a group of names by a single name can significantly reduce the size of a description and improve its maintainability.</p> <p>Additional power of the interface comes from its ability to encapsulate functionality as well as connectivity, making an interface, at its highest level, more like a class template. An interface can have parameters, constants, variables, functions, and tasks. The types of elements in an interface can be declared, or the types can be passed in as parameters. The member variables and functions are referenced relative to the instance name of the interface as instance members. Thus, modules that are connected via an interface can simply call the subroutine members of that interface to drive the communication. With the functionality thus encapsulated in the interface and isolated from the module, the abstraction level and/or granularity of the communication protocol can be easily changed by replacing the interface with a different interface containing the same members, but implemented at a different level of abstraction. The modules connected via the interface do not need to change at all.</p> <p>To provide direction information for module ports and to control the use of tasks and functions within particular modules, the modport construct is provided.  As the name indicates, the directions are those seen from the module.</p> <p>----- IEEE 1800-2023 Chapter 25.2</p> Example without using interface<pre><code>module memMod(\n  input  logic req,\n         logic clk,\n         logic start,\n         logic [1:0] mode,\n         logic [7:0] addr,\n  inout  wire  [7:0] data,\n  output bit   gnt,\n         bit   rdy\n);\n  logic avail;\n\n  ...\nendmodule\n\nmodule cpuMod(\n  input  logic clk,\n         logic gnt,\n         logic rdy,\n  inout  wire  [7:0] data,\n  output logic req,\n         logic start,\n         logic [7:0] addr,\n         logic [1:0] mode\n);\n\n  ...\nendmodule\n\nmodule top;\n  logic req, gnt, start, rdy;\n  logic clk = 0;\n  logic [1:0] mode;\n  logic [7:0] addr;\n  wire [7:0] data;\n\n  memMod mem(req, clk, start, mode, addr, data, gnt, rdy);\n  cpuMod cpu(clk, gnt, rdy, data, req, start, addr, mode);\n\nendmodule\n</code></pre> Interface example using a named bundle<pre><code>interface simple_bus;\n    logic req, gnt;\n    logic [7:0] addr, data;\n    logic [1:0] mode;\n    logic start, rdy;\nendinterface: simple_bus\n\nmodule memMod(simple_bus a, // Access the simple_bus interface\n              input logic clk);\n    logic avail;\n    // When memMod is instantiated in module top, a.req is the req\n    // signal in the sb_intf instance of the 'simple_bus' interface\n    always @(posedge clk) a.gnt &lt;= a.req &amp; avail;\nendmodule\n\nmodule cpuMod(simple_bus b, input logic clk);\n    ...\nendmodule\n\nmodule top;\n    logic clk;\n    simple_bus sb_intf(); // Instantiate the interface\n    memMod mem(sb_intf, clk); // Connect the interface to the module instance\n    cpuMod cpu(.b(sb_intf), .clk(clk)); // Either by position or by name\nendmodule\n</code></pre> Interface example using a generic bundle<pre><code>interface simple_bus;\n    logic req, gnt;\n    logic [7:0] addr, data;\n    logic [1:0] mode;\n    logic start, rdy;\nendinterface: simple_busmodule\n\nmodule memMod(interface a, input logic clk);\n    ...\nendmodule\n\nmodule cpuMod(interface b, input logic clk);\n    ...\nendmodule\n\nmodule top;\n    logic clk = 0;\n    simple_bus sb_intf();\n    // Reference the sb_intf instance of the simple_bus\n    // interface from the generic interfaces of the\n    // memMod and cpuMod modules\n    memMod mem(.a(sb_intf), .clk(clk));\n    cpuMod cpu(.b(sb_intf), .clk(clk));\nendmodule\n</code></pre>"},{"location":"rtl/sv/#ports-in-interface","title":"Ports in interface","text":"<p>One limitation of simple interfaces is that the nets and variables declared within the interface are only used to connect to a port with the same nets and variables. To share an external net or variable, one that makes a connection from outside the interface as well as forming a common connection to all module ports that instantiate the interface, an interface port declaration is required. The difference between nets or variables in the interface port list and other nets or variables within the interface is that only those in the port list can be connected externally by name or position when the interface is instantiated.</p> <p>IEEE 1800-2023 Chapter 25.4</p> Example of ports in interface<pre><code>interface simple_bus (input logic clk); // Define the interface\n    logic req, gnt;\n    logic [7:0] addr, data;\n    logic [1:0] mode;\n    logic start, rdy;\nendinterface: simple_bus\n\nmodule memMod(simple_bus a); // Uses just the interface\n    logic avail;\n    always @(posedge a.clk) // the clk signal from the interface\n    a.gnt &lt;= a.req &amp; avail; // a.req is in the 'simple_bus' interface\nendmodule\n\nmodule cpuMod(simple_bus b);\n    ...\nendmodule\n\nmodule top;\n    logic clk = 0;\n    simple_bus sb_intf1(clk); // Instantiate the interface\n    simple_bus sb_intf2(clk); // Instantiate the interface\n    memMod mem1(.a(sb_intf1)); // Reference simple_bus 1 to memory 1\n    cpuMod cpu1(.b(sb_intf1));\n    memMod mem2(.a(sb_intf2)); // Reference simple_bus 2 to memory 2\n    cpuMod cpu2(.b(sb_intf2));\nendmodule\n</code></pre>"},{"location":"rtl/sv/#modport","title":"Modport","text":"Example of named port bundle<pre><code>interface simple_bus (input logic clk); // Define the interface\n    logic req, gnt;\n    logic [7:0] addr, data;\n    logic [1:0] mode;\n    logic start, rdy;\nmodport target (input req, addr, mode, start, clk,\n                output gnt, rdy,\n                ref data);\nmodport initiator(input gnt, rdy, clk,\n                  output req, addr, mode, start,\n                  ref data);\nendinterface: simple_bus\n\nmodule memMod (simple_bus.target a); // interface name and modport name\n    logic avail;\n    always @(posedge a.clk) begin // the clk signal from the interface\n        a.gnt &lt;= a.req &amp; avail; // the gnt and req signal in the interface\n    end\nendmodule\n\nmodule cpuMod (simple_bus.initiator b);\n    ...\nendmodule\n\nmodule top;\n    logic clk = 0;\n    simple_bus sb_intf(clk); // Instantiate the interface\n    initial repeat(10) #10 clk++;\n    memMod mem(.a(sb_intf)); // Connect the interface to the module instance\n    cpuMod cpu(.b(sb_intf));\nendmodule\n</code></pre> Example of connecting port bundles<pre><code>interface simple_bus (input logic clk); // Define the interface\n    logic req, gnt;\n    logic [7:0] addr, data;\n    logic [1:0] mode;\n    logic start, rdy;\nmodport target (input req, addr, mode, start, clk,\n                output gnt, rdy,\n                ref data);\nmodport initiator(input gnt, rdy, clk,\n                  output req, addr, mode, start,\n                  ref data);\nendinterface: simple_bus\n\nmodule memMod(simple_bus a); // Uses just the interface name\n    logic avail;\n    always @(posedge a.clk) // the clk signal from the interface\n        a.gnt &lt;= a.req &amp; avail; // the gnt and req signal in the interface\nendmodule\n\nmodule cpuMod(simple_bus b);\n    ...\nendmodule\n\nmodule top;\n    logic clk = 0;\n    simple_bus sb_intf(clk); // Instantiate the interface\n    initial repeat(10) #10 clk++;\n    memMod mem(sb_intf.target); // Connect the modport to the module instance\n    cpuMod cpu(sb_intf.initiator);\nendmodule\n</code></pre> Example of connecting port bundle to generic interface<pre><code>interface simple_bus (input logic clk); // Define the interface\n    logic req, gnt;\n    logic [7:0] addr, data;\n    logic [1:0] mode;\n    logic start, rdy;\nmodport target (input req, addr, mode, start, clk,\n                output gnt, rdy,\n                ref data);\nmodport initiator(input gnt, rdy, clk,\n                  output req, addr, mode, start,\n                  ref data);\nendinterface: simple_bus\n\nmodule memMod(interface a); // Uses just the interface\n    logic avail;\n    always @(posedge a.clk) // the clk signal from the interface\n        a.gnt &lt;= a.req &amp; avail; // the gnt and req signal in the interface\nendmodule\n\nmodule cpuMod(interface b);\n    ...\nendmodule\n\nmodule top;\n    logic clk = 0;\n    simple_bus sb_intf(clk); // Instantiate the interface\n    memMod mem(sb_intf.target); // Connect the modport to the module instance\n    cpuMod cpu(sb_intf.initiator);\nendmodule\n</code></pre> Parameterized interface<pre><code>interface intf_4;\n    parameter SIZE = 16;\n    wire [SIZE-1:0] sig1, sig3;\n    var logic [SIZE-1:0] sig2, sig4;\n    ... // modport declarations\n\n    function automatic logic [7:0] ecc_f (input i);\n        ...\n    endfunction\n\n    assign sig4 = ecc_f(sig1);\nendinterface: intf_4\n\nmodule top;\n    intf_4 #(.SIZE(32)) intf(); // override default parameter SIZE = 16 to be 32\nendmodule\n</code></pre> SystemVerilog Advantage Interfaces, when used properly, can substantially reduce redundant declarations within a design. This leads to code that is easier to maintain and easier to reuse in other projects. Recommendation Use interfaces to bundle related signals together. Avoid bundling non-related signals, such as clocks and resets."},{"location":"rtl/sv/#others","title":"Others","text":""},{"location":"rtl/sv/#ending-name","title":"Ending Name","text":"<p>SystemVerilog allows a name to be specified at the end of any named group of code. The ending name must match the block name; mismatches are reported as an error. Named ends help document code, significantly aiding in code debug, maintenance, and reuse.</p> <p>----- Synthesiable SystemVerilog</p> <pre><code>module FSM (...);\n    ...\n    always_ff @(posedge clock) begin: Sequencer\n        case (SquatState)\n            2'b01: begin: rx_valid_state\n                Rxready &lt;= '1;\n                for (int j=0; j&lt;NumRx; j++) begin: loop1\n                    for (int i=0; i&lt;NumRx; i++) begin: loop2\n                        if (Rxvalid[i]) begin: match\n                            ... // receive data\n                        end: match\n                    end: loop2\n                end: loop1\n            end: rx_valid_state\n            ... // decode other states\n        endcase\n    end: Sequencer\n\n    task get_data(...);\n        ...\n    endtask: get_data\nendmodule: FSM\n</code></pre>"},{"location":"rtl/sv/#vector-fill-token","title":"Vector Fill Token","text":""},{"location":"rtl/sv/#timeunit-and-timeprecision","title":"timeunit and timeprecision","text":""},{"location":"rtl/sv/#constant-variable","title":"Constant Variable","text":""},{"location":"rtl/sv/#expression-size-function-clog2-bits","title":"Expression Size Function ($clog2, $bits)","text":"<p>SystemVerilog \u6709\u8a31\u591a\u5167\u5efa\u7684 Math Functions\uff0c\u5176\u4e2d\u67d0\u4e9b\u51fd\u5f0f\u5c0d\u65bc\u786c\u9ad4\u8a2d\u8a08\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u50cf\u662f <code>$clog2</code> \u548c <code>bits</code>\uff0c\u800c\u4ed6\u5011\u53c8\u7a31\u70ba expression size functions\u3002</p> <pre><code>package my_types;\n    localparam MAX_PAYLOAD = 64;\n    typedef struct {\n        logic [63:0] start_address;\n        logic [$clog2(MAX_PAYLOAD)-1:0] xfer_size; // vector width scales\n        logic [ 7:0] payload [0:MAX_PAYLOAD-1];\n    } packet_t;\nendpackage: my_types\n</code></pre>"},{"location":"rtl/sv/#generate-statements","title":"Generate Statements","text":""},{"location":"rtl/sv/#for-loop-generate-constructs","title":"For-loop generate constructs","text":"Examples of legan and illegal generate loops<pre><code>module mod_a;\n    genvar i;\n\n    // \"generate\", \"endgenerate\" keywords are not required\n\n    for (i=0; i&lt;5; i=i+1) begin: a\n        for (i=0; i&lt;5; i=i+1) begin: b\n            ... // error -- using \"i\" as loop index for\n            ... // two nested generate loops\n        end\n    end\nendmodule\n\nmodule mod_b;\n    genvar i;\n    logic a;\n    for (i=1; i&lt;0; i=i+1) begin: a\n        ... // error -- \"a\" conflicts with name of variable \"a\"\n    end\nendmodule\n\nmodule mod_c;\n    genvar i;\n    for (i=1; i&lt;5; i=i+1) begin: a\n        ...\n    end\n    for (i=10; i&lt;15; i=i+1) begin: a\n        ... // error -- \"a\" conflicts with name of previous\n        ... // loop even through indices are unique\n    end\nendmodule\n</code></pre> A parameterized gray-code\u2013to\u2013binary-code converter module using a loop to generate continuous assignments<pre><code>module gray2bin1 (bin, gray);\n    parameter SIZE = 8; // this module is parameterizable\n    output [SIZE-1:0] bin; \n    input [SIZE-1:0] gray;\n\n    genvar i;\n    generate\n    for (i=0; i&lt;SIZE; i=i+1) begin: bitnum\n        assign bin[i] = ^gray[SIZE-1:i];\n        // i refers to the implicitly defined localparam whose\n        // value in each instance of the generate block is\n        // the value of the genvar when it was elaborated.\n    end\n    endgenerate\nendmodule\n</code></pre> Generated ripple adder with two-dimensional net declaration outside the generate loop<pre><code>module addergen1 (co, sum, a, b, ci);\n    parameter SIZE = 4;\n    output [SIZE-1:0] sum;\n    output co;\n    input [SIZE-1:0] a, b;\n    input ci;\n    wire [SIZE :0] c;\n    wire [SIZE-1:0] t [1:3];\n    genvar i;\n    assign c[0] = ci;\n    // Hierarchical gate instance names are:\n    // xor gates: bitnum[0].g1 bitnum[1].g1 bitnum[2].g1 bitnum[3].g1\n    // bitnum[0].g2 bitnum[1].g2 bitnum[2].g2 bitnum[3].g2\n    // and gates: bitnum[0].g3 bitnum[1].g3 bitnum[2].g3 bitnum[3].g3\n    // bitnum[0].g4 bitnum[1].g4 bitnum[2].g4 bitnum[3].g4\n    // or gates: bitnum[0].g5 bitnum[1].g5 bitnum[2].g5 bitnum[3].g5\n    // Generated instances are connected with\n    // multidimensional nets t[1][3:0] t[2][3:0] t[3][3:0]\n    // (12 nets total)\n    for(i=0; i&lt;SIZE; i=i+1) begin:bitnum\n        xor g1 ( t[1][i], a[i], b[i]);\n        xor g2 ( sum[i], t[1][i], c[i]);\n        and g3 ( t[2][i], a[i], b[i]);\n        and g4 ( t[3][i], t[1][i], c[i]);\n        or g5 ( c[i+1], t[2][i], t[3][i]);\n    end\n    assign co = c[SIZE];\nendmodule\n</code></pre> Generated ripple adder with net declaration inside the generate loop<pre><code>module addergen1 (co, sum, a, b, ci);\nparameter SIZE = 4;\noutput [SIZE-1:0] sum;\noutput co;\ninput [SIZE-1:0] a, b;\ninput ci;\nwire [SIZE :0] c;\ngenvar i;\nassign c[0] = ci;\n// Hierarchical gate instance names are:\n// xor gates: bitnum[0].g1 bitnum[1].g1 bitnum[2].g1 bitnum[3].g1\n// bitnum[0].g2 bitnum[1].g2 bitnum[2].g2 bitnum[3].g2\n// and gates: bitnum[0].g3 bitnum[1].g3 bitnum[2].g3 bitnum[3].g3\n// bitnum[0].g4 bitnum[1].g4 bitnum[2].g4 bitnum[3].g4\n// or gates: bitnum[0].g5 bitnum[1].g5 bitnum[2].g5 bitnum[3].g5\n// Gate instances are connected with nets named:\n// bitnum[0].t1 bitnum[1].t1 bitnum[2].t1 bitnum[3].t1\n// bitnum[0].t2 bitnum[1].t2 bitnum[2].t2 bitnum[3].t2\n// bitnum[0].t3 bitnum[1].t3 bitnum[2].t3 bitnum[3].t3\nfor(i=0; i&lt;SIZE; i=i+1) begin:bitnum\nwire t1, t2, t3;\nxor g1 ( t1, a[i], b[i]);\nxor g2 ( sum[i], t1, c[i]);\nand g3 ( t2, a[i], b[i]);\nand g4 ( t3, t1, c[i]);\nor g5 ( c[i+1], t2, t3);\nend\nassign co = c[SIZE];\nendmodule\n</code></pre> A multilevel generate loop<pre><code>parameter SIZE = 2;\ngenvar i, j, k, m;\ngenerate\n    for (i=0; i&lt;SIZE; i=i+1) begin:B1 // scope B1[i]\n        M1 N1(); // instantiates B1[i].N1\n        for (j=0; j&lt;SIZE; j=j+1) begin:B2 // scope B1[i].B2[j]\n            M2 N2(); // instantiates B1[i].B2[j].N2\n            for (k=0; k&lt;SIZE; k=k+1) begin:B3 // scope B1[i].B2[j].B3[k]\n                M3 N3(); // instantiates\n            end // B1[i].B2[j].B3[k].N3\n        end\n        if (i&gt;0) begin:B4 // scope B1[i].B4\n            for (m=0; m&lt;SIZE; m=m+1) begin:B5 // scope B1[i].B4.B5[m]\n                M4 N4(); // instantiates\n            end // B1[i].B4.B5[m].N4\n        end\n    end\nendgenerate\n\n// Some examples of hierarchical names for the module instances:\n// B1[0].N1 B1[1].N1\n// B1[0].B2[0].N2 B1[0].B2[1].N2\n// B1[0].B2[0].B3[0].N3 B1[0].B2[0].B3[1].N3\n// B1[0].B2[1].B3[0].N3\n// B1[1].B4.B5[0].N4 B1[1].B4.B5[1].N4\n</code></pre>"},{"location":"rtl/sv/#conditional-generate-constructs","title":"Conditional generate constructs","text":"<p>\u6709\u6642\u5019\u6211\u5011\u5728\u8a2d\u8a08\u53c3\u6578\u5316\u7684 Module \u7684\u6642\u5019\uff0c\u53ef\u80fd\u6703\u5e0c\u671b\u53ef\u4ee5\u900f\u904e <code>if-else</code> \u6216\u662f <code>case</code> \u4f86\u63a7\u5236\u8981\u5be6\u4f8b\u5316\uff08instantiate\uff09\u54ea\u4e9b\u786c\u9ad4\uff0c \u4f46\u662f <code>if-else</code> \u548c <code>case</code> \u57fa\u672c\u4e0a\u53ea\u80fd\u653e\u5728 Procedure Block \u5982 <code>always_comb</code>\u3001<code>always_ff</code> \u6216\u662f <code>initial begin...end</code> \u4e2d\uff0c\u9019\u6642\u5019\u6211\u5011\u5c31\u53ef\u4ee5\u4f7f\u7528 Generate block\u3002</p> Generate if<pre><code>module mux_case(input logic a, b, sel, output logic out);\n    ...\nendmodule\n\nmodule mux_assign(input logic a, b, sel, output logic out);\n    ...\nendmodule\n\n// Top Level Design: Use a parameter to choose either one\nmodule my_design #(parameter USE_CASE = 0)\n                  (input logic a, b, sel,\n                         output logic out);\n  // Use a \"generate\" block to instantiate either mux_case\n  // or mux_assign using an if else construct with generate\n  generate\n    if (USE_CASE)\n      mux_case mc (.a(a), .b(b), .sel(sel), .out(out));\n    else\n      mux_assign ma (.a(a), .b(b), .sel(sel), .out(out));\n  endgenerate\nendmodule\n</code></pre> Generate case<pre><code>module ha(input logic a, b, output logic sum, cout);\n    ...\nendmodule\n\nmodule fa(input logic a, b, cin, output logic sum, cout);\n    ...\nendmodule\n\n// Top level design: Choose between half adder and full adder\nmodule my_adder #(parameter ADDER_TYPE = 1)\n                 (input logic a, b, cin,\n                  output logic sum, cout);\n  generate\n    case(ADDER_TYPE)\n      0 : ha u0 (.a(a), .b(b), .sum(sum), .cout(cout));\n      1 : fa u1 (.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout));\n    endcase\n  endgenerate\nendmodule\n</code></pre> <p>Hardware Generator</p> <p>\u9019\u7a2e\u53ef\u4ee5\u900f\u904e\u50b3\u5165\u53c3\u6578\u4f7f\u5176\u5728 Elaboration Phase \u624d\u6c7a\u5b9a\u8981\u7522\u751f\u7684\u786c\u9ad4\u7684\u914d\u7f6e\u7684\u65b9\u5f0f\uff0c\u53c8\u7a31\u70ba Hardware Generator\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u7576\u6211\u5011\u5728\u8a2d\u8a08\u4e00\u500b FIFO \u7684\u6642\u5019\uff0c\u53ef\u80fd\u6703\u5e0c\u671b FIFO \u7684\u6df1\u5ea6\u548c\u6bcf\u500b element \u7684\u5927\u5c0f\u53ef\u4ee5\u900f\u904e\u53c3\u6578\u4f86\u6c7a\u5b9a\uff0c\u6211\u5011\u5c31\u6703\u7a31\u9019\u6a23\u7684 FIFO Module \u70ba FIFO Generator\u3002</p>"},{"location":"rtl/sva/","title":"SystemVerilog Assertion (SVA)","text":"<p>Info</p> <ul> <li>Contributor\uff1aTA \u5cfb\u8c6a</li> </ul>"},{"location":"rtl/sva/#what-is-systemverilog-assertion-sva","title":"What is SystemVerilog Assertion (SVA) ?","text":"<p>TBD</p>"},{"location":"rtl/sva/#basics-of-sva","title":"Basics of SVA","text":"<p>TBD</p>"},{"location":"rtl/verilog/","title":"Introduction to Verilog and RTL Programming","text":"<p>Info</p> <ul> <li>Contributors: TA \u6c4e\u7a4e\u3001TA \u5b9c\u84c1\u3001TA \u5cfb\u8c6a</li> <li>Last update: 2024/12/16</li> </ul>"},{"location":"rtl/verilog/#_1","title":"\u7c21\u4ecb","text":"<p>Verilog HDL is a formal notation intended for use in all phases of the creation of electronic systems. Because it is both machine-readable and human-readable, it supports the development,  verification, synthesis, and testing of hardware designs; the communication of hardware design data; and the maintenance, modification, and procurement of hardware. The primary audiences for this standard are the implementors of tools supporting the language and advanced users of the language. ----- IEEE Standard for Verilog\u00ae Hardware Description Language</p> <p>Verilog \u6700\u521d\u7684\u958b\u767c\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u500b\u8a9e\u8a00\uff0c\u8b93\u8a2d\u8a08\u8005\u53ef\u4ee5\u63cf\u8ff0\u548c\u6a21\u64ec\u786c\u9ad4\u884c\u70ba\uff0c\u5f9e\u800c\u52a0\u901f\u6578\u4f4d\u96fb\u8def\u8a2d\u8a08\u7684\u904e\u7a0b\u3002 \u9019\u7a2e\u8a9e\u8a00\u7684\u767c\u5c55\u80cc\u666f\u662f\u57fa\u65bc\u6578\u4f4d\u96fb\u8def\u7684\u8907\u96dc\u6027\u4e0d\u65b7\u589e\u52a0\uff0c\u8a2d\u8a08\u8005\u9700\u8981\u4e00\u7a2e\u9ad8\u968e\u7684\u5de5\u5177\u4f86\u53d6\u4ee3\u624b\u5de5\u8a2d\u8a08\u8207\u6a21\u64ec\u3002</p> <p>Verilog \u5728 1995 \u5e74\u6210\u70ba IEEE 1364 \u6a19\u6e96\u7684\u4e00\u90e8\u5206\uff0c\u4e26\u5728 2001 \u5e74\u548c 2005 \u5e74\u7d93\u904e\u4e86\u5169\u6b21\u4e3b\u8981\u66f4\u65b0\uff0c\u9032\u4e00\u6b65\u589e\u5f37\u4e86\u8a9e\u8a00\u529f\u80fd\u3002 IEEE 1364-2005 \u662f Verilog \u6700\u91cd\u8981\u7684\u7248\u672c\u4e4b\u4e00\uff0c\u5305\u542b\u4e86\u5c0d\u8a9e\u8a00\u7684\u64f4\u5145\uff0c\u4ee5\u652f\u63f4\u66f4\u5f37\u5927\u7684\u5efa\u6a21\u529f\u80fd\u3001\u5408\u6210\u548c\u9a57\u8b49\u5de5\u5177\u3002</p> <p>Verilog \u6700\u521d\u7684\u5275\u9020\u76ee\u7684\u662f\u70ba\u4e86\u96fb\u8def\u9a57\u8b49\uff0c\u800c\u975e\u8a2d\u8a08\u3002\u5b83\u6700\u65e9\u662f\u5728 1980 \u5e74\u4ee3\u7531 Gateway Design Automation \u516c\u53f8\u958b\u767c\uff0c\u4f5c\u70ba\u4e00\u7a2e\u7528\u4f86\u9032\u884c\u6578\u4f4d\u96fb\u8def\u884c\u70ba\u6a21\u64ec\u7684\u8a9e\u8a00\u3002 \u7576\u6642\uff0c\u8a2d\u8a08\u8005\u9762\u81e8\u8457\u8d8a\u4f86\u8d8a\u8907\u96dc\u7684\u6578\u4f4d\u96fb\u8def\uff0c\u4e26\u9700\u8981\u4e00\u7a2e\u9ad8\u968e\u5de5\u5177\u4f86\u9032\u884c\u8a2d\u8a08\u7684\u9a57\u8b49\u548c\u6a21\u64ec\u3002 \u96a8\u8457\u8a2d\u8a08\u5de5\u5177\u548c\u5408\u6210\u6280\u8853\u7684\u9032\u6b65\uff0cVerilog \u958b\u59cb\u5f9e\u6a21\u64ec\u8a9e\u8a00\u9010\u6f38\u6f14\u8b8a\u70ba\u4e00\u500b\u80fd\u5920\u63cf\u8ff0\u786c\u9ad4\u8a2d\u8a08\u7684\u8a9e\u8a00\u3002 \u8a2d\u8a08\u8005\u4e0d\u50c5\u53ef\u4ee5\u7528 Verilog \u9032\u884c\u6a21\u64ec\uff0c\u9084\u53ef\u4ee5\u7528\u5b83\u4f86\u63cf\u8ff0\u786c\u9ad4\u7684\u7d50\u69cb\u548c\u884c\u70ba\uff0c\u4e26\u9032\u884c\u5408\u6210\uff0c\u5373\u5f9e Verilog \u7a0b\u5f0f\u78bc\u751f\u6210\u5be6\u969b\u7684\u786c\u9ad4\u96fb\u8def\uff0c\u4f46\u662f\u5408\u6210\uff08Synthesis\uff09\u5be6\u969b\u7684\u96fb\u8def\u7684\u6642\u5019\u9700\u8981 EDA \u5de5\u5177\u7684\u914d\u5408\u3002</p>"},{"location":"rtl/verilog/#data-types","title":"Data Types\uff08\u8cc7\u6599\u578b\u614b\uff09","text":"<p>\u5728\u8b1b\u8ff0\u5982\u4f55\u7528 Verilog \u63cf\u8ff0\u96fb\u8def\u4e4b\u524d\uff0c\u6211\u5011\u5fc5\u9808\u5148\u641e\u6e05\u695a Verilog \u9019\u500b\u8a9e\u8a00\u4e2d\u5230\u5e95\u6709\u54ea\u4e9b Data Types\u3002\u7e3d\u5730\u4f86\u8aaa\uff0c\u5728 Verilog \u4e2d\u7684\u8cc7\u6599\u578b\u614b\u53ef\u4ee5\u5206\u6210\u5169\u5927\u985e\uff0c\u5206\u5225\u662f Net \u548c Variable\u3002</p> <p>Net \u8cc7\u6599\u985e\u578b\u53ef\u4ee5\u4ee3\u8868\u7d50\u69cb\u5be6\u9ad4\u4e4b\u9593\u7684\u7269\u7406\u9023\u63a5\uff0c\u4f8b\u5982\u908f\u8f2f\u9598\u4e4b\u9593\u7684\u9023\u7dda\u3002Net \u4e0d\u6703\u5132\u5b58\u4e00\u500b\u503c\u3002\u5176\u503c\u61c9\u7531\u9a45\u52d5\u5668\u7684\u503c\u4f86\u6c7a\u5b9a\uff0c\u4f8b\u5982 continuous assignment \u6216\u908f\u8f2f\u9598\u3002</p> <p>Variable \u662f\u4e00\u7a2e\u8cc7\u6599\u5132\u5b58\u5143\u7d20\u7684\u62bd\u8c61\u6982\u5ff5\u3002\u8b8a\u6578\u6703\u5f9e\u4e00\u6b21\u8ce6\u503c\u5132\u5b58\u503c\u5230\u4e0b\u4e00\u6b21\u8ce6\u503c\u3002\u7a0b\u5f0f\u4e2d\u7684\u8ce6\u503c\u8a9e\u53e5\u6703\u4f5c\u70ba\u4e00\u500b trigger\uff0c\u6539\u8b8a\u5132\u5b58\u5728\u8cc7\u6599\u5132\u5b58\u5143\u7d20\u4e2d\u7684\u503c\u3002<code>reg</code>\u3001<code>time</code> \u548c <code>integer</code> \u8cc7\u6599\u985e\u578b\u7684\u521d\u59cb\u5316\u503c\u61c9\u70ba\u672a\u77e5\u503c <code>x</code>\u3002</p> <p>\u57fa\u672c\u4e0a\u5927\u5bb6\u5e38\u7528\u5230\u7684 <code>wire</code> \u5c31\u5c6c\u65bc Net Data Type\uff0c<code>wire</code> \u672c\u8eab\u4e0d\u6703\u5132\u5b58\u4efb\u4f55\u503c\uff0c\u800c\u662f\u7531 Driver \u53bb\u6c7a\u5b9a <code>wire</code> \u7684\u503c\uff0c\u57fa\u672c\u4e0a\u6982\u5ff5\u5c31\u8ddf\u96fb\u8def\u4e2d\u7684\u5c0e\u7dda\u662f\u4e00\u6a23\u7684\u3002\u800c\u53e6\u5916\u4e00\u500b\u5e38\u7528\u7684 Data Type <code>reg</code> \u5247\u5c6c\u65bc Variable Data Type\uff0c\u5b83\u672c\u8eab\u6703\u5be6\u969b\u5730\u5132\u5b58\u4e00\u500b\u503c\uff0c\u4e26\u4e14\u9019\u500b\u503c\u6703\u5728\u4e0b\u4e00\u6b21\u88ab\u8ce6\u503c\uff08assign\uff09\u7684\u6642\u5019\u6539\u8b8a\u3002</p>"},{"location":"rtl/verilog/#scalar-vector-and-array","title":"Scalar, Vector and Array","text":"<p>A net or reg declaration without a range specification shall be considered 1 bit wide and is known as ascalar. Multibit net and reg data types shall be declared by specifying a range, which is known as a vector. ----- IEEE 1364-2005</p> <p>\u7576 <code>wire</code> \u548c <code>wire</code> \u5728\u5ba3\u544a\u7684\u6642\u5019\u5982\u679c\u6c92\u6709\u88ab\u6307\u5b9a range \u7684\u8a71\uff0c\u5247\u61c9\u8a72\u88ab\u7576\u6210 1-bit\uff0c\u5176\u7a31\u70ba Scalar\uff0c\u53cd\u4e4b\u5982\u679c\u6709\u6307\u5b9a range\uff0c\u5982 <code>wire[31:0] a</code>\uff0c\u5247\u88ab\u7a31\u70ba Vector\uff0c\u5176\u5bec\u5ea6\u70ba 32-bit\u3002Scalar \u7684\u6982\u5ff5\u5927\u5bb6\u61c9\u8a72\u4e0d\u6703\u6709\u7591\u554f\uff0c\u4f46\u662f Vector \u548c Array \u9019\u5169\u500b\u5927\u5bb6\u53ef\u80fd\u6703\u641e\u6df7\uff0cArray \u6211\u5011\u5f85\u6703\u6703\u4ecb\u7d39\u3002\u81f3\u65bc Vector\uff0c\u5927\u5bb6\u53ef\u4ee5\u60f3\u6210\u8a31\u591a bits \u7684\u96c6\u5408\u5c31\u662f Vector\u3002</p> <p></p> <p>\u6211\u5011\u53ef\u4ee5\u628a\u8a31\u591a\u500b Scalar \u6216\u662f\u8a31\u591a\u500b Vector \u518d\u96c6\u5408\u8d77\u4f86\uff0c\u9019\u6642\u5019\u5c31\u6703\u8b8a\u6210 Array\u3002</p>"},{"location":"rtl/verilog/#gate-level","title":"Gate Level","text":"<ul> <li> <p>Constructing a module (by primitive gate)</p> <p>\u7bc4\u4f8b: Half Adder</p> <pre><code>module HA /*module name*/ (\n  input A,B,\n  output S,C\n);\n\nxor xor0(S, A, B); //gate_name instance_name (out, in1, in2,...);\nand and0(C, A, B);\n\nendmodule\n</code></pre> <p></p> <ol> <li>I/O port\u5c31\u662fHA\u7684input\u53caoutput, \u6c92\u6709\u7279\u5225\u5ba3\u544a\u7684\u8a71\u90fd\u662fwire, \u5982\u679c\u6709\u9700\u8981\u4e5f\u53ef\u4ee5\u5ba3\u544a\u6210output reg \u3002</li> <li>Verilog \u4e2d\u6709\"\u539f\u751f\u908f\u8f2f\u5323(primitive gate)\"(eg: not, and, or, nand,...)\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528, \u7b2c\u4e00\u683c\u63a5\u7684\u662f\u908f\u8f2f\u5323\u7684output\u3002</li> </ol> </li> <li> <p>Connecting Your own module     \u5beb\u597d\u4e00\u500bmodule\u4e4b\u5f8c\uff0c\u5c31\u53ef\u4ee5\u50cf\u4f7f\u7528\u4e00\u500b\u5c01\u88dd\u597d\u7684\u5143\u4ef6\u4e00\u6a23\u76f4\u63a5\u4f7f\u7528\u3002     \u7bc4\u4f8b: Full Adder</p> <pre><code>`include \"halfadder.sv\"\nmodule FA(\n    input A,B,Cin,\n    output Cout,S\n);\n\nwire c0,c1,s0;\n\nHA ha0(A, B, s0, c0); //module_name instance_name ports (by order list)\nHA ha1(.A(s0), .B(Cin),\n       .S(S), .C(c1)); //module_name instance_name ports (by name)\nor or0(Cout, c0, c1);\n\nendmodule\n</code></pre> <p></p> <p>\u5716\u7247\u4f86\u6e90 : https://tomorrow0w0.gitbooks.io/nand2tetris-homework/content/assets/FullAdder.png</p> <p>\u9023\u63a5module\u7684I/O portz\u65b9\u5f0f\u5927\u81f4\u53ef\u5206\u6210:  1. by ordered list: \u4f9d\u7167HA\u4e2d\u7684I/O port\u9806\u5e8f, \u5c07\u8981\u63a5\u5230HA\u7684\u7dda\u586b\u5728\u5c0d\u61c9\u63a5\u53e3; \u539f\u751f\u908f\u8f2f\u5323\u53ea\u80fd\u7528by ordered list\u7684\u63a5\u6cd5\u3002 2. by name: \u5148\u5bebHA\u7684port name, ()\u4e2d\u586b\u8981\u63a5\u5230HA\u7684\u7dda\u3002 - Scalar, Vector, Array 1. Scalar: A single wire/ reg 2. Vector: A bunch of wires/ regs     <pre><code>wire [1:0] a;\nwire [0:2] b;\nwire [-2:0] c;\nwire [3:0] d;\nwire [2:0] e;\n</code></pre></p> <pre><code>![](https://hedgedoc.course.aislab.ee.ncku.edu.tw/uploads/7853b2eb-cb09-4cc7-9e01-9db4ec3c3c92.png)\n\n==hint: \u901a\u5e38n bits\u6703\u7528 [n-1: 0]\u4f86\u7de8\u865f==\n\n- reference to one of the wires/ regs in a vector\n    ```verilog\n    wire [1:0] a;\n    wire [0:2] b;\n    wire [-2:0] c;\n\n    and and0(a[0], b[1], c[-2]);\n    ```\n\n    ![](https://hedgedoc.course.aislab.ee.ncku.edu.tw/uploads/b24940bf-fd07-40c1-b5b0-1749c4ab2847.png)\n\n- reference to multiple lines continuously in a vector\n    ```verilog\n    module Adder2bits(\n        input [1:0] in0, in1;\n        output [1:0] sum,\n        output cout\n    );\n\n    //...\n\n    endmodule\n    ```\n    ```verilog\n    ///...\n    wire[3:0] operand0, operand1;\n    wire[1:0] sum0;\n    wire cout0;\n\n    Adder2bits adder0(.in0(operand0[1:0]), .in1(operand1[1:0]), .sum(sum0), .cout(cout0);\n    //adding lower 2 bits of operand1 and operand2\n    ```\n\n    ![](https://hedgedoc.course.aislab.ee.ncku.edu.tw/uploads/3218a199-e7dc-4cf3-a6fc-0e352e56f08e.png)\n</code></pre> <ol> <li> <p>Array: A lot of scalars/ vectors     <code>verilog     wire arr_scalar [0:7];     wire [3:0] arr_vector [0:7];</code></p> <p></p> <ul> <li> <p>reference to a single line in an array     <pre><code>wire arr_scalar [0:7];\nnot not0(arr_vector[0][2], arr_vector[7][1]);\n</code></pre></p> <p></p> <p>First index: selecting the corresponding vector. Second index: selecting the line in the vector. - \u5728\u96fb\u8def\u6bd4\u8f03\u8907\u96dc\u6642\uff0c\u7528Gate level\u7684\u5beb\u6cd5\u6703\u8b8a\u5f97\u5f88\u9ebb\u7169\uff0c\u6240\u4ee5\u4ee5\u4e0b\u4ecb\u7d39\u66f4Behavioral\u7684\u5beb\u6cd5\u3002</p> </li> </ul> </li> </ol> <p></p> </li> <li> <p>\u53f3\u503c\u70ba\u5e38\u6578, x, z</p> <ol> <li>Data can have different bit length. (Default: 32 bits).</li> <li>Data can be expressed in different format. (Default: decimal)</li> <li>\u53ef\u4ee5\u5728\u6578\u5b57\u4e4b\u9593\u52a0underscore(\"_\")(\u7b2c\u4e00\u500bdigit\u4e0d\u53ef\u4ee5\u662funderscore) <pre><code>wire [31:0] a, b;\nwire [7:0] c;\nwire [3:0] d,e;\n\nassign a=15; //32bits decimal 15\nassign b='h837FF; //32 bits hexidecimal 837FF\nassign c=8'b11_0010 //8 bits binary 110010\nassign d=4'b10; //4 bits binary 10\nassign e=4'b01x; //4 bits number, with LSB unknown\n</code></pre> hint: assign\u7684\u6642\u5019\u6700\u597d\u8b93\u5de6\u53f3\u503c\u7684bit length\u76f8\u540c</li> </ol> </li> <li> <p>\u53f3\u503c\u70baExpression (operand, operator)     | Operator           | Description        | Usage               |     | ------------------ | ------------------ | ------------------- |     | +, -, *, /, %      | Arithmetic         | op1 + op2           |     | !                  | Logical negation     | !op                 |     | &amp;&amp;, ||, ==, !=   | Logical operator   | op1&amp;&amp;op2            |     | &lt;&lt;, &lt;&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;   | Shift operator     | op1&lt;&lt;op2            |     | {}                 | Concentation       | {op1, op2, ...}     |     | &amp;, |, ^, ^~       | Bitwise operation  | op1 &amp;op2            |     | ~                  | Bitwise negation   | ~op                 |     | &amp;, ~&amp;, |, ~|, ^~ | Reduction operator | &amp;op                 |     | ?:                 | Conditional        | condition? op1: op2 |     | {{}}               | Replication        | {op1{op2}}          |     Further explanation</p> <ol> <li> <p>Logical    ```verilog     wire [3:0] op1, op2, op3;     assign op1=4'b1011;     assign op2=4'b0010;     assign op3=4'b0;</p> <p>wire a, b, c;</p> <p>assign a=!op3; //1 assign b=!op1; //0 assign c=op1&amp;&amp;op2; //1 ``` Logical\u7684\u904b\u7b97\u7d50\u679c\u53ea\u53ef\u80fd\u67090\u62161\u5169\u7a2e     2. Bitwise <pre><code>wire [3:0] op1, op2, op3;\nassign op1=4'b1011;\nassign op2=4'b0010;\nassign op3=4'b0;\n\nwire [3:0] d ,e ,f, g;\n\nassign d=~op1; //4'b0100\nassign e=~op3; //4'b1111\nassign f=op1&amp;op2; //and, 4'b0010\nassign g=op1^op2; //xor, 4'b1001\n</code></pre> Bitwise\u6703\u5c0d\u6bcf\u4e00\u500bbit\u5206\u5225\u904b\u7b97(eg: \u4e0b\u5716\u7684Bitwise negation)</p> <p>     3. Reduction <pre><code>wire [3:0] op1;\nassign op1=4'b1011;\n\nwire g, h;\n\nassign g=&amp;op1; //(1&amp;0&amp;1&amp;1)=0\nassign h=^op1; //=1\n</code></pre> Reduction\u5c07input vector\u4e2d\u7684\u6240\u6709bits\u4e00\u8d77\u904b\u7b97\uff0c\u904b\u7b97\u7d50\u679c\u53ea\u67090\u62161\u5169\u7a2e(eg: \u4e0b\u5716\u7684xor)</p> <p>     4. Conditional(Ternary) <pre><code>wire sel;\nwire [3:0], in0, in1, out;\nassign out=sel? in1: in0; //condition? if true: if false\n</code></pre> \u8ddfCpp\u4e2d\u7684Ternary operator\u5dee\u4e0d\u591a\uff0c\u5c0d\u61c9\u5230\u6578\u4f4d\u96fb\u8def\u4e0a\u57fa\u672c\u4e0a\u5c31\u662fMUX</p> <p>     5. Replication and concatenation <pre><code>wire [7:0] byte;\nwire [15:0] halfword;\nassign halfword = {{4'd8{byte[7]}}, byte};\n</code></pre> - Replication: {op1{op2}}\u5373\u5c07op2\u8907\u88fdop1\u6b21 - Concatenation: \u4e26\u6392\u591a\u500binput</p> <p> - \u7bc4\u4f8b: Full adder (Continuous assignmaet)     <pre><code>module FA(\n    input A,B,Cin,\n    output Cout,S\n);\n\n    assign Cout = (A&amp;B) | (Cin &amp; (A^B));\n    assign S=Cin^A^B;\nendmodule\n</code></pre></p> </li> </ol> <p></p> <p>\u5716\u7247\u4f86\u6e90 : https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Full-adder.svg/825px-Full-adder.svg.png</p> </li> </ul> <p>\u7bc4\u4f8b1: \u8207\u524d\u9762for loop\u7684\u7bc4\u4f8b1\u505a\u7684\u4e8b\u4e00\u6a23</p> <pre><code>wire[9:0] a;\ngenvar i;\ngenerate \n    for(i=0; i&lt;10; i=i+1) begin: BLOCK1 //label\n        assign a[i]=1'b0;\n    end\nendgenerate\n</code></pre> <p>\u7bc4\u4f8b2: \u75284\u500bFA\u7d44\u6210\u7684RCA <pre><code>`include \"FA.sv\"\nmodule RCA(\n    input [3:0] X, Y,\n    output [3:0]S,\n    output Cout\n);\nwire[4:0] c;\nassign Cout=c[4];\nassign c[0]=1'b0;\n\ngenvar i;\ngenerate\n    for(i=0; i&lt;4; i=i+1) begin: FA_BLOCK\n        FA fa(.x(X[i]), .y(Y[i]), .cin(c[i]), .cout(c[i+1]), .s(S[i]));\n    end\nendgenerate\nendmodule\n</code></pre></p> <p></p>"},{"location":"rtl/verilog/#continuous-assignment","title":"Continuous Assignment","text":"<ul> <li>\u57fa\u672c\u5beb\u6cd5     <pre><code>    assign \u5de6 = \u53f3;\n</code></pre></li> <li>\u5176\u4e2d\u53f3\u503c\u53ef\u4ee5\u662f\u5e38\u6578, x(unknown), z(high impedance), \u53e6\u4e00\u689dwire/reg(s), \u6216expression,...; \u5c07\u53f3\u908a\u7684signal\u63a5\u5230\u5de6\u908a\u3002</li> <li>\u591a\u500bContinuous assignment\u4e4b\u9593\u201c\u6c92\u6709\u201d\u5148\u5f8c\u9806\u5e8f\u95dc\u4fc2     <pre><code>wire a, b, c;\nwire highzee;\n\nassign a = b &amp; c;\nassign highzee =1'bz;\n</code></pre></li> </ul>"},{"location":"rtl/verilog/#procedural-block","title":"Procedural Block","text":"<ul> <li>\u5206\u6210always block\u548cinitial block, \u5f8c\u8005\u901a\u5e38\u7528\u5728Testbench\u4e2d\u3002\u4ee5\u4e0b\u90fd\u5148\u4ee5always block\u70ba\u4e3b\u3002</li> <li>\u66f4\"program-like\", \u4f46\u9084\u662f\u8981\u8a18\u5f97\u81ea\u5df1\u662f\u5728\u5beb\"\u96fb\u8def\"\u3002</li> <li>\u57fa\u672c\u5beb\u6cd5 <pre><code>reg a, b;\nalways @(sensitive list) begin\n    a = .....;\n    b = .....;\nend\n</code></pre></li> <li>\u7528begin, end \u5305\u8d77\u4f86\u3002</li> <li>Sensitive list:      \u6bcf\u7576sensitive list\u4e2d\u4efb\u4e00\u500bsignal\u6539\u8b8a\u6642\uff0c\u6703trigger \u8a72always block \u57f7\u884c\u4e00\u6b21\uff0c\u4e26update\u5de6\u503c\u3002\u82e5sensitive list \u4e2d\u7684signal\u6c92\u6709\u6539\u8b8a, \u5de6\u503c\u5c31\u6703\u7dad\u6301\u4e0d\u8b8a\u3002     \u5982\u679c\u5e0c\u671b\u5beb\u51facontinuous assignment\u7684\u6548\u679c\uff0c\u5247sensitive list\u4e2d\u8981\u5305\u542balways block\u5167\u7684\u6240\u6709\u53f3\u503c, \u53ef\u4ee5\u76f4\u63a5\u5beb\u6210 <pre><code>always @(*) begin\n    a = .....;\n    b = .....;\nend\n</code></pre></li> <li>always block\u4e2d\u7684\u5de6\u503c\u4e00\u5b9a\u8981\u5ba3\u544a\u6210reg\u578b\u614b (\u5728always block\u6c92\u88abtrigger\u6642, \u5de6\u503c\u8981\"\u7dad\u6301\") , \u4f46\u5408\u6210\u5f8c\u4e0d\u4e00\u5b9a\u6703\u662fregister\u3002</li> </ul> <p>\u7bc4\u4f8b: Full adder <pre><code>module FA(\n    input A,B,Cin,\n    output reg Cout,S \n);\n\nalways @(A, B, Cin) begin    //always @(*) begin    \n   Cout = (A&amp;B) | (Cin &amp; (A^B));\n   S=Cin^A^B; \nend\n\nendmodule\n</code></pre> - Blocking assignment \u5728Procedural Block\u4e2d\u53ef\u4ee5\u5206\u6210Blocking assignment(=)\u8ddfNon-Blocking assignment(&lt;=)(Non-blocking\u7684\u90e8\u5206Sequential\u518d\u7d30\u8b1b)\u3002 Blocking assignmen\u8ddfcpp, c,...\u6bd4\u8f03\u985e\u4f3c, \u6703\u4e00\u884c\u4e00\u884c\u4f9d\u5e8f\u57f7\u884c\u3002 \u7bc4\u4f8b\uff1a Full adder <pre><code>module FA(\n    input A,B,Cin,\n    output reg Cout, S\n);\n\nalways @(*) begin\n    {Cout, S} = A; //execute first\n    {Cout, S} = {Cout, S}+B;\n    {Cout, S} = {Cout, S}+Cin; //execute last\nend\n\nendmodule\n</code></pre> - case - \u8ddfswitch case\u5f88\u50cf, \u6bd4\u5c0d\u689d\u4ef6\u4e4b\u5f8c\u57f7\u884c\u5c0d\u61c9\u7684statement(s) - \u5efa\u8b70\u90fd\u8981\u5bebdefault case, \u907f\u514d\u907a\u6f0f, \u5982\u679c\u8981\u5408\u6210\u4e5f\u6bd4\u8f03\u4e0d\u6703\u51fa\u73fe\u591a\u9918\u7684Latch</p> <p>\u7bc4\u4f8b\uff1a4 to 1 MUX <pre><code>module MUX(\n    input in00, in01, in10, in11,\n    input s0, s1, //select\n    output reg out\n);\n\nalways @(*) begin\n    case ({s1, s0})\n        2'b00: begin\n            out=in00;\n        end\n        2'b01: begin\n            out=in01;\n        end\n        2'b10: begin\n            out=in10;\n        end\n        2'b11: begin\n            out=in11;\n        end\n        default: begin\n            out=1'b0;\n        end\n    endcase\nend\n\nendmodule\n</code></pre></p> <p> - if/else - \u8ddfcpp\u7b49\u7684if/else\u5f88\u50cf - \u5efa\u8b70\u6700\u5f8c\u90fd\u8981\u5bebelse, \u4e5f\u662f\u70ba\u4e86\u907f\u514d\u907a\u6f0f\u8ddf\u5408\u6210\u51fa\u591a\u9918\u7684Latch</p> <p>\u7bc4\u4f8b\uff1a 4 to 1 MUX <pre><code>module MUX(\n    input in00, in01, in10, in11,\n    input s0, s1,\n    output reg out\n);\n\nalways @(*) begin\n    if(s0==1'b0) begin\n        out= s1?in01:in00;\n    end\n    else if(s0==1'b1) begin\n        out= s1?in11:in10;\n    end\n    else out=1'b0;\nend\n\nendmodule\n</code></pre> - for loop verilog\u4e2dfor loop\u5167\u7684statement\u6703\u88ab\u5c55\u958b\u6210\u591a\u500b==\u4e26\u884c==\u7684\u786c\u9ad4\u7d50\u69cb(\u4e0d\u662f\u8fed\u4ee3\u57f7\u884c, \u4f7f\u7528\u6642\u8981\u7279\u5225\u6ce8\u610f)\u3002 - index\u901a\u5e38\u6703\u5ba3\u544a\u6210integer\u578b\u614b - verilog\u6c92\u6709\"i++\"\u9019\u7a2e\u5beb\u6cd5\uff0c\u8981\u5beb\u6210i=i+1\u3002</p> <p>\u7bc4\u4f8b1: <pre><code>reg[9:0] a;\ninteger i;\nalways @(*)begin \n    for(i=0; i&lt;10; i=i+1) begin\n        a[i]=1'b0;\n    end\nend\n</code></pre></p> <p></p> <p>\u7bc4\u4f8b2: \u6b64\u4f8b\u6703\u751f\u621010\u500b\u4e58\u6cd5\u5668\uff0c\u800c\u4e0d\u662f\u7528\u540c\u4e00\u500b\u4e58\u6cd5\u5668\u4f9d\u5e8f\u57f7\u884c10\u6b21\u4e58\u6cd5\u3002 <pre><code>integer i;\nreg[9:0] a,b,c;\nalways @(*)begin \n    for(i=0; i&lt;10; i=i+1) begin\n        a[i]=b[i]*c[i];\n    end\nend\n</code></pre></p>"},{"location":"rtl/verilog/#generate-block","title":"\u88dc\u5145: generate block","text":"<p>\u7d93\u5e38\u914d\u5408for loop\u4f7f\u7528\uff0c\u7528\u4f86\u751f\u6210\u591a\u500b\u76f8\u540c\u7684\u5143\u4ef6\u3002 - \u7528generate, endgenerate\u5305\u8d77\u4f86\u3002 - for loop\u7684index\u90e8\u5206\u5fc5\u9808\u5ba3\u544a\u6210genvar\u578b\u614b\u3002 - for loop\u6700\u597d\u8981\u52a0label(\u7bc4\u4f8b1\u4e2d\u7684\"BLOCK1\", \u7bc4\u4f8b2\u7684FA_BLOCK)\u3002 - generate block\u4e2d\u8981\u7528continuous assignment\uff0c\u5de6\u503c\u53ef\u70bawire\u6216reg\u3002 - generate block\u4e2d\u4e5f\u53ef\u4ee5\u914d\u5408if else, case\u7684\u8a9e\u6cd5\uff0c\u4f9d\u64da\u7279\u5b9a\u689d\u4ef6\u9078\u64c7\u8981\u751f\u6210\u7684\u5143\u4ef6\u3002</p>"},{"location":"rtl/verilog/#sequential-circuit","title":"Sequential Circuit","text":"<ul> <li> <p>Latch, Flip-Flop(FF), Register</p> <ol> <li> <p>Clock: </p> <p></p> <ul> <li>Clock period (i.e. Cycle time): \u5169\u500bRising edge\u7684\u6642\u9593\u9593\u9694\u3002(second/cycle)</li> <li>Clock frequency: \u6bcf\u79d2\u6709\u5e7e\u500bCycle, Clock period\u7684\u5012\u6578\u3002(cycle/second)</li> <li>Clock width: \u4e00\u500bCycle\u4e2dClock signal\u70bahigh\u7684\u6642\u9593\u9577\u5ea6\u3002</li> <li>Duty cycle: Clock width/ Clock period\u3002</li> <li>Active high: \u96fb\u8def\u7684\u72c0\u614b\u5728Clock\u70baHigh\u6216Rising edge\u6642\u6539\u8b8a\u3002</li> <li>Active low: \u96fb\u8def\u7684\u72c0\u614b\u5728Clock\u70baLow\u6216Falling edge\u6642\u6539\u8b8a\u3002<ol> <li>Latch &amp; FF Latch\u548cFF\u90fd\u662f\u96fb\u8def\u4e2d\u7684\u5132\u5b58\u88dd\u7f6e\uff0c\u96fb\u8def\u7684\u72c0\u614b\u6703\u96a8control signal(\u5e38\u70baclock)\u6539\u8b8a\u3002</li> </ol> </li> <li> <p>Latch:     Level triggered, \u5728Control input\u70bahigh(Active high)\u6216low(Active low)\u6642\uff0c\u96fb\u8def\u72c0\u614b\u53ef\u6539\u8b8a\u3002</p> <p></p> <p>eg: D-Latch</p> <p></p> clk Q Q bar 0 No Change No Change 1 D ~D <p>\u96fb\u8def\u72c0\u614b\u5728Clock level\u70bahigh\u6642\u53ef\u6539\u8b8a\u3002         - FF: Edge triggered, \u5728Control input\u7684Rising edge(Active high)\u6216Falling edge (Active low)\u6642\uff0c\u96fb\u8def\u72c0\u614b\u53ef\u6539\u8b8a\u3002</p> <p></p> <p>eg: D-FF</p> <p></p> clk Q Q bar Rising edge D ~D Others No Change No Change <p>\u96fb\u8def\u72c0\u614b\u53ea\u5728Clock\u7684Rising edge\u53ef\u6539\u8b8a\uff0cHigh level, Low level\u53caFalling edge\u6642\u90fd\u7dad\u6301\u4e0d\u8b8a\u3002</p> <p>edge trigger\u7684verilog\u5beb\u6cd5: <pre><code>    input clk; //clock\n\n    //Rising edge:\n    always @(posedge clk) begin\n        //...\n    end\n</code></pre> <pre><code>    input clk; //clock\n    //Falling edge:\n    always @(negedge clk)begin\n        //...\n    end\n</code></pre>         - \u76f8\u8f03\u65bcLatch, FF\u96fb\u8def\u72c0\u614b\u53ef\u6539\u8b8a\u7684\u6642\u9593\u8f03\u77ed\uff0c\u6545\u8f03\u70ba\u7a69\u5b9a\uff0c\u5be6\u4f5cSequential circuit\u901a\u5e38\u90fd\u6703\u7528FF(\u4e5f\u5c31\u662fEdge triggered\u7684\u5beb\u6cd5)\uff0c\u76e1\u91cf\u907f\u514d\u4f7f\u7528Latch\u3002     3. Synchronous &amp; Asynchronous Reset         \u96fb\u8def\u5728\u525b\u901a\u96fb\u6642\u901a\u5e38\u9700\u8981\u8a2d\u5b9a\u521d\u59cb\u503c, \u7a31\u70baReset         - Synchronous reset: <pre><code>    input clk; //clock\n    input rst; //reset\n    output reg out;\n\n    always @(posedge clk) begin\n        if(rst) \n            out&lt;=1'b0;\n        else\n            //...\n\n    end\n</code></pre> \u4ee5Rising edge triggered\u7684\u96fb\u8def\u70ba\u4f8b\uff0c\u8981\u5728Rising edge==\u4e14==reset\u8a0a\u865f\u70baactive\u6642\u624d\u80fd\u9032\u884creset\u3002         - Asychronous reset: <pre><code>    input clk; //clock\n    input rst; //reset\n    output reg out;\n\n    always @(posedge clk or posedge rst) begin\n        if(rst) \n            out&lt;=1'b0;\n        else\n            //...\n\n    end\n</code></pre> Reset\u4e0d\u53d7clock\u7684\u5f71\u97ff\uff0c\u4e0d\u9808\u7b49\u5f85clock edge\u5373\u53ef\u9032\u884c\u3002 - Combinational v.s. Sequential     1. Combinational Circuit         \u96fb\u8def\u72c0\u614b\u7531\u53ea\u7531\u7576\u4e0b\u7684input\u6c7a\u5b9a\u3002</p> </li> </ul> </li> </ol> <p></p> <ol> <li>Sequential Circuit     \u6709Memory element,\u6703\u8a18\u4f4f\u4e0a\u500b\u6642\u523b\u7684\u96fb\u8def\u72c0\u614b\u3002\u96fb\u8def\u72c0\u614b\u7531\u7576\u4e0b\u7684input\u53ca\u4e0a\u500b\u6642\u523b\u7684\u96fb\u8def\u72c0\u614b\u6c7a\u5b9a\u3002</li> </ol> <p></p> <p>\u5e38\u898b\u7684Memory element:      Register, Counter(\u8a08\u6578\u5668), Register file, Memory, Queue, Stack...  - Blocking v.s. Non-Blocking \u5982\u540c\u524d\u9762\u63d0\u904e\u7684\uff0c\u591a\u500bBlocking assignment(=)\u4e4b\u9593\u6703\u4f9d\u5e8f\u57f7\u884c\u3002\u591a\u500bNon-Blocking assignment(&lt;=)\u4e4b\u9593\u5247\u6c92\u6709\u5148\u5f8c\u9806\u5e8f\u95dc\u4fc2\uff0c\u6703\u540c\u6642\u57f7\u884c\u3002 eg: \u5047\u8a2da, b\u521d\u59cb\u503c\u5206\u5225\u70ba0, 1 - Blocking assignment:      <pre><code>a=b; //a=0\nb=a; //b=0\n</code></pre>     \u5148\u57f7\u884ca=b: a\u503c\u8b8a\u70ba0\u3002\u518d\u57f7\u884cb=a: b\u503c\u4e5f\u8b8a\u70ba0\u3002 - Non-Blocking:     <pre><code>a&lt;=b; //a=0\nb&lt;=a; //b=1\n</code></pre>     \u540c\u6642\u57f7\u884c\u5169\u884c, a\u503c\u8b8a\u70ba0, b\u8b8a\u70ba1\u3002(\u5169\u884c\u9806\u5e8f\u53ef\u5c0d\u8abf\uff0c\u4e0d\u5f71\u97ff\u57f7\u884c\u7d50\u679c) - \u6ce8\u610f\u4e8b\u9805     1. Combinational circuit\u4e2d\u901a\u5e38\u7528Blocking assignment     2. Sequential circuit\u4e2d\u901a\u5e38\u7528Non-Blocking, \u5728Clock edge\u6642\u540c\u6b65\u9032\u884c\u6240\u6709reg\u7684update\u3002     3. \u5169\u7a2eassignment\u90fd\u8981\u5beb\u5728Procedural block\u4e2d\u3002     4. \u540c\u4e00\u500bProcedural block\u4e2d\u4e0d\u8981\u6df7\u7528Blocking\u8ddfNon-Blocking\u3002 - Finite State Machine (FSM) \u6703\u4f9d\u64da\u7279\u5b9a\u7684\u8f38\u5165\uff0c\u5728\u6709\u9650\u591a\u500b\u72c0\u614b(State)\u4e4b\u9593\u8f49\u63db(Transition)\u3002</p> <p>FSM\u53ef\u518d\u4f9d\u64daoutput\u7684\u6c7a\u5b9a\u65b9\u5f0f\u5206\u6210Moore machine\u53caMealy machine\u3002 1. Moore Machine     - current state\u76f4\u63a5\u6c7a\u5b9aoutput\u3002     - current state\u548cinput\u5171\u540c\u6c7a\u5b9anext state\u3002</p> <pre><code>Moore machine\u7684\u96fb\u8def\u67b6\u69cb:\n\n![](https://hedgedoc.course.aislab.ee.ncku.edu.tw/uploads/34f891d7-bb92-4a27-b56d-46105bf0d493.png)\n\n\u7bc4\u4f8b:\n\n![](https://hedgedoc.course.aislab.ee.ncku.edu.tw/uploads/a138bd12-6f23-4a3e-95e8-398a5da94f5d.png)\n\n| Current state | Next state (in=1) | Next state (in=0) | Output |\n| ------------- | ----------------- | ----------------- | ------ |\n| S0            | S1                | S0                | 0      |\n| S1            | S2                | S0                | 1      |\n| S2            | S0                | S2                | 2      |\n\nCode:\n```verilog\nmodule Moore(\n    input clk, rst,\n    input in,\n    output reg[2:0] out\n);\nparameter S0=2'd0, S1=2'd1, S2=2'd2;\nreg [1:0] cs, ns; //current state, next state\n\n//State register\nalways @ (posedge clk) begin\n    if(rst) \n        cs&lt;=S0;\n    else\n        cs&lt;=ns;\nend\n\n//next state logic\nalways @(*) begin\n    if(cs==S0) \n        ns=in?S1:S0; //in\u70ba1=&gt;S1, in\u70ba0=&gt;S0\n    else if(cs==S1)\n        ns=in?S2:S0;\n    else if(cs==S2)\n        ns=in?S0:S2;\n    else\n        ns=2'd3;\nend\n\n//output logic\nalways@(*) begin\n    if(cs==S0)\n        out=3'd0;\n    else if(cs==S1)\n        out=3'd1;\n    else if(cs==S2)\n        out=3'd2;\n    else\n        out=3'd3;\nend\n\nendmodule\n```\n\nWaveform:\n\n![](https://hedgedoc.course.aislab.ee.ncku.edu.tw/uploads/9fa97086-2b8d-4217-9797-85bc29e02ce6.png)\n</code></pre> <ol> <li> <p>Mealy Machine</p> <ul> <li>current state==\u53cainput==\u5171\u540c\u6c7a\u5b9aoutput\u3002</li> <li>current state\u548cinput\u5171\u540c\u6c7a\u5b9anext state\u3002</li> </ul> <p>Mealy machine\u7684\u96fb\u8def\u67b6\u69cb:</p> <p></p> <p>\u7bc4\u4f8b:</p> <p></p> Current state Next state (in=1) Next state (in=0) Output (in=1) Output (in=0) S0 S1 S0 1 0 S1 S2 S0 3 2 S2 S0 S2 5 4 <p>Code: <pre><code>module Mealy(\n    input clk, rst,\n    input in,\n    output reg[2:0] out\n);\nparameter S0=2'd0, S1=2'd1, S2=2'd2;\nreg [1:0] cs, ns; //current state, next state\n\n//State register\nalways @ (posedge clk) begin\n    if(rst) \n        cs&lt;=S0;\n    else\n        cs&lt;=ns;\nend\n\n//next state logic\nalways @(*) begin\n    if(cs==S0) \n        ns=in?S1:S0; //in\u70ba1=&gt;S1, in\u70ba0=&gt;S0\n    else if(cs==S1)\n        ns=in?S2:S0;\n    else if(cs==S2)\n        ns=in?S0:S2;\n    else\n        ns=2'd3;\nend\n\n//output logic\nalways@(*) begin\n    if(cs==S0)\n        out=in?3'd1:3'd0;\n    else if(cs==S1)\n        out=in?3'd3:3'd2;\n    else if(cs==S2)\n        out=in?3'd5:3'd4;\n    else\n        out=2'd6;\nend\n\nendmodule\n</code></pre></p> <p>Waveform:</p> <p></p> </li> </ol> </li> </ul>"},{"location":"tools/cli_tools/","title":"Useful CLI Tools","text":"<p>Info</p> <ul> <li>Contributor\uff1aTA \u5cfb\u8c6a</li> <li>Last Update\uff1a2024/10/03</li> </ul>"},{"location":"tools/cli_tools/#lazygit-tui-for-git","title":"Lazygit - TUI for Git","text":""},{"location":"tools/cli_tools/#helix-text-editor","title":"Helix Text-Editor","text":""},{"location":"tools/cli_tools/#zellij-replace-for-tmux","title":"Zellij - Replace for TMux","text":""},{"location":"tools/cli_tools/#cloc","title":"Cloc","text":""},{"location":"tools/docker/","title":"Docker Tutorial","text":"<p>Info</p> <ul> <li>Contributors: TA \u5cfb\u8c6a</li> <li>Last updated: 2024/09/21</li> </ul>"},{"location":"tools/docker/#preamble","title":"Preamble","text":"<p>\u4eca\u5e74\u56e0\u70ba\u6211\u5011\u8a08\u5283\u8981\u958b\u6e90\u9019\u6574\u5957\u6559\u6750\uff0c\u6240\u4ee5\u5728\u5927\u5bb6\u6240\u4f7f\u7528\u7684\u958b\u767c\u74b0\u5883\u4e0a\u52e2\u5fc5\u5f97\u505a\u4e00\u4e9b\u8abf\u6574\uff1b\u5f80\u5e74\u6709\u95dc\u65bc\u96fb\u8def\u6a21\u64ec\uff08Simulation\uff09\u7684\u90e8\u5206\uff0c\u6211\u5011\u901a\u5e38\u90fd\u662f\u8b93\u5927\u5bb6\u4f7f\u7528\u5be6\u9a57\u5ba4\u63d0\u4f9b\u7684\u4f3a\u670d\u5668\uff0c\u4e26\u4e14\u4f7f\u7528\u4f3a\u670d\u5668\u4e0a\u5b89\u88dd\u7684 Cadence XCELIUM (<code>xrun</code> command) \u6216\u662f Synopsys VCS \u4f86\u9032\u884c\u6a21\u64ec\uff0c\u800c\u9019\u5169\u5957\u5de5\u5177\u57fa\u672c\u4e0a\u90fd\u662f\u9700\u8981 License \u7684\uff0c\u800c\u4e14\u975e\u5e38\u6602\u8cb4\u3002\u4e5f\u56e0\u6b64\u4eca\u5e74\u6211\u5011\u63a1\u7528\u4e0d\u4e00\u6a23\u7684\u6a21\u5f0f\uff0c\u6211\u5011\u4e0d\u518d\u63d0\u4f9b\u4fee\u8ab2\u540c\u5b78\u5be6\u9a57\u5ba4\u4f3a\u670d\u5668\u7684\u5e33\u865f\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u6211\u5011\u5229\u7528 Docker \u63d0\u4f9b\u540c\u5b78\u5df2\u7d93\u8a2d\u8a08\u597d\u7684\u958b\u767c\u74b0\u5883\uff0c\u5728\u9019\u88e1\u6307\u7684\u5c31\u662f Docker Image\u3002\u540c\u5b78\u53ea\u9700\u8981\u5728\u81ea\u5df1\u7684\u96fb\u8166\u4e0a\u5b89\u88dd Docker\uff0c\u5373\u53ef\u4f7f\u7528\u6211\u5011\u63d0\u4f9b\u7684 Docker Image \u9032\u884c\u958b\u767c\uff0c\u4e26\u4e14 Image \u4e2d\u5df2\u7d93\u5305\u542b\u6240\u6709\u540c\u5b78\u5beb Lab \u6703\u9700\u8981\u7528\u5230\u7684\u6240\u6709 Toolchain\uff0c\u4e0d\u9700\u8981\u540c\u5b78\u5728\u74b0\u5883\u4e0a\u591a\u82b1\u5fc3\u529b\u53bb\u6298\u9a30\u3002</p>"},{"location":"tools/docker/#introduction-to-docker","title":"Introduction to Docker","text":""},{"location":"tools/docker/#what-is-docker","title":"What is Docker?","text":"<p>\u53c3\u8003\uff1aDocker \u662f\u4ec0\u9ebc\uff1fDocker \u57fa\u672c\u89c0\u5ff5\u4ecb\u7d39\u8207\u5bb9\u5668\u548c\u865b\u64ec\u6a5f\u7684\u6bd4\u8f03</p> <p>Docker \u662f\u5bb9\u5668\u5316\u6280\u8853\uff08Containerization\uff09\u7684\u4e00\u7a2e\u5be6\u4f5c\uff0c\u800c\u5bb9\u5668\u5316\u53c8\u662f\u4e00\u7a2e\u8f15\u91cf\u7d1a\u7684\u865b\u64ec\u5316\u6280\u8853\uff0c\u5e38\u5e38\u548c\u5bb9\u5668\u5316\u62ff\u4f86\u5c0d\u6bd4\u7684\u5c31\u662f\u865b\u64ec\u6a5f\uff08Virtual Machine, VM\uff09\u6280\u8853\u3002\u6211\u5011\u53ef\u4ee5\u53c3\u8003\u4e0b\u9762\u9019\u5f35\u5716</p> <p></p> <p>\u57fa\u672c\u4e0a Docker \u7684\u51fa\u73fe\u8b93\u74b0\u5883\u7684\u90e8\u5c6c\u8b8a\u5f97\u5bb9\u6613\u5f88\u591a\uff0c\u8a66\u60f3\u5927\u5bb6\u4eca\u5929\u5728\u81ea\u5df1\u7684\u96fb\u8166\u4e0a\u958b\u767c\u61c9\u7528\u7a0b\u5f0f\u7684\u6642\u5019\uff0c\u4f60\u6703\u6709\u81ea\u5df1\u7684\u958b\u767c\u74b0\u5883\u548c\u57f7\u884c\u74b0\u5883\uff1b\u4f46\u662f\uff0c\u4eca\u5929\u5982\u679c\u4f60\u8981\u628a\u4f60\u5beb\u7684 App \u958b\u653e\u7d66\u5225\u4eba\uff0c\u8b93\u5225\u4eba\u5728\u4ed6\u5011\u96fb\u8166\u4e0a\u57f7\u884c\u7684\u6642\u5019\uff0c\u53ef\u80fd\u5c31\u6703\u51fa\u73fe\u554f\u984c\uff0c\u56e0\u70ba\u4f60\u548c\u5225\u4eba\u7684\u96fb\u8166\u7684\u958b\u767c\u74b0\u5883\u548c\u57f7\u884c\u74b0\u5883\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u8b6c\u5982\u4f60\u5011\u6240\u4f7f\u7528\u7684 Python \u7248\u672c\u6216\u662f Java JDK \u7684\u7248\u672c\u4e0d\u540c\uff0c\u9019\u6642\u5019 Docker \u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u5834\u3002\u5229\u7528 Docker\uff0c\u4f60\u53ef\u4ee5\u5c07\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\uff0c\u9023\u540c\u57f7\u884c\u74b0\u5883\u6253\u5305\u6210\u4e00\u500b Docker Image\uff0c\u5225\u4eba\u5c31\u53ef\u4ee5\u5229\u7528\u4f60\u63d0\u4f9b\u7684 Docker Image \u4f86\u5efa\u7acb\u4e00\u500b Container\uff0c\u5c31\u53ef\u4ee5\u5728\u9019\u500b Container \u4e2d\u53bb\u57f7\u884c\u4f60\u958b\u767c\u7684\u61c9\u7528\u7a0b\u5f0f\uff0c\u4e26\u4e14\u907f\u958b\u74b0\u5883\u554f\u984c\u3002</p> <p>\u7c21\u55ae\u4f86\u8aaa\uff0c\u914d\u7f6e\u74b0\u5883\u548c\u958b\u767c\u61c9\u7528\u7a0b\u5f0f\u7684\u4eba\u53ea\u9700\u8981\u64b0\u5beb Dockerfile\uff0c\u5c31\u53ef\u4ee5\u628a\u9019\u500b Dockerfile \u7d66\u5225\u4eba\uff0c\u8b93\u5225\u4eba\u4f86 build image\uff1b\u6216\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u63d0\u4f9b\u5df2\u7d93 build \u597d\u7684 Docker Image \u7d66\u5225\u4eba\u4f7f\u7528\u3002</p> <p>\u96d6\u7136 Docker \u7684\u4f7f\u7528\u5834\u666f\u6bd4\u8f03\u5e38\u898b\u65bc\u548c\u61c9\u7528\u7a0b\u5f0f\u914d\u5957\u7684\u74b0\u5883\u914d\u7f6e\uff0c\u4f46\u5176\u5be6\u6211\u5011\u4e5f\u53ef\u4ee5\u900f\u904e Docker \u4f86\u5be6\u73fe\u985e\u4f3c\u865b\u64ec\u6a5f\u5668\u7684\u529f\u80fd\uff0c\u4e5f\u5c31\u662f\u5229\u7528 Docker \u914d\u7f6e\u4e00\u500b\u5c6c\u65bc\u6211\u5011\u81ea\u5df1\u7684 Linux \u958b\u767c\u74b0\u5883\u4e26\u4e14\u5b89\u88dd\u6211\u5011\u6240\u9700\u7684\u5de5\u5177\u93c8\uff0c\u5728\u88e1\u9762\u958b\u767c\u7a0b\u5f0f\uff0c\u5c31\u50cf\u662f\u76f4\u63a5\u5728\u6211\u5011\u96fb\u8166\u4e0a\u5b89\u88dd Linux \u4f5c\u696d\u7cfb\u7d71\u7684\u611f\u89ba\u4e00\u6a23\u3002\u4ee5\u8a08\u7b97\u6a5f\u7d44\u7e54\u9019\u5802\u8ab2\u4f86\u8aaa\uff0c\u52a9\u6559\u6b63\u662f\u5229\u7528 Docker \u914d\u7f6e\u4e86\u4e00\u500b\u540c\u5b78\u5beb\u4f5c\u696d\u6240\u9700\u7684 Linux \u958b\u767c\u74b0\u5883\uff0c\u4f7f\u7528\u7684\u4f5c\u696d\u7cfb\u7d71\u662f Ubuntu\u3002</p>"},{"location":"tools/docker/#docker-image-vs-docker-container","title":"Docker Image vs. Docker Container","text":"<p>\u52a9\u6559\u89ba\u5f97 Docker Image \u548c Docker Container \u7684\u95dc\u4fc2\u6709\u9ede\u985e\u4f3c\u7269\u4ef6\u5c0e\u5411\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0cClass \u4e4b\u65bc Object (Instance) \u7684\u95dc\u4fc2\u3002\u6211\u5011\u6240\u5efa\u69cb\u7684 Docker Image \u53ea\u662f\u4e00\u500b\u985e\u4f3c\u85cd\u5716\u7684\u6771\u897f\uff0c\u6211\u5011\u771f\u6b63\u8981\u4f7f\u7528\u7684\u6771\u897f\u662f Docker Container\uff0c\u800c\u5efa\u7acb Container \u5247\u5fc5\u9808\u8981\u6709\u4e00\u500b\u85cd\u5716\u53ef\u4ee5\u4f9d\u5faa\uff0c\u9019\u5c31\u662f Docker Image \u7684\u529f\u7528\u3002\u6240\u4ee5\u8acb\u540c\u5b78\u7269\u5fc5\u8981\u641e\u6e05\u695a Image \u548c Container \u662f\u5169\u500b\u4e0d\u540c\u7684\u6771\u897f\uff0c\u6211\u5011\u5be6\u969b\u4e0a\u5728\u4f7f\u7528\u7684\u662f Container\uff0cImage \u53ea\u662f\u6211\u5011\u5efa\u7acb Container \u6240\u9700\u7684\u53c3\u7167\u800c\u5df2\u3002</p> <p>\u6216\u8005\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u7528\u98df\u8b5c\u548c\u83dc\u991a\u4f86\u6bd4\u55bb Docker Image \u548c Docker Container\u3002Docker Image \u5c31\u50cf\u662f\u4e00\u9053\u83dc\u7684\u98df\u8b5c\u4e00\u6a23\uff0cDocker Engine \u6703\u6839\u64da Docker Image \u5efa\u7acb\u5c0d\u61c9\u7684 Docker Container\uff0c\u800c Docker Container \u5c31\u50cf\u662f\u7528\u9019\u500b\u98df\u8b5c\u505a\u51fa\u4f86\u7684\u83dc\u991a\u4e00\u6a23\u3002</p> <p>Info</p> <p>\u6709\u4e9b\u5bb9\u5668\u5316\u6280\u8853\u7684\u5be6\u4f5c\u4e0d\u4e00\u5b9a\u8981\u5148\u5efa\u7acb Image \u624d\u80fd\u5efa\u7acb Container\uff0c\u4f8b\u5982 Apptainer \u662f\u53e6\u4e00\u500b\u975e\u5e38\u6709\u540d\u7684\u5bb9\u5668\u5316\u6280\u8853\u7684\u5be6\u4f5c\uff0c\u5b83\u5c31\u662f\u76f4\u63a5\u5efa\u7acb Container \u800c\u4e0d\u7528\u5148\u5efa\u7acb Image\u3002</p>"},{"location":"tools/docker/#how-to-install-docker","title":"How to install Docker","text":"<p>\u9996\u5148\uff0c\u6211\u5011\u5fc5\u9808\u5148\u5728\u96fb\u8166\u4e0a\u5b89\u88dd Docker Engine\uff1b\u70ba\u4e86\u7c21\u5316\u5b89\u88dd\u904e\u7a0b\uff0c\u6211\u5011\u53ef\u4ee5\u76f4\u63a5\u5728\u96fb\u8166\u4e0a\u5b89\u88dd Docker Desktop\uff0c\u5982\u679c\u662f\u4f7f\u7528 Mac \u7684\u8a71\uff0c\u52a9\u6559\u63a8\u85a6\u5b89\u88dd OrbStack\u3002</p> <p>Info</p>"},{"location":"tools/docker/#windows-subsystem-for-linux-wsl","title":"Windows Subsystem For Linux (WSL)","text":"<p>\u53c3\u8003\uff1a\u5982\u4f55\u4f7f\u7528 WSL \u5728 Windows \u4e0a\u5b89\u88dd Linux</p> <p>\u5982\u679c\u60f3\u8981\u5728 Windows \u4e0a\u4f7f\u7528 Linux \u64cd\u4f5c\u7cfb\u7d71\u7684\u8a71\uff0c\u4ee5\u5f80\u5e38\u5e38\u9700\u8981\u4f7f\u7528\u8af8\u5982 VirtualBox \u4e4b\u985e\u7684\u865b\u64ec\u6a5f\u8edf\u9ad4\u4f86\u5b89\u88dd\u548c\u914d\u7f6e\u865b\u64ec\u6a5f\uff0c\u4f46\u73fe\u5728 Windows \u4e0a\u6709\u4e00\u500b\u5167\u5efa\u529f\u80fd\u53eb\u505a WSL\uff08\u76ee\u524d\u5df2\u7d93\u5230 WSL2\uff09\uff0c\u53ef\u4ee5\u8b93\u6211\u5011\u4e0d\u7528\u5b89\u88dd\u865b\u64ec\u6a5f\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u914d\u7f6e Linux \u958b\u767c\u74b0\u5883\u3002\u5982\u679c\u4f60\u662f\u4f7f\u7528 Windows \u4f5c\u696d\u7cfb\u7d71\u7684\u8a71\uff0c\u52a9\u6559\u63a8\u85a6\u4f60\u53ef\u4ee5\u5b89\u88dd WSL \u9019\u500b\u529f\u80fd\uff0c\u4e0d\u8ad6\u662f\u4f5c\u70ba\u65e5\u5e38\u958b\u767c\u74b0\u5883\u6216\u662f\u62ff\u4f86\u53d6\u4ee3 MobaXterm \u90fd\u975e\u5e38\u597d\u7528\u3002\u914d\u5957\u7684\u7d42\u7aef\u6a5f\u8edf\u9ad4\u52a9\u6559\u63a8\u85a6\u4f7f\u7528 Windows Terminal\uff0c\u800c Linux Distribution \u52a9\u6559\u63a8\u85a6\u5b89\u88dd Ubuntu 22.04 \u6216\u662f Ubuntu 24.04\u3002\u81f3\u65bc\u5b57\u9ad4\u7684\u90e8\u5206\uff0c\u52a9\u6559\u63a8\u85a6 JetBrainsMono Nerd Font\u3002</p>"},{"location":"tools/docker/#how-to-install-wsl2-on-your-windows-pc","title":"How to install WSL2 on your Windows PC","text":"<ol> <li>\u8acb\u5148\u4f7f\u7528\u7cfb\u7d71\u7ba1\u7406\u54e1\u8eab\u4efd\u958b\u555f PowerShell</li> <li>\u555f\u7528 WSL \u6240\u9700\u7cfb\u7d71\u529f\u80fd <pre><code>$ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n$ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n</code></pre></li> <li>\u5b89\u88dd\u4e26\u4e14\u66f4\u65b0 WSL\uff0c\u7136\u5f8c\u5b89\u88dd Linux Distribution <code>Ubuntu-24.04</code> <pre><code>$ wsl --install --web-download\n$ wsl --update --web-download\n$ wsl --set-default-version 2\n$ wsl --install Ubuntu-24.04 --web-download\n</code></pre></li> <li>\u5b8c\u6210 <code>Ubuntu-24.04</code> \u7684\u5b89\u88dd\u4e4b\u5f8c\uff0c\u61c9\u8a72\u5c31\u6703\u63a5\u8457\u63d0\u793a\u8f38\u5165\u4f60\u60f3\u8981\u7684 Username \u548c Password\uff0c\u8acb\u8f38\u5165\u4f60\u81ea\u5df1\u60f3\u8981\u7684\u4f7f\u7528\u8005\u540d\u7a31\u548c\u5bc6\u78bc\u4e4b\u5f8c\uff0c\u5c31\u5b8c\u6210\u8a2d\u5b9a\uff0c\u5373\u53ef\u958b\u59cb\u4f7f\u7528 Windows Subsystem for Linux (WSL)</li> </ol>"},{"location":"tools/docker/#install-docker-desktop-on-windows","title":"Install Docker Desktop on Windows","text":"<p>\u6211\u5011\u4e3b\u8981\u8981\u5b8c\u6210\u5169\u4ef6\u4e8b\u60c5\uff0c\u7b2c\u4e00\u662f WSL2 \u7684\u5b89\u88dd\uff0c\u518d\u4f86\u662f\u6e2c\u8a66 X11 Forwarding \u662f\u5426\u53ef\u4ee5\u6b63\u5e38\u904b\u4f5c\uff0c\u56e0\u70ba\u9019\u95dc\u4e4e\u5230\u6211\u5011\u662f\u5426\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u8996\u7a97\u7a0b\u5f0f\uff08GUI Apps\uff09\u3002</p>"},{"location":"tools/docker/#installation-method","title":"Installation Method","text":"<p>Danger</p> <p>\u8acb\u540c\u5b78\u52d9\u5fc5\u5148\u5b89\u88dd WSL \u4e4b\u5f8c\u518d\u5b89\u88dd Docker Desktop\uff0c\u5426\u5247 Docker \u6703\u7121\u6cd5\u6b63\u5e38\u904b\u4f5c\u3002</p> <p>\u53c3\u8003\uff1a\u5728 WSL 2 \u4e0a\u958b\u59cb\u4f7f\u7528 Docker \u9060\u7aef\u5bb9\u5668</p> <p>\u5728 Windows \u4e0a\u5b89\u88dd Docker \u6700\u5feb\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u4e0b\u8f09 Docker Desktop \u4e26\u5b89\u88dd\u3002</p> <p>\u5b89\u88dd\u5b8c Docker Desktop \u4e4b\u5f8c\uff0c\u4f60\u53ef\u4ee5\u958b\u555f\u525b\u525b\u5b89\u88dd\u7684 WSL \u7684 Ubuntu\uff0c\u7136\u5f8c\u8f38\u5165 <code>sudo docker run hello-world:latest</code> \u770b\u770b\u662f\u5426\u53ef\u4ee5\u6210\u529f\u57f7\u884c Docker\u3002\u5982\u679c\u51fa\u73fe\u4ee5\u4e0b\u756b\u9762\uff0c\u606d\u559c\u4f60 WSL \u548c Docker \u90fd\u9806\u5229\u5b89\u88dd\u5b8c\u6210\uff01</p> <p></p>"},{"location":"tools/docker/#test-x11-forwarding","title":"Test X11 Forwarding","text":"<p>\u56e0\u70ba\u5728\u5f8c\u9762\u7684 Lab \u6211\u5011\u6703\u7528\u5230 GTKWave \u9019\u500b Waveform Viewer \u4f86\u89c0\u5bdf\u96fb\u8def\u7684\u6ce2\u5f62\uff0c\u800c\u9019\u500b\u7a0b\u5f0f\u662f\u4e00\u500b GUI App\uff0c\u6240\u4ee5\u6211\u5011\u5fc5\u9808\u78ba\u8a8d\u6211\u5011\u7684 WSL \u53ef\u4ee5\u6b63\u5e38\u57f7\u884c X11 Forwarding \u7684\u529f\u80fd\u3002</p> <ol> <li>\u9996\u5148\uff0c\u5148\u5b89\u88dd\u5fc5\u8981\u7684 packages\uff08\u6b64\u6b65\u9a5f\u662f\u5728 Host \u7aef\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f WSL\uff0c\u4e26\u975e\u9032\u5165 Container \u5167\u64cd\u4f5c\uff09     <pre><code>$ sudo apt update # important!!!\n$ sudo apt install -y x11-utils x11-xserver-utils x11-apps\n</code></pre></li> <li>\u63a5\u8457\u8f38\u5165\u4ee5\u4e0b\u6307\u4ee4     <pre><code>$ xhost +local:docker\n$ xclock\n</code></pre></li> <li>\u5982\u679c\u4f60\u6709\u770b\u5230\u4e00\u500b\u5c0f\u8996\u7a97\u51fa\u73fe\uff0c\u4ee3\u8868 X11 \u529f\u80fd\u6b63\u5e38\u904b\u4f5c\uff01     </li> <li>\u8acb\u57f7\u884c <code>run.sh</code> \u9032\u5165 container \u4e4b\u5f8c\uff0c\u4e00\u6a23\u57f7\u884c <code>xclock</code> \u770b\u770b\u662f\u5426\u4e5f\u6709\u6b63\u5e38\u51fa\u73fe\u5c0f\u6642\u9418\u8996\u7a97</li> </ol>"},{"location":"tools/docker/#install-orbstack-on-macos","title":"Install OrbStack on MacOS","text":"<p>\u8acb\u76f4\u63a5\u5230 OrbStack \u7684\u5b98\u7db2\u4e0b\u8f09\u7136\u5f8c\u5b89\u88dd\u5373\u53ef\u4f7f\u7528\u3002\u4f7f\u7528 Mac \u7684\u4eba\u4e00\u6a23\u53ef\u4ee5\u958b\u555f\u7cfb\u7d71\u5167\u5efa\u7684 Terminal\uff0c\u7136\u5f8c\u8f38\u5165 <code>sudo docker run hello-world:latest</code> \u770b\u770b\u662f\u5426\u53ef\u4ee5\u6210\u529f\u57f7\u884c\u3002</p> <p>MacOS \u8981\u4f7f\u7528 X11 Forwarding \u7684\u529f\u80fd\u7684\u8a71\uff0c\u8acb\u4e0b\u8f09\u4e26\u5b89\u88dd XQuartz\u3002\u6b32\u4f7f\u7528 X11 Forwarding \u6642\uff0c\u8acb\u4fdd\u6301 XQuartz App \u70ba\u958b\u555f\u72c0\u614b\uff0c\u5426\u5247\u6703\u5c0e\u81f4\u8996\u7a97\u958b\u555f\u5931\u6557\u3002</p> <p>Warning</p> <p>\u9019\u908a\u6709\u554f\u984c\u7684\u8a71\u53ef\u4ee5\u8a62\u554f\u5927\u52a9\u6559\uff0c\u56e0\u70ba\u5927\u52a9\u4e5f\u662f\u4f7f\u7528 Mac\u3002</p>"},{"location":"tools/docker/#how-to-use-the-course-docker-image","title":"How to use the course Docker Image","text":"<p>\u6211\u5011\u63a1\u7528\u76f4\u63a5\u4e0b\u8f09 Docker Image \u7684\u65b9\u5f0f\uff0c\u800c\u975e\u4f7f\u7528 Dockerfile \u4f86\u5efa\u69cb Docker Image\uff0c\u539f\u56e0\u662f\u56e0\u70ba\u6211\u5011\u6703\u7528\u5230 RISC-V GNU Toolchain\uff0c\u5728\u5efa\u69cb Image \u7684\u904e\u7a0b\u4e2d\u6703\u53bb\u4e0b\u8f09\u8a72 Toolchain \u7684 repository\uff0c\u5982\u679c\u5927\u5bb6\u6240\u5728\u7684\u74b0\u5883\u7684\u7db2\u8def\u901f\u5ea6\u4e0d\u7406\u60f3\u7684\u8a71\uff0c\u5efa\u69cb image \u7684\u904e\u7a0b\u53ef\u80fd\u6703\u8017\u8cbb\u6578\u5c0f\u6642\u4ee5\u4e0a\uff0c\u751a\u81f3\u6703 build fail\u3002\u70ba\u4e86\u4e0b\u8f09\u52a9\u6559\u63d0\u4f9b\u7684 image\uff0c\u6211\u5011\u9700\u8981\u4f7f\u7528 <code>docker pull</code> \u6307\u4ee4\u3002</p> <p>\u8a73\u7d30\u4f86\u8aaa\uff0c\u56e0\u70ba\u6211\u5011\u9084\u6703\u4f7f\u7528\u5230\u52a9\u6559\u984d\u5916\u64b0\u5beb\u7684 Shell Script\uff0c\u6240\u4ee5\u6574\u500b\u904e\u7a0b\u7e3d\u5171\u9700\u8981\u5169\u500b\u6b65\u9a5f\uff0c\u5206\u5225\u662f\u4e0b\u8f09\u52a9\u6559\u6307\u4ee4\u7684 Reposiroty \u548c\u4e0b\u8f09\u52a9\u6559\u63d0\u4f9b\u7684 Docker Image\u3002\u4e0b\u8f09\u5b8c\u4e4b\u5f8c\uff0c\u5c31\u53ef\u4ee5\u57f7\u884c\u8173\u672c\uff08<code>run.sh</code>\uff09\u4f86\u555f\u52d5\u4e26\u4e14\u9032\u5165 container \u4e2d\uff0c\u4ee5\u4f7f\u7528\u6211\u5011\u70ba\u8ab2\u7a0b\u8a2d\u8a08\u7684\u7a0b\u5f0f\u958b\u767c\u74b0\u5883\u3002\u63a5\u4e0b\u4f86\u6211\u5011\u8aaa\u660e\u8a73\u7d30\u7684\u64cd\u4f5c\u6b65\u9a5f\uff1a</p> <ol> <li>\u8acb\u5148\u4e0b\u8f09\u9019\u500b Repository\uff1adocker-env <pre><code>$ git clone https://gitlab.course.aislab.ee.ncku.edu.tw/113-1/docker-env\n</code></pre></li> <li>\u9032\u5165 docker-env \u8cc7\u6599\u593e\uff0c\u63a5\u8457\u767b\u5165\u6211\u5011\u7684 Container Registry \u4e4b\u5f8c\uff0c\u518d Pull \u52a9\u6559\u63d0\u4f9b\u7684 Docker Image     <pre><code>$ sudo docker login registry.course.aislab.ee.ncku.edu.tw # \u8acb\u8f38\u5165\u4f60\u767b\u5165 Gitlab \u6240\u4f7f\u7528\u7684\u5e33\u865f\u3001\u5bc6\u78bc\n$ sudo docker pull registry.course.aislab.ee.ncku.edu.tw/113-1/docker-env/co2024-docker\n</code></pre></li> <li>\u57f7\u884c <code>run.sh</code> \u5f8c\u5373\u53ef\u9032\u5165 Container \u5167\u90e8\uff0c\u4fbf\u53ef\u4ee5\u958b\u59cb\u4f7f\u7528\u8ab2\u7a0b\u6240\u9700\u7684\u958b\u767c\u74b0\u5883     <pre><code>./run.sh\n</code></pre></li> </ol> <p>\u9032\u5165 Container \u4e4b\u5f8c\uff0c\u4f60\u53ef\u4ee5\u8f38\u5165 <code>id</code> \u547d\u4ee4\u4f86\u67e5\u770b\u81ea\u5df1\u7684 Username\u3001UID \u548c GID\uff0c\u4f60\u61c9\u8a72\u6703\u770b\u5230\u81ea\u5df1\u7684 Username \u662f <code>co2024</code>\uff0c\u800c UID \u548c GID \u6703\u548c\u4f60\u7684 Local \u7aef\u7684 UID \u548c GID \u76f8\u540c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u7576\u4f60\u8981\u4f7f\u7528 sudo \u547d\u4ee4\u7684\u6642\u5019\uff0c\u6703\u63d0\u793a\u9700\u8981\u8f38\u5165\u5bc6\u78bc\uff0c\u800c\u5bc6\u78bc\u4e5f\u662f <code>1234</code>\u3002\u4f46\u5927\u90e8\u5206\u7684\u60c5\u6cc1\u4e0b\uff0c\u5927\u5bb6\u61c9\u8a72\u4e0d\u6703\u9700\u8981\u5728\u5bb9\u5668\u4e2d\u4f7f\u7528\u5230\u8d85\u7d1a\u4f7f\u7528\u8005\u6b0a\u9650\u3002</p> <p>Info</p> <p>\u6703\u523b\u610f\u628a Container \u4e2d\u7684 UID \u548c GID \u8a2d\u5b9a\u6210\u548c Local \u7aef\u76f8\u540c\u662f\u6709\u7279\u6b8a\u7684\u8003\u91cf\u7684\u3002\u56e0\u70ba\u6211\u5011\u6703\u628a\u672c\u5730\u7aef\u7684\u8cc7\u6599\u593e <code>workspace</code> \u5366\u8f09\u5230 Container \u4e2d\uff0c\u85c9\u6b64\u5132\u5b58\u6211\u5011\u7684\u7a0b\u5f0f\u78bc\uff0c\u82e5 Container \u4e2d\u7684 UID \u548c GID \u548c\u672c\u5730\u7aef\u4e0d\u540c\u7684\u8a71\uff0c\u6703\u6709\u6a94\u6848\u6b0a\u9650\u7684\u554f\u984c\u3002</p>"},{"location":"tools/docker/#docker-volume-workspace","title":"Docker Volume &amp; Workspace","text":"<p>\u6700\u5f8c\uff0c\u6211\u5011\u9700\u8981\u8a0e\u8ad6 Docker \u5c0d\u65bc\u7ba1\u7406\u6a94\u6848\u7684\u7279\u6027\u3002\u7576\u4f60\u4f7f\u7528\u67d0\u500b Docker Image \u53bb\u958b\u555f\u4e00\u500b Container \u7684\u6642\u5019\uff0cDocker \u6703\u5728\u9019\u500b Container \u7684\u6700\u4e0a\u5c64\u52a0\u4e0a\u4e00\u5c64\u53ef\u5beb\u5c64\uff08Writable Layer\uff09\u3002\u4f60\u5c0d\u9019\u500b Container \u6700\u7684\u6240\u6709\u66f4\u6539\u90fd\u6703\u88ab\u7d00\u9304\u5728\u53ef\u5beb\u5c64\u7576\u4e2d\uff0c\u88ab Docker \u66ab\u5b58\u8d77\u4f86\u3002\u4f46\u662f\uff0c\u4eca\u5929\u4e00\u65e6\u9019\u500b Container \u88ab\u522a\u9664\u7684\u8a71\uff0c\u4f60\u505a\u7684\u6240\u6709\u66f4\u6539\u5c31\u6703\u88ab\u522a\u9664\uff0c\u7576\u4f60\u4e0b\u6b21\u518d\u7528\u76f8\u540c Image \u958b\u555f Container \u7684\u6642\u5019\uff0c\u4e00\u5207\u5c31\u6703\u6062\u5fa9\u539f\u72c0\uff0c\u5f77\u5f7f\u4f60\u5f9e\u672a\u505a\u904e\u4efb\u4f55\u64cd\u4f5c\u4e00\u6a23\u3002\u4f46\u9019\u6a23\u5c0d\u6211\u5011\u4f86\u8aaa\u5c31\u6703\u6709\u4e00\u500b\u5f88\u5927\u7684\u554f\u984c\uff0c\u56e0\u70ba\u6211\u5011\u5c07\u9019\u500b Docker Container \u4f5c\u70ba\u6211\u5011\u958b\u767c\u7a0b\u5f0f\u7684\u74b0\u5883\uff0c\u4e5f\u5c31\u4ee3\u8868\u6211\u5011\u6709\u5132\u5b58\u7a0b\u5f0f\u78bc\u7684\u9700\u6c42\uff0c\u9700\u8981\u6301\u4e45\u6027\uff08Persistent\uff09\u7684\u5132\u5b58\uff0c\u6700\u597d\u4e0d\u8981\u56e0\u70ba Container \u88ab\u522a\u9664\u5c31\u8ddf\u8457\u4e0d\u898b\u3002\u56e0\u6b64\uff0c\u6211\u5011\u6703\u9700\u8981\u4f7f\u7528\u5230\u4e00\u500b\u6771\u897f\uff0c\u53eb\u505a Docker Volume\u3002</p> <p></p> <p>Docker Volume \u53c8\u5206\u6210\u5169\u7a2e\u6a21\u5f0f\uff0c\u5206\u5225\u662f Bind Mount \u548c Volume\u3002Bind Mount \u5c31\u50cf\u662f\u5366\u8f09\u786c\u789f\u7684\u6982\u5ff5\uff0c\u6216\u662f\u7576\u4f60\u4f7f\u7528\u865b\u64ec\u6a5f\u5982 VirtualBox \u7684\u6642\u5019\uff0c\u628a\u96fb\u8166\u672c\u5730\u7aef\u7684\u67d0\u500b Path \u5366\u8f09\u5230\u865b\u64ec\u6a5f\u4e0a\uff0c\u8b93\u865b\u64ec\u6a5f\u5167\u90e8\u4e5f\u53ef\u4ee5\u770b\u5230\u672c\u5730\u7aef\u7684\u8cc7\u6599\u593e\uff0c\u85c9\u6b64\u5728\u672c\u5730\u7aef\u548c\u865b\u64ec\u6a5f\u4e4b\u9593\u5132\u5b58\u548c\u50b3\u8f38\u6a94\u6848\u3002Volume \u7684\u8a71\u9019\u908a\u5c31\u4e0d\u8d05\u8ff0\uff0c\u5927\u5bb6\u6709\u8208\u8da3\u7684\u8a71\u53ef\u4ee5\u53bb\u770b Docker \u5b98\u65b9\u7684\u6587\u4ef6\u3002</p> <p>\u5728\u9019\u5802\u8ab2\u4e2d\uff0c\u6211\u5011\u6703\u4f7f\u7528 Bind Mount \u7684\u65b9\u5f0f\uff0c\u9996\u5148\u5728 <code>docker-env</code> \u8cc7\u6599\u593e\u5e95\u4e0b\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u8cc7\u6599\u593e <code>workspace</code>\uff0c\u7136\u5f8c\u628a\u4ed6\u5366\u8f09\u5230 container \u4e0a\uff0c\u9019\u6a23\u7576\u6211\u5011\u9032\u5165 container \u4e4b\u5f8c\uff0c\u5c31\u53ef\u4ee5\u628a\u6211\u5011\u7684\u7a0b\u5f0f\u78bc\u653e\u5728 <code>workspace</code> \u5e95\u4e0b\uff0c\u5373\u4f7f\u6211\u5011\u96e2\u958b container \u5f8c\uff0c\u7a0b\u5f0f\u78bc\u4e5f\u4e0d\u6703\u4e0d\u898b\uff0c\u9054\u5230\u6301\u4e45\u6027\u7684\u5132\u5b58\u3002</p> <p>Info</p> <p>\u9019\u908a\u5c31\u53ef\u4ee5 callback \u5230\u524d\u9762\u8aaa\u7684\uff0c\u70ba\u4ec0\u9ebc\u6211\u5011\u8981\u523b\u610f\u628a\u5bb9\u5668\u4e2d <code>co2024</code> \u9019\u500b\u4f7f\u7528\u8005\u7684 UID \u548c GID \u8a2d\u5b9a\u6210\u548c\u672c\u5730\u7aef\u76f8\u540c\u3002</p>"},{"location":"tools/git_cmd/","title":"Git Tutorial","text":"<p>Info</p> <ul> <li>Contributors\uff1aTA \u660e\u5821\u3001TA \u5cfb\u8c6a </li> <li>Last updated\uff1a2024/09/25</li> </ul> <p>Success</p> <p>\u63a8\u85a6\u95b1\u8b80\u9ad8\u898b\u9f8d\u64b0\u5beb\u7684\u95dc\u65bc GIt \u7684\u7cfb\u5217\u6587\u7ae0\uff1a\u70ba\u4f60\u81ea\u5df1\u5b78 Git</p> <p>Danger</p> <p>\u544a\u8aa1\u5404\u4f4d\u540c\u5b78\uff0c\u5b78\u6703 Git \u57fa\u672c\u4e0a\u662f\u5927\u5bb6\u4ee5\u5f8c\u4f5c\u70ba\u5de5\u7a0b\u5e2b\u7684\u57fa\u672c\u80fd\u529b\uff0c\u4f7f\u7528 Git \u4e5f\u662f\u591a\u4eba\u5c08\u6848\u5408\u4f5c\u6700\u5e38\u898b\u7684\u7ba1\u7406\u65b9\u6848\u3002\u73fe\u5728\u4e0d\u5b78\uff0c\u5c31\u662f\u7b49\u8457\u4ee5\u5f8c\u9032\u516c\u53f8\u88ab\u96fb\u5230\u8d77\u98db\u3002</p>"},{"location":"tools/git_cmd/#introduction-to-version-control-system-git","title":"Introduction to Version Control System: Git","text":"<p>\u4ec0\u9ebc\u662f\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff08Version Control System\uff09\uff1f\u70ba\u4ec0\u9ebc\u9700\u8981\u505a\u5c08\u6848\u7684\u7248\u672c\u63a7\u5236\uff1f\u8a66\u60f3\uff0c\u7576\u4f60\u4eca\u5929\u6eff\u5fc3\u671f\u5f85\u7684\u5beb\u597d\u5fc3 Function \u4e4b\u5f8c\uff0c\u7d50\u679c Test \u4e00\u8dd1\uff0cX\uff01\u4e00\u500b Test Case \u90fd\u6c92\u904e\u3002\u65bc\u662f\uff0c\u4f60\u72e0\u4e0b\u5fc3\u60f3\u8981\u6253\u6389\u91cd\u4f86\uff0c\u537b\u767c\u73fe\u4f60\u6c92\u6709\u4e8b\u5148\u5099\u4efd\u4fee\u6539\u524d\u7684 Code\uff0c\u4e5f\u6c92\u6709\u4f5c\u7248\u672c\u63a7\u5236\uff0c\u65bc\u662f\u4f60\u53ea\u80fd\u958b\u59cb\u601d\u8003\u8a72\u628a\u54ea\u4e9b\u65b0\u52a0\u4e0a\u7684 Code \u522a\u6389...\u3002\u7576\u7136\uff0c\u9019\u53ea\u662f\u4e00\u500b\u60c5\u6cc1\u975e\u5e38\u7c21\u55ae\u7684\u4f8b\u5b50\uff0c\u5be6\u969b\u4e0a\u9084\u6709\u66f4\u591a\u7406\u7531\u53ef\u4ee5\u8aaa\u660e\u70ba\u4ec0\u9ebc\u7248\u672c\u63a7\u5236\u5c0d\u65bc\u5c08\u6848\u958b\u767c\u4f86\u8aaa\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u50cf\u662f\u591a\u4eba\u5408\u4f5c\u7684\u6642\u5019\uff0c\u5982\u679c\u6c92\u6709\u9069\u7576\u5730\u9032\u884c\u7248\u672c\u63a7\u5236\uff0c\u4e00\u5b9a\u6703\u5f15\u767c\u5927\u707d\u96e3\u3002</p> <p>\u6b64\u5916\uff0c\u5927\u5bb6\u6709\u6c92\u6709\u60f3\u904e\u6240\u8b02\u7a0b\u5f0f\u78bc\u7684\u96f2\u7aef\u786c\u789f\uff1f\u76f8\u4fe1\u5927\u5bb6\u591a\u591a\u5c11\u5c11\u90fd\u807d\u904e\u770b\u904e Github \u6216\u662f Gitlab \u9019\u5169\u500b\u7db2\u7ad9\uff0cGit \u4f5c\u70ba\u5e38\u898b\u7684\u7248\u63a7\u7cfb\u7d71\uff0c\u57fa\u672c\u4e0a\u6240\u6709\u7684\u7248\u672c\u63a7\u5236\u8cc7\u8a0a\u90fd\u662f\u5132\u5b58\u5728\u672c\u5730\u7aef\uff0c\u4e5f\u5c31\u662f\u6211\u5011\u5e38\u8aaa\u7684 Local Repository\u3002\u5927\u5bb6\u5982\u679c\u5728\u4f60\u7684 Local Repo \u8cc7\u6599\u593e\u5e95\u4e0b\u8f38\u5165 <code>$ ls -a</code> \u6307\u4ee4\uff0c\u61c9\u8a72\u6703\u770b\u5230\u4e00\u500b\u8cc7\u6599\u593e\u53eb\u505a <code>.git</code>\uff0c\u9019\u500b\u8cc7\u6599\u593e\u5e95\u4e0b\u5c31\u662f Git \u7528\u4f86\u7d00\u9304\u76ee\u524d\u5c08\u6848\u7684\u7248\u672c\u63a7\u5236\u8cc7\u8a0a\u7684\u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u8acb\u5927\u5bb6\u52d9\u5fc5\u4e0d\u8981\u96a8\u4fbf\u522a\u9664 <code>.git</code> \u9019\u500b\u8cc7\u6599\u593e\uff0c\u9664\u975e\u4f60\u6709\u628a\u4f60\u7684 Repo \u653e\u5230 Remote \u7aef\u3002</p> <p>\u800c\u6240\u8b02 Remoet Repository\uff0c\u5c31\u662f\u7576\u6211\u5011\u4f7f\u7528\u8af8\u5982 Github \u6216\u662f Gitlab \u9019\u985e\u7684\u7dda\u4e0a\u7248\u63a7\u670d\u52d9\u6642\uff0c\u6211\u5011\u628a\u6211\u5011\u7684 Local Repository \u5229\u7528 <code>git push</code> \u6307\u4ee4\u4e0a\u50b3\u5230 Github \u6216\u662f Gitlab \u4e0a\u3002\u4ee5\u8a08\u7b97\u6a5f\u7d44\u7e54\u9019\u5802\u514b\u4f86\u8aaa\uff0c\u52a9\u6559\u67b6\u8a2d\u4e86\u9019\u5802\u8ab2\u65af\u6709\u7684 Gitlab \u670d\u52d9\u4f9b\u540c\u5b78\u4f7f\u7528\uff0c</p>"},{"location":"tools/git_cmd/#basic-git-concepts","title":"Basic Git Concepts","text":"<p>\u70ba\u4e86\u8b93\u5927\u5bb6\u4e0d\u8981\u53ea\u662f\u6b7b\u8a18\u786c\u80cc Git \u7684\u6307\u4ee4\uff0c\u800c\u662f\u771f\u7684\u7406\u89e3 Git \u7684\u57fa\u672c\u89c0\u5ff5\uff0c\u6211\u5011\u5fc5\u9808\u8981\u7406\u89e3 Working Directory\u3001Staging Area\u3001Local Repository \u548c Remote Repository \u9019\u56db\u500b\u540d\u8a5e\u5206\u5225\u4ee3\u8868\u4ec0\u9ebc\uff0c\u4ee5\u53ca\u4ed6\u5011\u5f7c\u6b64\u4e4b\u9593\u7684\u95dc\u4fc2\u3002</p> <p></p> <p>\u4f60\u53ef\u4ee5\u60f3\u50cf\u4f60\u6709\u4e00\u500b\u5009\u5eab\uff0c\u5728\u5009\u5eab\u9580\u53e3\u6709\u500b\u5c0f\u5ee3\u5834\uff0c\u9019\u500b\u5ee3\u5834\u7684\u6982\u5ff5\u5c31\u50cf\u66ab\u5b58\u5340\u4e00\u6a23\uff0c\u4f60\u628a\u8981\u5b58\u653e\u5230\u5009\u5eab\u7684\u8ca8\u7269\u5148\u653e\u5230\u9019\u908a\uff08<code>git add</code>\uff0cstaging area\uff09\uff0c\u7136\u5f8c\u7b49\u6536\u96c6\u7684\u5dee\u4e0d\u591a\u4e86\u5c31\u53ef\u4ee5\u6253\u958b\u5009\u5eab\u9580\uff0c\u628a\u5728\u5ee3\u5834\u4e0a\u7684\u8ca8\u7269\u9001\u9032\u5009\u5eab\u88e1\uff08<code>git commit</code>\uff0clocal repo\uff09\uff0c\u4e26\u4e14\u8a18\u9304\u4e0b\u4f86\u9019\u6279\u8ca8\u662f\u4ec0\u9ebc\u7528\u9014\u7684\u3001\u8ab0\u9001\u4f86\u7684\u3002 [name=\u9ad8\u898b\u9f8d - \u70ba\u4f60\u81ea\u5df1\u5b78 Git]</p>"},{"location":"tools/git_cmd/#when-to-commit","title":"When to commit?","text":"<p>\u57fa\u672c\u4e0a\u4ec0\u9ebc\u6642\u5019 commit \u90fd\u53ef\u4ee5\uff0c\u4f60\u8981\u628a\u6771\u897f\u90fd\u5b8c\u6210\u624d\u63d0\u4ea4\uff0c\u6216\u662f\u4e00\u76f4\u4e0d\u65b7\u5730\u63d0\u4ea4\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u6709\u4e00\u5957\u597d\u7684\u898f\u5247\u3001\u7fd2\u6163\u6703\u6bd4\u8f03\u597d\u3002\u5e38\u898b\u7684 Commit \u7684\u6642\u9593\u9ede\u6709\uff1a</p> <ol> <li>\u5b8c\u6210\u4e00\u500b\u300c\u4efb\u52d9\u300d\u7684\u6642\u5019\uff1a\u4e0d\u7ba1\u662f\u5927\u5230\u5b8c\u6210\u4e00\u6574\u500b\u96fb\u5b50\u5546\u52d9\u7684\u91d1\u6d41\u7cfb\u7d71\uff0c\u9084\u662f\u5c0f\u81f3\u53ea\u52a0\u4e86\u4e00\u500b\u9801\u9762\u751a\u81f3\u53ea\u662f\u6539\u5e7e\u500b\u5b57\uff0c\u90fd\u7b97\u662f\u300c\u4efb\u52d9\u300d\u3002</li> <li>\u4e0b\u73ed\u7684\u6642\u5019\uff1a\u96d6\u7136\u53ef\u80fd\u9084\u6c92\u5b8c\u5168\u641e\u5b9a\u4efb\u52d9\uff0c\u4f46\u81f3\u5c11\u5148 Commit \u4eca\u5929\u7684\u9032\u5ea6\uff0c\u9664\u4e86\u5099\u4efd\u4e4b\u5916\uff0c\u4e5f\u8b93\u516c\u53f8\u77e5\u9053\u4f60\u4eca\u5929\u6709\u5728\u52aa\u529b\u5de5\u4f5c\u3002\uff08\u7136\u5f8c\u5e36\u56de\u5bb6\u7e7c\u7e8c\u82e6\u547d\u7684\u505a\uff1f\uff09</li> <li>\u4f60\u60f3\u8981 Commit \u7684\u6642\u5019\u5c31\u53ef\u4ee5 Commit\u3002</li> </ol> <p>[name=\u9ad8\u898b\u9f8d - \u70ba\u4f60\u81ea\u5df1\u5b78 Git]</p>"},{"location":"tools/git_cmd/#local-repo-remote-repo","title":"Local Repo? Remote Repo?","text":"<p>\u53ef\u4ee5\u628a Remote Repository \u60f3\u50cf\u6210 Local Repository \u7684\u96f2\u7aef\u786c\u789f\u5c31\u597d\u3002 --- TA \u5cfb\u8c6a</p>"},{"location":"tools/git_cmd/#common-git-commands","title":"Common Git Commands","text":"<ul> <li><code>git init</code></li> <li><code>git add</code></li> <li><code>git commit</code></li> <li><code>git status</code></li> <li><code>git remote</code></li> <li><code>git push</code></li> <li><code>git clone</code></li> <li><code>git checkout</code></li> <li><code>git branch</code></li> <li><code>git reset</code></li> <li><code>git rebase</code></li> <li><code>.gitignore</code> file</li> </ul>"},{"location":"tools/git_cmd/#git-init","title":"<code>git init</code>","text":"<p><code>git init</code> \u7528\u4f86\u521d\u59cb\u5316\u4e00\u500b Git repository\u3002\u5728\u6307\u5b9a\u7684\u8cc7\u6599\u593e\u4e2d\u57f7\u884c\u5f8c\uff0c\u6703\u5728\u8a72\u8cc7\u6599\u593e\u5167\u5efa\u7acb\u4e00\u500b <code>.git</code> \u8cc7\u6599\u593e\uff0c\u9019\u662f Git \u7528\u4f86\u5132\u5b58\u7248\u672c\u63a7\u5236\u7684\u8cc7\u8a0a\u3002\u8cc7\u6599\u593e\u4e2d\u6a94\u6848\u7684\u8b8a\u52d5\u90fd\u53ef\u4ee5\u88ab\u8ffd\u8e64\u3002</p> <p><pre><code>$ git init\n</code></pre> \u7576\u6307\u4ee4\u57f7\u884c\u5f8c\uff0c\u61c9\u8a72\u6703\u51fa\u73fe\u985e\u4f3c\u9019\u6a23\u7684\u8a0a\u606f\uff1a <pre><code>Initialized empty Git repository in /Your/Repository/Path/.git/\n</code></pre></p>"},{"location":"tools/git_cmd/#git-add","title":"<code>git add</code>","text":"<p><code>git add</code> \u662f\u5c07\u6307\u5b9a\u7684\u6a94\u6848\u52a0\u5165 Git \u7684\u66ab\u5b58\u5340\uff0c\u4ee3\u8868\u6a94\u6848\u5df2\u7d93\u88ab\u6a19\u8a18\u70ba\u5c07\u88ab\u63d0\u4ea4\u5230\u7248\u672c\u63a7\u5236\u4e2d\uff08\u9019\u6642\u9084\u5728Staging Area\uff09\u3002\u53ef\u4ee5\u9078\u64c7\u52a0\u5165\u7279\u5b9a\u6a94\u6848\u6216\u6240\u6709\u6a94\u6848\u3002 1. \u52a0\u5165\u55ae\u4e00\u6a94\u6848\uff1a <pre><code>$ git add HelloWorld.c\n</code></pre></p> <ol> <li>\u52a0\u5165\u8cc7\u6599\u593e\u4e2d\u6240\u6709\u6a94\u6848\uff1a <pre><code>$ git add .\n</code></pre></li> </ol> <p>\u9019\u500b\u6307\u4ee4\u57f7\u884c\u5f8c\uff0c\u4e0d\u6703\u6709\u8f38\u51fa\uff0c\u4f46\u6a94\u6848\u5df2\u7d93\u52a0\u5165\u5230\u66ab\u5b58\u5340\uff0c\u7b49\u5f85 <code>git commit</code> \u9032\u884c\u63d0\u4ea4\u3002</p>"},{"location":"tools/git_cmd/#git-commit","title":"<code>git commit</code>","text":"<p><code>git commit</code> \u7528\u4f86\u63d0\u4ea4\u66ab\u5b58\u5340\u4e2d\u5df2\u7d93\u52a0\u5165\u7684\u6a94\u6848\u3002\u6bcf\u500b commit \u90fd\u662f\u4e00\u500b\u7248\u672c\u7684\u5feb\u7167\uff0c\u9700\u8981\u7531\u4f7f\u7528\u8005\u63d0\u4ea4commit message\u4f86\u63cf\u8ff0\u9019\u6b21\u7684\u8b8a\u66f4\u3002Commit\u5b8c\u7562\u53ef\u4ee5\u6c7a\u5b9a\u662f\u5426\u8981push\u5230remote\uff0c\u6216\u662f\u7e7c\u7e8c\u7de8\u8f2f\u3002</p> <p>\u7bc4\u4f8b1 : \u521d\u59cb\u5316\u6a94\u6848\u6642\uff0c\u53ef\u4ee5\u5bebInitial commit\u4f5c\u70bacommit message\u3002 <pre><code>$ git commit -m \"Initial commit\"\n</code></pre> \u57f7\u884c\u5f8c\u986f\u793a\uff1a <pre><code>[master (root-commit) 67e0e74] Initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 HelloWorld.c\n</code></pre> \u9019\u8868\u793a\u6210\u529f\u63d0\u4ea4\uff0c\u4e26\u751f\u6210\u4e86\u4e00\u500b commit ID\uff08\u5982 <code>67e0e74</code>\uff09\u3002</p> <p>Success</p> <ul> <li>\u88dc\u5145:<ul> <li>\u5beb\u6e05\u695a\u7684Commit Message\uff0c\u80fd\u5feb\u901f\u4e14\u6b63\u78ba\u5730\u627e\u5230\u60f3\u8981\u7684\u7248\u672c\uff0c\u56e0\u6b64\u9f13\u52f5\u5927\u5bb6\u57f9\u990a\u597d\u7684Git Commit Style\u3002</li> </ul> </li> <li>\u53ef\u4ee5\u9075\u5faa\u4ee5\u4e0b\u7684\u683c\u5f0f     <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre><ul> <li><code>&lt;type&gt;</code>: \u7528\u4f86\u63cf\u8ff0\u9019\u6b21\u63d0\u4ea4\u7684\u985e\u578b<ul> <li>feat: \u65b0\u529f\u80fd</li> <li>fix: \u4fee\u5fa9 Bug</li> <li>docs: \u6587\u4ef6\u8b8a\u66f4</li> <li>test: \u589e\u52a0\u6e2c\u8a66</li> </ul> </li> <li><code>&lt;scope&gt;</code>: (\u9078\u5beb)\u63cf\u8ff0\u9019\u6b21\u63d0\u4ea4\u5f71\u97ff\u7684\u7bc4\u570d\u6216\u6a21\u7d44</li> <li><code>&lt;subject&gt;</code>: \u63d0\u4ea4\u7684\u7c21\u77ed\u4f46\u660e\u78ba\u7684\u63cf\u8ff0\uff0c\u63cf\u8ff0\u672c\u6b21\u8b8a\u66f4\u505a\u4e86\u4ec0\u9ebc\uff0c\u76e1\u91cf\u4e0d\u8d85\u904e 50 \u500b\u5b57\u5143\u3002</li> <li><code>&lt;body&gt;</code>: (\u9078\u5beb)\u66f4\u8a73\u7d30\u7684\u8b8a\u66f4\u63cf\u8ff0\uff0c\u89e3\u91cb\u8b8a\u66f4\u7684\u539f\u56e0\u3001\u80cc\u666f\u6216\u5f71\u97ff\u3002</li> <li><code>&lt;footer&gt;</code>: (\u9078\u5beb) \u95dc\u65bcBreaking Changes\uff08\u8b93\u820a\u7248\u7a0b\u5f0f\u7121\u6cd5\u6b63\u5e38\u904b\u4f5c\u7684\u66f4\u65b0\uff09 \u7b49\u88dc\u5145\u8a0a\u606f\u3002</li> </ul> </li> <li> <p>Summary     \u53ef\u4ee5\u5728\u4f5c\u696d\u4e2d\u5beb<code>&lt;type&gt;</code>\u548c<code>&lt;subject&gt;</code>\u4f5c\u70ba\u7df4\u7fd2\u5373\u53ef\u3002     e.g. <code>$ git commit -m \"feat: add fibonacci function for instruction Fibo\"</code> \u8868\u793a\u65b0\u589e\u4e00\u500b\u5beb\u8cbb\u6ce2\u7d0d\u5951\u6578\u5217\u7684\u51fd\u5f0f\u3002</p> <p>\u5982\u679c\u60f3\u5beb\u66f4\u8a73\u7d30\u53ef\u4ee5\u6253<code>git commit</code>\u76f4\u63a5\u9032\u5165\u6587\u5b57\u7de8\u8f2f\u5668\u6253\u8a73\u7d30\u8a0a\u606f\u3002</p> </li> </ul>"},{"location":"tools/git_cmd/#git-status","title":"<code>git status</code>","text":"<p><code>git status</code> \u7528\u4f86\u6aa2\u67e5\u76ee\u524d\u7684 repository \u72c0\u614b\uff0c\u80fd\u986f\u793a\u54ea\u4e9b\u6a94\u6848\u5df2\u7d93\u52a0\u5165\u66ab\u5b58\u5340\uff0c\u54ea\u4e9b\u6a94\u6848\u9084\u672a\u88ab\u8ffd\u8e64\uff0c\u6216\u8005\u6709\u54ea\u4e9b\u8b8a\u66f4\u672a\u88ab\u63d0\u4ea4\u3002</p> <p><pre><code>$ git status\n</code></pre> \u7576\u6c92\u6709\u8b8a\u66f4\u6642\uff1a <pre><code>On branch master\nnothing to commit, working tree clean\n</code></pre> \u5982\u679c\u6709\u672a\u8ffd\u8e64\u7684\u6a94\u6848\uff1a <pre><code>On branch master\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        new_prog.txt\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> \u5982\u679c\u6a94\u6848\u767c\u751f\u66f4\u6539 <pre><code>On branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n        modified:   HelloWorld.c\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre></p>"},{"location":"tools/git_cmd/#git-remote","title":"<code>git remote</code>","text":"<p><code>git remote</code> \u7528\u4f86\u7ba1\u7406\u9060\u7aef repository\uff0c<code>git remote add</code> \u53ef\u4ee5\u5c07\u9060\u7aef repository \u52a0\u5165\u5230\u672c\u5730\uff0c\u4e26\u53d6\u540d\u70ba <code>origin</code>\u3002\u53ef\u4ee5\u7528\u4f86\u8a2d\u5b9a\u548c\u986f\u793a\u9060\u7aef repository \u7684 URL\u3002</p> <ol> <li> <p>\u65b0\u589e\u9060\u7aef repository\uff1a <pre><code>$ git remote add origin https://gitlab.course.aislab.ee.ncku.edu.tw/\u8cbc\u4e0a\u81ea\u5df1repo\n</code></pre> \u7db2\u5740\u53ef\u4ee5\u5728repository\u7684<code>\u7a0b\u5f0f\u78bc</code>\u6309\u9215\u9ede\u9078 </p> </li> <li> <p>\u6aa2\u67e5\u9060\u7aef repository\uff1a <pre><code>$ git remote -v\n</code></pre> \u986f\u793a\uff1a <pre><code>origin  https://gitlab.course.aislab.ee.ncku.edu.tw/ta/project0.git (fetch)\norigin  https://gitlab.course.aislab.ee.ncku.edu.tw/ta/project0.git (push)\n</code></pre></p> </li> </ol>"},{"location":"tools/git_cmd/#git-push","title":"<code>git push</code>","text":"<p><code>git push</code> \u7528\u4f86\u5c07\u672c\u5730\u7684\u8b8a\u66f4\u63a8\u9001\u5230\u9060\u7aef repository\u3002\u53ef\u4ee5\u6307\u5b9a\u5c07\u8b8a\u66f4\u63a8\u9001\u5230\u54ea\u500b\u9060\u7aef\u5206\u652f\uff0c\u4f8b\u5982 <code>origin</code> \u7684 <code>master</code> \u5206\u652f\u3002</p> <p><pre><code>$ git push origin master\n</code></pre> \u63a5\u8457\u8acb\u8f38\u5165\u81ea\u5df1\u7684Username\u548cPassword <pre><code>Username for 'https://gitlab.course.aislab.ee.ncku.edu.tw': \nPassword for 'https://UserName@gitlab.course.aislab.ee.ncku.edu.tw'\n</code></pre></p>"},{"location":"tools/git_cmd/#git-clone","title":"<code>git clone</code>","text":"<p><code>git clone</code> \u7528\u4f86\u5f9e\u9060\u7aef repository \u8907\u88fd\u5230\u672c\u5730\uff0c\u5305\u542b\u6240\u6709\u6a94\u6848\u548c commit \u7d00\u9304\u3002\u57f7\u884c\u5f8c\u6703\u5275\u5efa\u4e00\u500b\u8207\u9060\u7aef repository \u76f8\u540c\u7684\u672c\u5730\u526f\u672c\u3002</p> <p><pre><code>$ git clone https://github.com/TA/project0.git\n</code></pre> \u57f7\u884c\u5f8c\u986f\u793a\uff1a <pre><code>Cloning into 'prog0'...\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (2/2), done.\nReceiving objects: 100% (3/3), done.\n</code></pre></p>"},{"location":"tools/git_cmd/#git-checkout","title":"<code>git checkout</code>","text":"<p><code>git checkout</code> \u7528\u4f86\u5207\u63db\u5206\u652f\u6216\u6307\u5b9a\u7684 commit ID\uff0c\u8b93\u5de5\u4f5c\u76ee\u9304\u8b8a\u6210\u8a72\u7248\u672c\u7684\u72c0\u614b\u3002\u53ef\u4ee5\u6aa2\u8996\u6307\u5b9a\u7684 commit \u6216\u5207\u63db\u5230\u5176\u4ed6\u5206\u652f\u3002</p> <ol> <li> <p>\u5207\u63db\u5230\u6307\u5b9a commit\uff1a <pre><code>$ git checkout f041daf7a896afd27199f2c8bd6ee55cd3654113\n</code></pre> \u9019\u6703\u8b93 Git \u9032\u5165 \"detached HEAD\" \u72c0\u614b\uff0c\u5141\u8a31\u6aa2\u8996\u8a72\u7248\u672c\uff0c\u4f46\u4e0d\u5f71\u97ff\u4efb\u4f55\u5206\u652f\u3002</p> </li> <li> <p>\u56de\u5230\u6700\u65b0\u7684 <code>master</code> \u5206\u652f\uff1a <pre><code>$ git checkout master\n</code></pre></p> </li> </ol>"},{"location":"tools/git_cmd/#git-branch","title":"<code>git branch</code>","text":"<p><code>git branch</code> \u7528\u4f86\u986f\u793a\u76ee\u524d\u5b58\u5728\u7684\u5206\u652f\uff0c\u4e26\u6a19\u8a3b\u76ee\u524d\u6240\u5728\u7684\u5206\u652f\u3002\u9084\u53ef\u4ee5\u7528\u4f86\u5275\u5efa\u6216\u5207\u63db\u5206\u652f\u3002</p> <ol> <li> <p>\u986f\u793a\u76ee\u524d\u7684\u5206\u652f\uff1a <pre><code>$ git branch\n* master\n</code></pre></p> </li> <li> <p>\u65b0\u5efa\u4e00\u500b\u5206\u652f\uff1a <pre><code>$ git branch new-feature\n</code></pre></p> </li> <li> <p>\u5207\u63db\u5230\u65b0\u5efa\u7684\u5206\u652f\uff1a <pre><code>$ git checkout new-feature\n</code></pre></p> </li> </ol>"},{"location":"tools/git_cmd/#gitignore","title":"<code>.gitignore</code>","text":"<p>\u7576\u4f60\u7684\u5c08\u6848\u6709\u8a31\u591a\u5197\u9918\u7684\u6a94\u6848\u6642\uff0c<code>.gitignore</code> \u6a94\u6848\u7528\u4f86\u544a\u8a34 Git \u5ffd\u7565\u67d0\u4e9b\u4e0d\u9700\u8981\u8ffd\u8e64\u7684\u6a94\u6848\u6216\u76ee\u9304\u3002\u53ef\u4ee5\u5c07\u4e0d\u5fc5\u8981\u8ffd\u8e64\u7684\u6a94\u6848\u6a21\u5f0f\u5beb\u5165 <code>.gitignore</code> \u6a94\u6848\u3002</p> <p>\u4f8b\u5982: \u5728.gitignore\u5beb\u5165 <pre><code># Object files\n*.o\n*.elf\n\n# Executables\n*.exe\n*.out\n*.hex\n\n# Logs\n*.log\n</code></pre> Git \u4fbf\u6703\u5ffd\u7565\u6389\u7a0b\u5f0f\u7de8\u8b6f\u904e\u7a0b\u4e2d\u7684\u4e2d\u9593\u6a94\u4ee5\u53ca\u57f7\u884c\u6a94\u3002</p> <p><pre><code>$ git add .gitignore\n$ git commit -m \"Add .gitignore\"\n</code></pre> \u57f7\u884c\u5f8c\u986f\u793a\uff1a <pre><code>[master 8f8e123] Add .gitignore\n 1 file changed, 1 insertion(+)\n create mode 100644 .gitignore\n</code></pre> \u9019\u6a23\u6240\u6709 <code>.log</code> \u6a94\u6848\u90fd\u6703\u88ab Git \u5ffd\u7565\u3002</p>"},{"location":"tools/gitlab_ov/","title":"Gitla & Mattermost","text":"<p>Info</p> <ul> <li>Contributors\uff1aTA \u5cfb\u8c6a\u3001TA \u88d5\u79be</li> <li>Last updated\uff1a2024/09/22</li> </ul> <p>GitLab \u662f\u7a0b\u5f0f\u78bc\u8a17\u7ba1\u8207\u7248\u672c\u63a7\u5236\u670d\u52d9\uff0c\u7528\u65bc\u5be6\u9a57\u5ba4\u6216\u4f01\u696d\u5167\u90e8\u7684\u7a0b\u5f0f\u78bc\u7ba1\u7406\u8207\u5718\u968a\u5354\u4f5c\uff0c\u6211\u5011\u4f7f\u7528 Gitlab \u4f5c\u70ba\u8ab2\u7a0b\u4f5c\u696d\u7684\u7e73\u4ea4\u5340\uff0c\u4f46 Assignment Report \u7684\u90e8\u5206\u4ecd\u9700\u8981\u65bc Moodle \u4e0a\u7e73\u4ea4\u3002  </p> <p>\u70ba\u4e86\u4f7f\u7528 Gitlab \uff0c\u9700\u8981\u719f\u6089\u57fa\u790e\u7684 Git \u6307\u4ee4\uff0c\u65b9\u4fbf\u5728 Gitlab \u4e0a\u9032\u884c\u4f5c\u696d\u5c08\u6848\u4e0a\u50b3\u53ca\u66f4\u65b0</p> <p>Mattermost \u662f\u642d\u914d Gitlab \u4f7f\u7528\u7684\u901a\u8a0a\u8edf\u9ad4\uff0c\u672c\u5b78\u671f Lab \u8a0e\u8ad6\u5340\u4f7f\u7528\u6b64\u7dda\u4e0a\u7fa4\u7d44\uff08\u7dda\u4e0a\u53ef\u4ee5\u96a8\u6642\u767c\u554f\uff09\uff0cMattermost \u6709\u7db2\u9801\u7248\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f09app\u5f8c\u767b\u5165\u3002\u8edf\u9ad4\u9810\u8a2d\u901a\u77e5\u8a2d\u5b9a\u61c9\u8a72\u662f only mentioned\uff0c\u82e5\u662f\u60f3\u95dc\u6ce8\u8ab2\u7a0b\u8a0a\u606f\uff0c\u8a18\u5f97\u5230\u8a2d\u5b9a\u5340\u958b\u555f\u901a\u77e5\u3002</p>"},{"location":"tools/gitlab_ov/#_1","title":"\u5982\u4f55\u7e73\u4ea4\u4f5c\u696d &amp; \u4f5c\u696d\u6279\u6539\u65b9\u5f0f","text":"<p>\u9019\u5b78\u671f\u6279\u6539\u4f5c\u696d\u7684\u65b9\u5f0f\u63a1\u7528 Gitlab CI/CD Pipeline\uff0c\u52a9\u6559\u6703\u63d0\u4f9b\u4e00\u500b YAML \u6a94\u6848\u53eb\u505a <code>.gitlab-ci.yml</code>\uff08\u6ce8\u610f\u56e0\u70ba\u6a94\u6848\u540d\u7a31\u958b\u982d\u7684 <code>.</code> \u6240\u4ee5\u6703\u8b8a\u6210\u96b1\u85cf\u6a94\u6848\uff09\u3002 \u57fa\u672c\u4e0a\u5927\u5bb6\u53ef\u4ee5\u628a CI/CD Pipeline \u60f3\u50cf\u627f\u81ea\u52d5\u5316\u7684\u8173\u672c\uff0c\u53ea\u4e0d\u904e\u5176\u57f7\u884c\u7d50\u679c\u6703\u5373\u6642\u986f\u793a\u5728 Gitlab \u4e0a\u7684\u4f60\u7684 Repository \u4e2d\u3002 \u70ba\u4e86\u89f8\u767c Pipeline\uff0c\u5927\u5bb6\u52d9\u5fc5\u628a\u9019\u500b YAML \u6a94\u6848\u653e\u9032\u81ea\u5df1\u7684 Private Repo. \u4e2d\u3002</p>"},{"location":"tools/linux_cmd/","title":"Basic Linux Command","text":"<p>Info</p> <ul> <li>Contributors\uff1aTA \u88d5\u79be\u3001TA \u5cfb\u8c6a  </li> <li>Last Updated\uff1a2024/09/22</li> </ul> <p>Success</p> <p>Directory : It's a file system concept, like 'folder' in Windows. In computing, a directory is a file system cataloging structure which contains references to other computer files, and possibly other directories.</p>"},{"location":"tools/linux_cmd/#basic-linux-concepts","title":"Basic Linux Concepts","text":"<p>\u70ba\u4e86\u6d41\u66a2\u4f7f\u7528 Linux \u4f5c\u70ba\u4f60\u7684\u958b\u767c\u74b0\u5883\uff0c\u4f60\u81f3\u5c11\u9700\u8981\u77e5\u9053\u4e0b\u9762\u5e7e\u500b\u89c0\u5ff5</p> <ul> <li>\u7576\u524d\u8def\u5f91<ul> <li>\u8f38\u5165\u6307\u4ee4 <code>pwd</code> \u53ef\u4ee5\u5f97\u5230\u7576\u524d\u7684\u7d55\u5c0d\u8def\u5f91</li> </ul> </li> <li>\u79fb\u52d5\u76ee\u9304 (\u76f8\u5c0d\u8def\u5f91\u8207\u7d55\u5c0d\u8def\u5f91)<ul> <li>\u7d55\u5c0d\u8def\u5f91 - \u7686\u7531\u6839\u76ee\u9304\u70ba\u8d77\u9ede\uff0c\u8f38\u5165\u6307\u4ee4 <code>cd + \u7d55\u5c0d\u8def\u5f91</code> \u53ef\u4ee5\u524d\u9032\u5230\u76ee\u6a19\u76ee\u9304</li> <li>\u76f8\u5c0d\u8def\u5f91 - \u5b50\u76ee\u9304\u8207\u7236\u76ee\u9304\uff0c\u8a72\u76ee\u9304\u4e0a\u4e00\u5c64\u7684\u76ee\u9304\u70ba\u7236\u76ee\u9304\uff0c\u4e0b\u4e00\u5c64\u7684\u70ba\u5b50\u76ee\u9304</li> <li>\u8209\u4f8b\u4f86\u8aaa\uff0c\u82e5\u7576\u524d\u76ee\u9304\u8def\u5f91\u70ba <code>/c/Users/user/example_dir</code><ul> <li>\u524d\u9032\u7236\u76ee\u9304 - <code>cd ..</code> -&gt; \u9032\u5165 <code>c/Users/user</code></li> <li>\u524d\u9032\u5b50\u76ee\u9304 - <code>cd CO2024/lab0</code> -&gt; \u9032\u5165 <code>c/Users/user/example_dir/CO2024/lab0</code> ` </li> </ul> </li> </ul> </li> <li>\u67e5\u770b\u4e0a\u4e00\u500b Command \u7684 Return Value<ul> <li>\u57fa\u672c\u4e0a\u4f60\u5728 CLI \u4e2d\u8f38\u5165\u7684\u6bcf\u500b\u547d\u4ee4\u90fd\u61c9\u8a72\u8981\u6709\u4ed6\u7684 Return Value\uff1b\u4f46\u662f\uff0c\u7576\u4f60\u57f7\u884c\u5b8c\u67d0\u500b\u547d\u4ee4\u7684\u6642\u5019\uff0c\u4ed6\u7684\u56de\u50b3\u503c\u4e26\u4e0d\u6703\u76f4\u63a5\u986f\u793a\u5728\u756b\u9762\u4e0a\uff0c\u6240\u4ee5\u4f60\u5fc5\u9808\u4f7f\u7528\u7279\u5b9a\u7684\u547d\u4ee4\u4f86\u67e5\u770b\u9019\u500b\u56de\u50b3\u503c</li> <li><code>echo $?</code></li> </ul> </li> <li>I/O Redirection\uff08I/O \u91cd\u5b9a\u5411\uff09 &amp; Pipe\uff08\u7ba1\u9053\uff09     \u5728 Unix \u7cfb\u7d71\u4e2d\uff0c\u91cd\u5b9a\u5411\u548c\u7ba1\u9053\u7684\u51fa\u73fe\u9ad4\u73fe\u4e86 Unix \u54f2\u5b78\u4e2d\u7684\u5e7e\u500b\u6838\u5fc3\u7406\u5ff5\uff0c\u7279\u5225\u662f\u300c\u5c0f\u800c\u5c08\u6ce8\u7684\u5de5\u5177\u300d\u548c\u300c\u5c07\u5de5\u5177\u93c8\u63a5\u5728\u4e00\u8d77\u300d\u3002<ul> <li>Unix \u54f2\u5b78     Unix \u7684\u8a2d\u8a08\u7406\u5ff5\u662f\u5275\u5efa\u4e00\u7cfb\u5217\u5c0f\u800c\u5c08\u6ce8\u7684\u7a0b\u5e8f\uff0c\u6bcf\u500b\u7a0b\u5e8f\u5b8c\u6210\u7279\u5b9a\u7684\u4efb\u52d9\u3002\u9019\u4e9b\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u7d44\u5408\u4f7f\u7528\uff0c\u5f62\u6210\u66f4\u8907\u96dc\u7684\u529f\u80fd\u3002\u9019\u6a23\u7684\u8a2d\u8a08\u4fc3\u9032\u4e86\u9748\u6d3b\u6027\u548c\u53ef\u91cd\u7528\u6027\u3002</li> <li>I/O Redirection     I/O \u91cd\u5b9a\u5411\u5141\u8a31\u4f7f\u7528\u8005\u5c07\u8f38\u5165\u548c\u8f38\u51fa\u5f9e\u9810\u8a2d\u7684\u4f86\u6e90\u6216\u76ee\u7684\u5730\u8f49\u5411\u5176\u4ed6\u5730\u65b9\u3002\u9019\u7b26\u5408 Unix \u7684\u7406\u5ff5\uff0c\u56e0\u70ba\u5b83\u8b93\u55ae\u4e00\u547d\u4ee4\u80fd\u5920\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u8f15\u9b06\u5730\u5c07\u8f38\u51fa\u5beb\u5165\u6587\u4ef6\u3001\u5f9e\u6587\u4ef6\u4e2d\u8b80\u53d6\u8f38\u5165\uff0c\u6216\u5c07\u932f\u8aa4\u4fe1\u606f\u55ae\u7368\u8655\u7406\u3002\u4f8b\u5982\uff1a     <pre><code>echo \"Hello, World!\" &gt; output.txt\n</code></pre>     \u9019\u689d\u547d\u4ee4\u4e0d\u50c5\u7c21\u5316\u4e86\u8f38\u51fa\u8655\u7406\uff0c\u9084\u4f7f\u5f97\u65e5\u8a8c\u8a18\u9304\u8b8a\u5f97\u5bb9\u6613\uff0c\u5f37\u8abf\u4e86\u5de5\u5177\u7684\u9748\u6d3b\u6027\u3002     <pre><code>echo \"Hello, World!\" &gt;&gt; output.txt\n</code></pre>     \u96d9\u7bad\u982d <code>&gt;&gt;</code> \u4ee3\u8868\u7684\u662f\u9644\u52a0\u5728\u6a94\u6848\u5c3e\u7aef\uff0c\u800c\u4e0d\u662f\u8986\u5beb\uff08Override\uff09\u3002</li> <li>Pipe     \u7ba1\u9053\u5247\u9032\u4e00\u6b65\u9ad4\u73fe\u4e86 Unix \u7684\u54f2\u5b78\uff0c\u5141\u8a31\u5c07\u591a\u500b\u5c0f\u5de5\u5177\u4e32\u806f\u5728\u4e00\u8d77\uff0c\u8b93\u5b83\u5011\u5354\u540c\u5de5\u4f5c\u3002\u4f7f\u7528\u7ba1\u9053\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u5c07\u4e00\u500b\u547d\u4ee4\u7684\u8f38\u51fa\u76f4\u63a5\u50b3\u905e\u7d66\u53e6\u4e00\u500b\u547d\u4ee4\uff0c\u5f62\u6210\u6578\u64da\u8655\u7406\u7684\u6d41\u6c34\u7dda\u3002\u4f8b\u5982\uff1a     <pre><code>ls -l | grep \"txt\" | sort\n</code></pre>     \u9019\u689d\u547d\u4ee4\u4e32\u806f\u4e86\u4e09\u500b\u5de5\u5177\uff0c\u4f9d\u6b21\u57f7\u884c\uff1a\u5217\u51fa\u6587\u4ef6\u3001\u904e\u6ffe\u5305\u542b \"txt\" \u7684\u884c\u3001\u7136\u5f8c\u6392\u5e8f\u7d50\u679c\u3002\u9019\u7a2e\u65b9\u6cd5\u4e0d\u50c5\u63d0\u9ad8\u4e86\u6548\u7387\uff0c\u9084\u4f7f\u5f97\u547d\u4ee4\u7684\u7d44\u5408\u8b8a\u5f97\u9748\u6d3b\uff0c\u5f37\u8abf\u4e86\u300c\u7d44\u5408\u5c0f\u5de5\u5177\u4ee5\u5b8c\u6210\u8907\u96dc\u4efb\u52d9\u300d\u7684\u7406\u5ff5\u3002</li> </ul> </li> </ul>"},{"location":"tools/linux_cmd/#common-linux-commands","title":"Common Linux Commands","text":"<ul> <li><code>pwd</code> - \u986f\u793a\u7576\u524d\u5de5\u4f5c\u76ee\u9304</li> <li><code>cd</code> - \u4f7f\u7528\u76f8\u5c0d\u8def\u5f91\u6216\u7d55\u5c0d\u8def\u5f91\u5207\u63db\u76ee\u9304</li> <li><code>mv</code> - move, \u79fb\u52d5\u6216\u91cd\u65b0\u547d\u540d\u6a94\u6848\u6216\u76ee\u9304</li> <li><code>ls</code> - list, \u986f\u793a\u7576\u524d\u76ee\u9304\u7684\u5b50\u76ee\u9304\u53ca\u6a94\u6848\u3002<ul> <li>\u8a9e\u6cd5\uff1a<code>ls [OPTIONS] [FILES]</code></li> <li>\u5e38\u7528options\uff1a<code>-a</code>(\u986f\u793a\u96b1\u85cf\u6a94\u6848), <code>-l</code>(\u986f\u793a\u8a73\u7d30\u8cc7\u8a0a)</li> </ul> </li> <li><code>mkdir</code> - \u5275\u5efa\u4e00\u500b\u65b0\u7684\u76ee\u9304\u3002<ul> <li>\u8a9e\u6cd5\uff1a<code>mkdir [OPTIONS] DIRECTORY</code></li> <li>\u7bc4\u4f8b\uff1a<code>mkdir new_folder</code></li> </ul> </li> <li><code>touch</code>\uff1a\u5efa\u7acb\u7a7a\u6a94\u6848\u6216\u66f4\u65b0\u6a94\u6848\u7684\u4fee\u6539\u6642\u9593\u3002<ul> <li>\u8a9e\u6cd5\uff1a<code>touch [OPTIONS] FILE</code></li> <li>\u7bc4\u4f8b\uff1a<code>touch newfile.txt</code></li> </ul> </li> <li><code>cp</code>\uff1a\u8907\u88fd\u6a94\u6848\u6216\u76ee\u9304\u3002<ul> <li>\u8a9e\u6cd5\uff1a<code>cp [OPTIONS] SOURCE DEST</code></li> <li>\u7bc4\u4f8b\uff1a<code>cp file1.txt /backup/</code></li> </ul> </li> <li><code>rm</code>\uff1a\u522a\u9664\u6a94\u6848\u6216\u76ee\u9304\u3002<ul> <li>\u8a9e\u6cd5\uff1a<code>rm [OPTIONS] FILES</code></li> <li>\u7bc4\u4f8b\uff1a<code>rm lab0.c</code>\u3001<code>rm -r directory_name</code>(<code>-r</code> - \u522a\u9664\u76ee\u9304\u5e95\u4e0b\u7684\u5b50\u76ee\u9304\u8207\u6a94\u6848)</li> </ul> </li> <li><code>rmdir</code>\uff1a\u522a\u9664\u7a7a\u76ee\u9304\u3002<ul> <li>\u8a9e\u6cd5\uff1armdir [OPTIONS] DIRECTORY</li> <li>\u7bc4\u4f8b\uff1armdir empty_folder</li> </ul> </li> <li><code>man</code>\uff1a\u67e5\u770b\u547d\u4ee4\u7684\u624b\u518a\u3002<ul> <li>\u8a9e\u6cd5\uff1aman COMMAND</li> <li>\u7bc4\u4f8b\uff1aman ls</li> </ul> </li> <li><code>grep</code>\uff1a\u641c\u5c0b\u6587\u672c\u4e2d\u7684\u5b57\u4e32\u3002<ul> <li>\u8a9e\u6cd5\uff1agrep [OPTIONS] PATTERN [FILE...]</li> <li>\u7bc4\u4f8b\uff1agrep \"search_term\" file.txt</li> </ul> </li> <li><code>find</code>\uff1a\u5728\u6a94\u6848\u7cfb\u7d71\u4e2d\u641c\u5c0b\u6a94\u6848\u3002<ul> <li>\u8a9e\u6cd5\uff1afind [PATH] [OPTIONS] [EXPRESSION]</li> <li>\u7bc4\u4f8b\uff1afind /home/user -name \"*.txt\"</li> </ul> </li> <li><code>cat</code>\uff1a\u986f\u793a\u6a94\u6848\u5167\u5bb9\u6216\u5c07\u591a\u500b\u6a94\u6848\u4e32\u63a5\u3002<ul> <li>\u8a9e\u6cd5\uff1acat [OPTIONS] [FILE...]</li> <li>\u7bc4\u4f8b\uff1acat file1.txt file2.txt</li> </ul> </li> <li><code>echo</code>\uff1a\u986f\u793a\u6587\u5b57\u6216\u8b8a\u6578\u7684\u503c\u3002</li> </ul>"},{"location":"tools/markdown/","title":"Markdown Tutorial","text":"<p>Info</p> <ul> <li>Contributors\uff1aTA \u88d5\u79be</li> <li>Last Update\uff1a2024/09/22</li> </ul> <p>\u539f\u6587\u9023\u7d50: Markdown\u8a9e\u6cd5\u5927\u5168</p> <p>\u6709\u4e9bMarkdown\u7684\u8a9e\u6cd5\u6c92\u8fa6\u6cd5\u7528\u5728\u9019\u88e1\uff0c\u53ef\u4ee5\u5728\u9019\u9801\u9032\u884c\u5c0d\u7167</p> <p>Example tip block</p> <p>example. 12345</p> <pre><code>!!! tip \"Example tip block\"\n    example.\n    12345\n</code></pre> <p>Example note block</p> <p>example. 12345</p> <p>Example info block</p> <p>example. 12345</p> <p>Example danger block</p> <p>example. 12345</p> <p>Example warning block</p> <p>example. 12345</p>"},{"location":"tools/markdown/#markdown","title":"MarkDown\u8a9e\u6cd5\u5927\u5168","text":"<p>[Toc]</p> <p>@copyright MRcoding\u7b46\u8a18</p>"},{"location":"tools/markdown/#_1","title":"\u4e3b\u6a19\u984c","text":"<p>\u6a19\u984c\u7684\u8a9e\u6cd5</p> <pre><code>\u6a19\u984c\n===\n</code></pre>"},{"location":"tools/markdown/#_2","title":"\u526f\u6a19","text":"<p>\u526f\u6a19\u7684\u8a9e\u6cd5</p> <pre><code>\u526f\u6a19\n---\n</code></pre>"},{"location":"tools/markdown/#_3","title":"\u5b57\u9ad4\u5927\u5c0f","text":"<p>\u5b57\u9ad4\u5927\u5c0f\u7684\u793a\u7bc4</p> <pre><code># H1\n## H2\n### H3\n#### H4\n##### H5\n</code></pre>"},{"location":"tools/markdown/#h1","title":"H1","text":""},{"location":"tools/markdown/#h2","title":"H2","text":""},{"location":"tools/markdown/#h3","title":"H3","text":""},{"location":"tools/markdown/#h4","title":"H4","text":""},{"location":"tools/markdown/#h5","title":"H5","text":""},{"location":"tools/markdown/#_4","title":"\u5b57\u9ad4\u6548\u679c","text":"<p>\u659c\u9ad4\u5b57 \u7c97\u9ad4\u5b57 \u659c\u7c97\u9ad4 ~~\u522a\u9664\u7dda~~ \u659c\u9ad42 \u659c\u7c972 \u6b63\u5e38^\u4e0a\u6a19^ \u6b63\u5e38~\u4e0b\u6a19~ ++\u5e95\u7dda++ \u87a2\u5149\u6a19\u8a18</p> <pre><code>*\u659c\u9ad4\u5b57*\n**\u7c97\u9ad4\u5b57**\n***\u659c\u9ad4\u517c\u7c97\u9ad4***\n~~\u522a\u9664\u7dda~~\n_\u659c\u9ad42_\n__\u659c\u7c972__\n\u6b63\u5e38^\u4e0a\u6a19^\n\u6b63\u5e38~\u4e0b\u6a19~\n++\u5e95\u7dda++\n==\u87a2\u5149\u6a19\u8a18==\n</code></pre>"},{"location":"tools/markdown/#_5","title":"\u5f15\u6587","text":"<p>\u7e2e\u6392\u8a9e\u6cd5 \u7b2c\u4e00\u5c64</p> <p>\u7b2c\u4e8c\u5c64</p> <p>\u7b2c\u4e09\u5c64</p> <pre><code>&gt;\u7e2e\u6392\u8a9e\u6cd5\n&gt;\u7b2c\u4e00\u5c64\n&gt;&gt;\u7b2c\u4e8c\u5c64\n&gt;&gt;&gt;\u7b2c\u4e09\u5c64\n</code></pre>"},{"location":"tools/markdown/#_6","title":"\u6a19\u865f","text":"<ol> <li>\u6578\u5b57\u6a19\u865f</li> <li>\u6578\u5b57\u6a19\u865f</li> <li>\u6578\u5b57\u6a19\u865f</li> <li>\u5176\u4ed6\u6a19\u865f</li> <li>\u5176\u4ed6\u6a19\u865f</li> <li>\u5176\u4ed6\u6a19\u865f</li> </ol> <pre><code>1. \u6578\u5b57\u6a19\u865f\n2. \u6578\u5b57\u6a19\u865f\n3. \u6578\u5b57\u6a19\u865f\n- \u5176\u4ed6\u6a19\u865f\n+ \u5176\u4ed6\u6a19\u865f\n* \u5176\u4ed6\u6a19\u865f\n</code></pre>"},{"location":"tools/markdown/#_7","title":"\u7e2e\u6392+\u63db\u884c","text":"<pre><code>\u7e2e\u6392\n</code></pre> <p>\u63db\u884c  </p> <pre><code>[Tab]\u7e2e\u6392\n\u884c\u672b\u6309\u5169\u500b\u7a7a\u683c  \u7523\u751f\u65b7\u884c (\uff0e\u21b2)\u3002\n</code></pre>"},{"location":"tools/markdown/#_8","title":"\u5de2\u72c0\u6a19\u865f","text":"<ul> <li>\u7121\u5e8f\u6e05\u55ae</li> <li> <p>\u7121\u5e8f\u6e05\u55ae</p> <ul> <li>\u7121\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae<ul> <li>\u7121\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae</li> </ul> </li> </ul> </li> <li> <p>\u6709\u5e8f\u6e05\u55ae</p> </li> <li>\u6709\u5e8f\u6e05\u55ae<ol> <li>\u6709\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae<ol> <li>\u6709\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae</li> </ol> </li> </ol> </li> </ul> <pre><code>- \u7121\u5e8f\u6e05\u55ae\n- \u7121\u5e8f\u6e05\u55ae\n    - \u7121\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae\n        - \u7121\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae\n\n1. \u6709\u5e8f\u6e05\u55ae\n2. \u6709\u5e8f\u6e05\u55ae\n    1. \u6709\u5e8f\u6e05\u55ae\u5b50\u6e05\u55ae\n        1. \u6709\u5e8f\u6e05\u55ae\u5b50\u5b50\u6e05\u55ae\n</code></pre>"},{"location":"tools/markdown/#_9","title":"\u5b9a\u7fa9\u6e05\u55ae","text":"\u540d\u8a5e1 \u89e3\u91cb1 \u540d\u5b572 \u89e3\u91cb2 <p>\u540d\u8a5e 3 ~ \u5b9a\u7fa9 3 ~ \u5b9a\u7fa9 3</p> <pre><code>\u540d\u8a5e1\n: \u89e3\u91cb1\n\n\u540d\u5b572\n: \u89e3\u91cb2\n\n\u540d\u8a5e 3\n~ \u5b9a\u7fa9 3\n~ \u5b9a\u7fa9 3\n</code></pre>"},{"location":"tools/markdown/#_10","title":"\u9023\u7d50","text":"<p>\u9023\u7d50\u540d\u7a31</p> <pre><code>[\u9023\u7d50\u540d\u7a31](https://google.com \"\u6e38\u6a19\u986f\u793a\")\n</code></pre>"},{"location":"tools/markdown/#_11","title":"\u7c21\u6613\u8d85\u9023\u7d50","text":"<p>https://google.com text@email.com</p> <pre><code>&lt;\u7db2\u5740\u6216mail&gt;\n</code></pre>"},{"location":"tools/markdown/#_12","title":"\u5206\u9694\u7dda","text":"<p>1.</p> <p>2.</p> <p>3.</p> <p>4.</p> <pre><code>1.\n\u7a7a\u884c\n---\n2.\n***\n3.\n- - -\n4.\n* * *\n---\n</code></pre>"},{"location":"tools/markdown/#_13","title":"\u7a0b\u5f0f\u78bc","text":"<p><pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n\n    printf(\"Hello World\");\n\n    return 0;\n}\n</code></pre> ```cpp=</p>"},{"location":"tools/markdown/#include","title":"include  <p>int main(){</p> <pre><code>printf(\"Hello World\");\n\nreturn 0;\n</code></pre> <p>} <code>\\</code>\u7a0b\u5f0f\u985e\u578b \u7a0b\u5f0f\u78bc ```  ```\u7a0b\u5f0f\u985e\u578b= \u884c\u865f+\u7a0b\u5f0f\u78bc ```</p>","text":""},{"location":"tools/markdown/#_14","title":"\u6a19\u7c64\u9023\u7d50","text":"<p>Google Yahoo MSN.</p> <p>``` Google Yahoo MSN</p> <pre><code>---\n\n\u5716\u7247\n---\n![\u5716\u7247](https://i1.wp.com/mrcodingroom.freesite.host/wp-content/uploads/2019/01/Drawing.png \"\u54c8\")\n\n```md\n![\u5716\u7247\u540d\u7a31](\u9023\u7d50 \"\u6e38\u6a19\u986f\u793a\")\n</code></pre>"},{"location":"tools/markdown/#_15","title":"\u5716\u7247\u9023\u7d50","text":"<pre><code>[![\u5716\u7247](\u5716\u7247\u7db2\u5740)](\u9023\u7d50\u7db2\u5740)\n</code></pre>"},{"location":"tools/markdown/#_16","title":"\u8868\u683c","text":"\u6b04\u4f4d1 \u6b04\u4f4d2 \u6b04\u4f4d3 \u7f6e\u5de6 \u7f6e\u53f3 \u7f6e\u4e2d $100 $100 $100 $10 $10 $10 $1 $1 $1 <pre><code>| \u6b04\u4f4d1 | \u6b04\u4f4d2 | \u6b04\u4f4d3 |\n| :-- | --: |:--:|\n| \u7f6e\u5de6  | \u7f6e\u53f3 | \u7f6e\u4e2d |\n</code></pre>"},{"location":"tools/markdown/#_17","title":"\u77ed\u5340\u584a","text":"<p><code>\u5167\u5bb9</code></p> <p>`\u5167\u5bb9`</p>"},{"location":"tools/markdown/#checkbox","title":"CheckBox","text":"<ul> <li>[ ] uncheck</li> <li>[x] check</li> </ul> <pre><code> - [ ] uncheck\n - [x] check\n</code></pre>"},{"location":"tools/markdown/#_18","title":"\u8df3\u812b\u5b57\u5143","text":"<p>## ```</p> <pre><code>\\+\u4efb\u610f\u7b26\u865f\n</code></pre>"},{"location":"tools/markdown/#tags-markdown-hackmd","title":"tags: <code>MarkDown\u6559\u5b78</code> <code>HackMD\u65b0\u624b\u6559\u5b78</code>","text":""}]}